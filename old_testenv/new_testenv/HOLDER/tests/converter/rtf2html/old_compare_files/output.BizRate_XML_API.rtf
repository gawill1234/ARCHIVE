<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<i><p>
</i><i><BODY>
20<p>
</i> <p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<i><b>XML API</b></i><p>
<i><b>Implementation</b></i><p>
<i><b>Document</b></i><p>
<p>
<p>
<i><b>BizRate.com<br>
XML API Implementation Document<br>
 </b><p>
</i><i>20<p>
</i><i><b>XML API Implementation.doc  Version: , 28-Mar-04</b></i><p>
<b><i>Document Version</i><p>
</b><p>
<b><i>Version</i> </b><b><i>Date</i> </b><b><i>Author</i> </b><b><i>Comment</i> </b><b><i>Authorization</i> <br>
</b><i><b>0.1</b></i> <i><b>28-Mar-04</b></i> <i><b>Anish Balakrishnan</b></i> <i><b>Initial draft</b></i>  <br>
     <br>
<p>
<b><i>References</i><p>
</b><b><p>
</b><p>
<b><i>Name</i> </b><b><i>Creation/Revision Date</i> </b><b><i>Author</i> </b><b><i>Version</i> </b><b><i>Comment</i> <br>
</b><i><b>Catalog XML API </b></i><i><b>Access For BizRate Partners document</b></i> <i><b>1.3</b></i> <i><b>David Pisoni, Bill Mullins</b></i>  <i><b>Technical Documentation</b></i> <br>
<u><i><b>Table of contents</b></i><p>
</u><u><p>
</u><p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<p>
<i><b>BizRate.com<br>
XML API Implementation Document<br>
 </b><p>
</i><i>20<p>
</i><i><b>XML API Implementation.doc  Version: , 28-Mar-04</b></i><p>
<u><b><p>
</b></u><b>1. </b><b><i>Summary</i><p>
</b><p>
<i><b>Currently, BizRate.com provides its partners with content in the form of Performance Listings pods, Product pods, Merchant pods etc.  Though these pods add great value to partner sites, there are a few restrictions imposed by the technology used in creating them.  As a result, any changes to the layout/content of these pods, though initiated by the partners themselves, would have to be accomplished by BizRate.com resulting in slower turnaround times.</b></i><p>
<p>
<i><b>With this in mind, the decision to use a standardized technology that would give BizRate.com partners greater control in determining the layout and content of the pods hosted on their sites was made. </b></i><p>
<p>
<i><b>To this end, BizRate.com has created an API that can take a number of user-supplied parameters and return the required result set in XML (since XML is both interoperable and an industry standard).  The XML output can be translated to HTML on the fly and used to generate dynamic customized pods.  </b></i><p>
<p>
<i><b>With the increased self-reliance afforded by this technology, the partners can leverage BizRate.com’s inventory, product rating and merchant ratings more advantageously.</b></i><p>
<p>
<p>
<i><b>1.1 </b></i><i><b>Purpose<p>
</b></i><p>
<i><b>The purpose of this document is to map out the implementation-specific details of the XML API (called the CatalogAPI). </b></i><p>
<i><b>1.2 Scope<p>
</b></i><p>
<i><b>The document is restricted in its scope to the above.</b></i><p>
<b>2. </b><b><i>Prerequisites</i><p>
</b><p>
<i><b>A working knowledge of XML and XSD is a pre-requisite.  A XSD for the CatalogAPI will be supplied along with this document to BizRate.com partners.</b></i><p>
<p>
<i><p>
</i><b>3. </b><b><i>Introduction</i><p>
</b><p>
<i><b>The CatalogAPI takes in a HTTP string containing user-supplied parameters to generate the requisite XML output.  Before the HTTP string or query can be built, the partner must set up an authentication mechanism to correctly identify the query that is sent to the CatalogAPI.    Here are the high-level steps that must be accomplished to use the CatalogAPI:</b></i><p>
<p>
<i><b>- Acquire an “Auth key”</b></i><p>
<i><b>- Acquire a “secret key”</b></i><p>
<i><b>- Create the query</b></i><p>
<i><b>- Generate an HMAC-MD5 digest for the query string using the query and the secret key</b></i><p>
<i><b>- Append the auth key and the digest to the end of the query string</b></i><p>
<i><b>- Submit the query string to the CatalogAPI</b></i><p>
<p>
<i><b>The following sections describe each of the above steps in detail.</b></i><p>
<b><i>4. Descriptions</i><p>
</b><i><b>4.1 Auth Key<p>
</b></i><p>
<i><b>This key uniquely identifies a partner and is supplied by BizRate.com.   It must be included in every query issued to the CatalogAPI.  It, like all the parameters in this document, has the parameter=value structure.  In this case, the parameter is “auth” and the value is the BizRate.com-supplied auth key.  </b></i><p>
<i><p>
</i><i><b>Eg: auth=test_key</b><p>
</i><i><b>4.2 Secret Key<p>
</b></i><p>
<i><b>Every auth key has a secret key associated with it.  The secret key is also supplied by BizRate.com.  The secret key in conjunction with the query itself is used to generate an HMAC-MD5 digest for the query string.  The digest is unique to the query/secret key combination.</b></i><p>
<p>
<i><b>Eg: </b></i><i><b>ZqdAO6A4XU8yFmyPL8G35A==</b></i><p>
<i><b>4.3 Tracking Code<p>
</b></i><p>
<i><b>The tracking code maps to the rf2 code that is used to track partner revenue streams.  This is supplied by BizRate.com.  The base rf code (partner identity) need not be defined and is the default. Only the rf2 (identification of a placement within a partner site) can be set.  The parameter, in this case, is tracking_code.  </b><p>
</i><p>
<i><b>Note:  This may no longer be required to be included in the query.</b><p>
</i><i><p>
</i><i><b>Eg: tracking_code=002</b><p>
</i><p>
<i><b>4.4 Query Creation<p>
</b></i><p>
<i><b>A query is built using the parameter=value structure.  ‘&amp;’ is used to separate query parameters.  An example follows:</b></i><p>
<p>
<i><b>keyword=jeans&amp;product_req=1&amp;category_req=5&amp;merchant_count=1&amp;attributeprice_req=6</b></i><p>
<p>
<i><b>The query parameters used to build the query string can be classified as follows:</b></i><p>
<p>
- <i><b>Required parameters</b></i><p>
- <i><b>Filter parameters</b></i><p>
- <i><b>Count parameters</b></i><p>
- <i><b>Sort parameters</b></i><p>
- <i><b>Miscellaneous parameters</b></i><p>
<p>
<i><b>These query parameters will be discussed in greater detail in Section 5.</b></i><p>
<p>
<i><b>The above sample with tracking code added:</b></i><p>
        <i><b>keyword=jeans&amp;product_req=1&amp;category_req=5&amp;merchant_count=1&amp;attributeprice_req=6&amp; tracking_code=001</b></i><p>
<p>
<i><b>4.5 HMAC-MD5 Digest<p>
</b></i><p>
<i><b>The digest (</b></i><i><b>Authentication digest token) is rendered in hexadecimal and is created thus:</b></i><p>
 <i><b><p>
<p>
<i><b></b></i><i><b>MYSECRET” as the SECRET_KEY, the resulting digest would be, </b></i><p>
<i><b><p>
<i><b>4.6 Adding Auth Key And Digest value To Query<p>
</b></i> <p>
<i><b>Using the above example and “test_key” as the auth key, the addition of the auth key and digest to query would result in the following:</b></i><p>
<p>
<i><b>keyword=jeans&amp;product_req=1&amp;category_req=5&amp;merchant_count=1&amp;attributeprice_req=6&amp; tracking_code=001&amp;auth=test_key&amp;digest=</b></i><p>
<i><b>4.7 Query Submission<p>
</b></i><p>
<i><b>The above query now needs to be submitted to the CatalogAPI.  The final CatalogAPI call would be:</b></i><p>
<p>
<i><b><p>
<p>
<b><i>5. Query Parameters</i><p>
</b><p>
<i><b>5.1. Required Parameters<p>
</b></i>      <p>
<i><b>These are the parameters that must be included in every call made to the CatalogAPI.  In addition, at least, one filter parameter (discussed in Section 5.2) must be used in every call.  </b></i><p>
<p>
<i><b>The required parameters are:</b></i><p>
 <p>
<p>
<i><b>- Auth key</b></i><p>
<i><b>- digest</b></i><p>
 <p>
<i><b>All of the above have been described in earlier sections.</b></i><p>
<p>
<i><b>5.2. Filter Parameters<p>
</b></i><p>
<i><b>The “Filter” parameters are:</b></i><p>
<p>
<i><b>- keyword</b></i><p>
<i><b>- category_id</b></i><p>
<i><b>- product_id</b></i><p>
<i><b>- merchant_id</b></i><p>
<i><b>- attributeBrand_id</b></i><p>
<i><b>- attributePrice_id</b></i><p>
<p>
<b><i>5.2.1 keyword</i><p>
</b>      <p>
<i><b>This is the search string that is submitted to the CatalogAPI.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<i><b>Keyword=jeans</b></i><p>
<i><b>Keyword=canon+powershot+G5</b></i><p>
<p>
<b><i>5.2.2 category_id</i><p>
</b>      <p>
<i><b>The provision of a category_id will restrict the query results to the corresponding category.  The category_id uniquely identifies a category in the BizRate.com taxonomy.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<i><b>Here category_id=402 corresponds to the “</b></i><p>
<p>
<b><i>5.2.3 product _id</i><p>
</b><p>
<i><b>Providing a product_id will restrict the query results to a specific product.  </b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<i><b>Here, product_id=7385471 corresponds to the “  </b></i><p>
<p>
<i><b>Note:</b></i><i><b> The inclusion of product_id will override all other query parameters.</b></i><p>
<i><b>Eg: </b></i><p>
<p>
<i><b>Here, the inclusion of keyword=jeans does not affect the query results.</b></i><p>
<p>
<b><i>5.2.4 merchant _id</i><p>
</b>      <p>
<i><b>This parameter will return results for a specific merchant for non-catalogued results.  Catalogued products, however, are not affected by this parameter.</b></i><p>
<p>
<i><b>Eg:</b></i><p>
<p>
<i><b>1) Non-cat</b></i><p>
<p>
<p>
<p>
<i><b>The above returns all categories and products that contain the keyword “roses”. </b></i><p>
<p>
<i><b>2) Non-cat with merchant_id filter</b></i><p>
<p>
<p>
<i><b>The above example returns all products and categories contain the keyword “roses” for merchant_id=20.  Here, merchant_id=20 corresponds to “FTD”</b></i><p>
<p>
<p>
<p>
<b><i>5.2.5 attributeBrand _id</i><p>
</b><p>
<i><b>This parameter will return results for a specific Brand.  The Brand_Id is an integer that uniquely represents a brand.   The attributeBrand_req parameter can be used to retrieve a set of Brand_Ids.  </b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<i><b>Here, brand_id=43010 corresponds to Canon.  So, the result set is restricted to only Canon cameras.</b></i><p>
<p>
<b><i>Note: the attributeBrand_req parameter is described in another section below.</i><p>
</b><b> <p>
</b><b><i>5.2.6 attributePrice _id</i><p>
</b><p>
<i><b>The inclusion of this parameter will return results for a specific price range as represented by the Price_id (uniquely represents a price grouping).  AttributePrice_req can be used to retrieve a set of Price_ids for a product.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<i><b>Here, Price_Id= 070426015582 corresponds to the ‘$10-$20’ price range.  So, the result set is restricted to products matching the keyword “roses” that are in the $10-20 price range.</b></i><p>
<p>
<b><i>Note: the attributePrice_req parameter is described in another section below.</i><p>
</b><p>
<i><b>5.3. Count Parameters<p>
</b></i><p>
<i><b>The count parameters are used to limit the result set returned by the CatalogAPI.  The list of available count parameters follows:</b></i><p>
<p>
<i><b>- category_req</b></i><p>
<i><b>- product_req</b></i><p>
<i><b>- mechantProduct_req</b></i><p>
<i><b>- start_product</b></i><p>
<i><b>- start_merchantProduct</b></i><p>
<i><b>- attributeBrand_req</b></i><p>
<i><b>- attributeMerchant_req</b></i><p>
<i><b>- attributePrice_req</b></i><p>
<i><b>- category_count</b></i><p>
<p>
<b><i>5.3.1. category_req</i><p>
</b><p>
<i><b>Including the category_req parameter in the query will limit the result set to the number set by category_req.</b></i><p>
<p>
<i><b>Eg:</b></i><p>
<p>
<i><b>1) </b></i><p>
<p>
<i><b>Here, a total of 7 categories are returned.</b></i><p>
<p>
<i><b>2) </b></i><p>
<p>
<i><b>Here, only one category (and its products) is returned.</b></i><p>
<p>
<b><i>5.3.2. product_req</i><p>
</b><p>
<i><b>This limits the number of products returned by the CatalogAPI.</b></i><p>
<p>
<i><b>Eg:</b></i><p>
<p>
<p>
<i><b>Here, ten products are returned by the CatalogAPI</b></i><p>
<p>
<p>
<p>
<i><b>Here, only four products have been requested and only four are returned.</b></i><p>
<b><i>5.3.3. mechantProduct_req</i><p>
</b>      <p>
<i><b>This parameter is to be used for catalogued products only and returns the merchant offers for a given product.  Hence, the query should also be restricted to one product only when merchantProduct_req is used.   </b></i><p>
<p>
<i><b>Eg:</b></i><p>
<p>
<p>
<p>
<i><b>Here, the product is “</b></i><p>
<p>
<b><i>5.3.4. start_product</i><p>
</b><p>
<i><b>This parameter can be used to enable the CatalogAPI to return its result set in batches.  For instance, if 10 products need to be shown per page and if there are 30 products in the result set, the start_product would be 10 for the first page, 11 for the second and so on.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<b><i>5.3.5. start_merchantProduct</i><p>
</b>     <p>
<i><b>This parameter is similar to start_product and is used to return result sets in batches.  The difference is that while start_product is used to return a set of products, start_merchantProduct is used to return a set of merchant offers for a given product.  The query should be restricted to one product only when this parameter is used.</b></i><p>
<p>
<i><b>Eg:</b></i><p>
<p>
<p>
<p>
<p>
<b><i>5.3.6. attributeBrand_req</i><p>
</b><p>
<i><b>The attributeBrand_req parameter can be used to retrieve a set of Brand_Ids.  The result set includes the brand_ids of the top brands matched by the query.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<b><i>5.3.7.attributeMerchant_req</i><p>
</b><p>
<i><b>This parameter can be used to limit the number of top merchants returned by the CatalogAPI.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<p>
<b><i>5.3.8. attributePrice_req</i><p>
</b><p>
<i><b>The attributePrice_req parameter can be used to retrieve a set of Price_ids.  A price_id uniquely represents a price grouping.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<p>
<i><b>5.4. Sort Parameters<p>
</b></i><p>
<i><b>The sort parameters are used to sort the result set returned by the CatalogAPI.  The list of available sort parameters follows:</b></i><p>
<p>
<i><b>- sort_product</b></i><p>
<i><b>- sort_merchantProduct</b></i><p>
<i><b>- sort_attributeBrand</b></i><p>
<i><b>- sort_attributeMerchant</b></i><p>
<p>
<b><i>5.4.1. sort_product</i><p>
</b><p>
<i><b>As the name implies, using this parameter will sort the product results returned by the CatalogAPI.  The list of available sort values for the sort_product parameter is:</b></i><p>
<p>
<i><b>- price_asc:  Sort by product price in ascending order</b></i><p>
<i><b>- price_desc: Sort by product price  in descending order</b></i><p>
<i><b>- merchant_asc: Sort by merchant/store in ascending order</b></i><p>
<i><b>- merchant_desc: Sort by merchant/store in descending order</b></i><p>
<i><b>- rating: Sort by rating in ascending order</b></i><p>
<p>
<b><i>Note: if the sort_product parameter is not specified, the default sort is used.  Here, the result set is sorted by the “relevance sort order”.</i><p>
</b><p>
<p>
<i><b>Eg: </b></i><p>
<i><b>1) price_asc</b></i><p>
<p>
<p>
<i><b>2) price_desc</b></i><p>
<p>
<p>
<p>
<i><b>3) merchant_asc</b></i><p>
<p>
<p>
<p>
<i><b>4) merchant_desc</b></i><p>
<p>
<p>
<i><b>5) rating</b></i><p>
<p>
<p>
<p>
<i><b>6) default</b></i><p>
<p>
<p>
<p>
<p>
<p>
<b><i>5.4.2. sort_merchantProduct</i><p>
</b><p>
<i><b>The sort_merchantProduct parameter can be utilized to sort the results returned from the CatalogAPI by merchant attributes.</b></i><p>
<p>
<i><b>The sort values available are:</b></i><p>
<p>
<i><b>- merchant_asc: Sort by merchant name in ascending order</b></i><p>
<i><b>- price_asc : Sort by offer price in ascending order</b></i><p>
<i><b>- price_desc: Sort by offer price in descending order</b></i><p>
<i><b>- rating: Sort by merchant rating in ascending order</b></i><p>
<i><b>- avg_overall: Sort by the avg_overall value.  This value provides the overall score of the merchant based on customer reviews.   This is identical to the rating sort value. </b></i><p>
<i><b>- avg_likely: Sort by the avg_likely value.  This value is also based on customer reviews and represents the “likelihood to buy again” score of the merchant.  The higher the score, the more likely the merchant is to get repeat customers.</b></i><p>
<i><b>- avg_avail: Sort by the avg_avail value.  This too, is based on customer reviews and represents the “product availability” score of the merchant.  The higher the score, the better the chance of the availability of a given product at a merchant site.</b></i><p>
<i><b>- avg_custs:  Sort by the avg_custs value.  Based on customer reviews, this value represents the “customer support” score of the merchant.  The higher this score, the better the quality of the merchant’s customer support service.</b></i><p>
<i><b>- avg_prrep: Sort by the avg_prrep value.  This value is based on customer reviews and represents the “product met expectations” score of the merchant.  The higher the value of avg_prep, the better the quality (reliability) of the product supplied by the merchant.</b></i><p>
<p>
<i><b>Note: if the sort_merchantProduct parameter is not specified, the default sort (probability sort) is used.    Also, the avg_overall, avg_likely, avg_avail, avg_custs and avg_prep values have the “BizRate.com Smiley Scale” images associated with them  See Section 6 for more information about the “BizRate.com Smiley Scale”.</b></i><p>
<p>
<i><b>Eg: </b></i><p>
<i><b>1) merchant_asc</b></i><p>
<b><i>5.4.3. sort_attributeBrand</i><p>
</b><p>
<p>
<i><b>The sort values available are:</b></i><p>
<i><b>- count : Product count</b></i><p>
<i><b>- prob: probability</b></i><p>
<i><b>- value_asc: Attribute value in ascending order.</b></i><p>
<p>
<i><b>The above values are based on the attribute types.</b></i><p>
<p>
<b><i>Note: value_asc is the default sort value.</i><p>
</b> <p>
<b><i>5.4.4. sort_attributeMerchant</i><p>
</b><p>
<p>
<i><b>The sort values available are:</b></i><p>
<i><b>- count : Product count</b></i><p>
<i><b>- prob: probability</b></i><p>
<i><b>- value_asc: Attribute value in ascending order.</b></i><p>
<p>
<i><b>The above values are based on the attribute types.</b></i><p>
<p>
<b><i>Note: value_asc is the default sort value.</i><p>
</b><p>
<p>
<i><b>5.5. Miscellaneous Parameters<p>
</b></i><p>
<i><b>The list of available parameters follows:</b></i><p>
<i><b>- long_descriptions</b></i><p>
<i><b>- productImage_len</b></i><p>
<i><b>- Tracking Code</b></i><p>
<p>
<b><i>5.5.1. long_descriptions</i><p>
</b><p>
<i><b>BizRate.com classifies product descriptions into two types:</b></i><p>
<i><b>- descriptions whose length does not exceed 255 characters</b></i><p>
<i><b>- textual descriptions or long descriptions (length &gt; 255 characters)</b></i><p>
<p>
<i><b>The former is returned by the CatalogAPI, by default.  In other words, when the CatalogAPI returns product descriptions, there is always a 255-character length limit.  To acquire long descriptions of products from the CatalogAPI, the long_descriptions parameter can be used. </b></i><p>
<p>
<i><b>Note:  The use of this parameter will significantly slow down query response and should be used with caution.</b></i><p>
<b><p>
</b><b><i>5.5.2. productImage_len</i><p>
</b><p>
<i><b>The four default product image sizes supported by the CatalogAPI are as follows:</b></i><p>
<p>
<i><b>- Small: 60 Pixels Square</b></i><p>
<i><b>- Medium: 100 Pixels Square</b></i><p>
<i><b>- Medium Large: 160 Pixels Square</b></i><p>
<i><b>Large: 400 pixels square</b></i><p>
<p>
<i><b>These default image sizes can be revised by using the productImage_len parameter.</b></i><p>
<i><b>Use commas to designate which default size you are revising. </b></i><p>
<p>
<i><b>E.g. = 75,,, would resize the small image from 60 to 75 pixels square.</b></i><p>
<i><b>E.g. = ,,,300 would resize the large image to from 400 to 300 pixels square</b></i><p>
<p>
<i><b><u>Note</u></b></i><i><b>:  Images cannot be sized any larger than 400 Pixels Square.  Use of this parameter is not recommended.</b></i><p>
<p>
<p>
<p>
<b><i>6. Appendix A</i><p>
</b><p>
<i><b>6.1 Additional Data Returned By The CatalogAPI<p>
</b></i><p>
<i><b>The CatalogAPI returns additional data that is not affected by any of the above parameters.  </b></i><p>
<p>
<b><i>6.1.1 In Stock</i><p>
</b>   <p>
<i><b>The in_stock tag returns product availability status.  An empty tag signifies that the product is “in stock”.  A non-empty tag signifies a specific status.  Some examples follow:</b></i><p>
<p>
<i><b>1) &lt;in_stock /&gt;  = in stock</b></i><p>
<i><b>2) &lt;in_stock&gt;Out of Stock&lt;/in_stock&gt;</b></i><p>
<i><b>3) &lt;in_stock&gt;See Site&lt;/in_stock&gt;</b></i><p>
<i><b>4)</b></i><p>
<p>
<p>
<p>
<b><i>6.1.2. BizRate.com Smiley Scale Data</i><p>
</b><i><b><p>
</b></i><i><b>As part of the XML data sent in return to a query, BizRate includes the merchant ratings scores, and the images used to display the correct “Smiley Scale” icon on the partner site. BizRate partners are free to include these codes as desired into their Web sites.  </b></i><i><b>The CatalogAPI returns the merchant ratings score for each of five parameters:</b></i><p>
<p>
<i><b>- Would Shop Again (avg_likely)</b></i><p>
<i><b>- On Time Delivery (avg_avail)</b></i><p>
<i><b>- Customer Support (avg_custs)</b></i><p>
<i><b>- Product Met Expectations (avg_prrep)</b></i><p>
<i><b>- Average of the other four parameters (avg_overall)</b></i><p>
<p>
<i><b>An example of the merchant ratings returned by the CatalogAPI follows:</b></i><p>
<p>
<i><b>&lt;merchRating avg_likely="9.1" avg_avail="9.1" avg_custs="9.1"</b></i><p>
<i><b>avg_prrep="9.2" avg_overall="9.0" /&gt;</b></i><p>
<i><b>&lt;merchRatingImageURL avg_likely="merchRate-4" avg_avail="merchRate-4"</b></i><p>
<i><b>avg_custs="merchRate-4" avg_prrep="merchRate-4" avg_overall="merchRate-4" /&gt;</b></i><p>
<b><p>
</b>      <i><b>merchRate-4 maps to a “Smiley Scale” item.  There are five possible items:</b></i><p>
   <p>
1) <i><b>merchRate-0: N/A (Not Available)</b></i><p>
2) <i><b>merchRate-1: Poor</b></i><p>
3) <i><b>merchRate-2: Satisfactory</b></i><p>
4) <i><b>merchRate-3: Good</b></i><p>
5) <i><b>merchRate-4: Outstanding</b></i><p>
<p>
<i><b>The links to images for each of these statuses are also returned by the CatalogAPI with the &lt;imageURL&gt;&lt;/imageURL&gt; tag.</b></i><p>
<p>
<p>
<p>
<b><i>7. Appendix B</i><p>
</b><i><b>7.1. </b></i><i><b>Complete List Of Query Parameters<p>
</b></i><p>
<b><i>Parameter</i> </b><b><i>Description</i> </b><b><i>Notes</i> <br>
</b><b><i>Required</i> </b>  <br>
<i><b>auth</b></i> <i><b>Authentication ID</b></i> <i><b>Provided by BizRate.com</b></i> <br>
<i><b>digest</b></i> <i><b>Authentication digest token</b></i> <i><b>See the Procedures section above for instructions on creating a digest.</b></i> <br>
<i><b>tracking _code </b></i><p>
 <i><b>Rf2 code that is used to track the instances of revenue streams for a partner</b></i> <i><b>Used to pass in the rf2 value into the API call. The base rf code (partner identity) need not be defined and is the default. Only the rf2 (identification of a placement within a partner site) can be set. </b></i> <br>
<b><i>Filters</i> </b>  <br>
<i><b>category_id</b></i> <i><b>Restricts the query to the Category ID </b></i>  <br>
<i><b>product_id</b></i> <i><b>Restricts the query to the Product ID</b></i> <i><b>Including this term will supercede all other query terms</b></i> <br>
<i><b>merchant_id</b></i> <i><b>Restricts the query to the Merchant ID </b></i> <i><b>Does not affect catalog results.</b></i> <br>
<i><b>attributeBrand_id</b></i> <i><b>Restricts the query to the Brand ID </b></i> <i><b>Brand IDs can be extracted from queries requesting attributeBrand_req</b></i> <br>
<i><b>attributePrice_id</b></i> <i><b>Restricts the query to the Price ID</b></i> <i><b>Price groupings all have an ID, returned by queries requesting attributePrice_req</b></i> <br>
<b><i>Counts</i> </b>  <br>
<i><b>category_req</b></i> <i><b>Number of categories requested</b></i>  <br>
<i><b>product_req</b></i> <i><b>Number of products requested</b></i>  <br>
<i><b>merchantProduct_req</b></i> <i><b>Number of merchants per catalog product requested</b></i> <i><b>This parameter is ignored unless product_id is specified</b></i> <br>
<i><b>start_product</b></i> <i><b>Product offset within total query response to start returning</b></i> <i><b>Counting numbers (e.g., if you are showing 10 per page, page 2 starts at 11.)</b></i> <br>
<i><b>start_merchantProduct</b></i> <i><b>Merchant offset within list of merchant offers for catalog products</b></i> <i><b>This affects all catalog products, though you generally only want one product at a time.</b></i> <br>
<i><b>attributeBrand_req</b></i> <i><b>Count of top brands matched by query</b></i> <i><b>Value is the number of brands you want counts of</b></i> <br>
<i><b>attributeMerchant_req</b></i> <i><b>Count of top merchants (stores) matched by query</b></i> <i><b>Value is the number of merchants you want counts of</b></i> <br>
<i><b>attributePrice_req</b></i> <i><b>Count of price groupings matched by query</b></i> <i><b>Value is the number of price ranges you want counts of</b></i> <br>
<i><b>category_count</b></i> <i><b>Flag to request category response to include counts of matching products</b></i> <i><b>Using any of the attribute queries in the Counts section above will trigger the category_count parameter. This option is provided here as a convenience if you only need counts for categories and not for any attributes.<br>
This is not enabled by default for efficiency reasons. Queries issued with no counting requests are significantly faster than queries with counts.</b></i> <br>
<b><i>Sorts</i> </b>  <br>
<i><b>sort_product</b></i> <i><b>Product result sort. Default sort is “probability”</b></i> <i><b>See relevant section above for valid values</b></i> <br>
<i><b>sort_merchantProduct</b></i> <i><b>Product offers result </b></i> <i><b>See relevant section above for valid values</b></i> <br>
<i><b>sort_attributeBrand</b></i> <i><b>Brand attribute sort </b></i> <i><b>See relevant section above for valid values</b></i> <br>
<i><b>sort_attributeMerchant</b></i> <i><b>Merchant attribute sort </b></i> <i><b>See relevant section above for valid values </b></i> <br>
<b><i>Misc.</i> </b>  <br>
<i><b>long_descriptions</b></i> <i><b>Product description longer than 255 characters</b></i> <i><b>Slows down the query response time</b></i> <br>
<i><b>productImage_len</b></i> <i><b>Allows the revision of default image sizes. The default sizes are:</b></i><p>
<p>
<i><b>Small – 60 pixels square</b></i><p>
<i><b>Medium – 100 pixels square</b></i><p>
<i><b>Medium Large – 160 pixels square</b></i><p>
<i><b>Large – 400 pixels square</b></i> <i><b>Use commas to designate which default size you are revising. </b></i><p>
<i><b>e.g. = 75,,, would resize the small image from 60 to 75 pixels square.</b></i><p>
<i><b>e.g. = ,,,300 would resize the large image to from 400 to 300 pixels square</b></i><p>
<i><b><u>NOTE</u></b></i><i><b>:  Images cannot be sized any larger than 400 pixels square.</b></i> <br>
<p>
<b><i>8. Appendix C</i><p>
</b><i><b>8.1 HMAC<p>
</b></i><p>
<i><b>The mechanism the BizRate.com Catalog XML API currently uses for authentication is Hashed Message Authentication Code (HMAC) using a Message Digest 5 (MD5) digest. HMAC is a mechanism for message authentication using cryptographic hash functions and is documented in </b></i><i><b>.  MD5 is a cryptographic hash algorithm and is documented in .</b></i><p>
<i><b>HMAC depends on both parties (sender and receiver) having a "shared secret": a token known only to the parties. It is vital that the secret key be kept private, as compromising it will compromise access to our system.</b></i><p>
<i><b>It is unlikely the partners will be required to implement the HMAC mechanism at a low-level themselves. Publicly available libraries have been written for most languages, providing an API for using the mechanism. If any help is required to find such libraries, please contact BizRate.com. </b></i><p>
<i><b><p>
</b></i></BODY>
</HTML>
