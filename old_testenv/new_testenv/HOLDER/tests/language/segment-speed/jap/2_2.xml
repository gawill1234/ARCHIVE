<?xml version="1.0" encoding="UTF-8"?>
<testset>
<test>
<data>
修士論文 2008 年度 (平成 20 年度)

通信の類似性に着目した ネットワークインシデント検知手法

慶應義塾大学大学院 政策・メディア研究科 金井 瑛

修士論文要旨 2008 年度 (平成 20 年度)

通信の類似性に着目した ネットワークインシデント検知手法
論文要旨 悪意のあるプログラム (マルウェア) に感染したホストの活動はインターネット利用 者にとって大きな脅威となっている．マルウェアに感染したホストの集合はボットネッ トと称されるネットワークを構築し，DDoS 攻撃や迷惑メールの送信などの組織的犯 罪に利用される．既存のマルウェア対策手法の多くは，マルウェアの感染を予防する 点に注目している．しかし，近年，攻撃者は新しい感染方法の開発とマルウェア活動 の隠蔽化に注力しており，既存の手法を用いた感染の予防が難しくなっている．また， 亜種の多量な発生により，各マルウェアの特徴を利用したシグネチャ型の検知手法は 効果が期待できない．ボットネットによる脅威を低減するための手段として，ネット ワーク上でマルウェアに感染してしまったホストを，亜種の発生に影響されることな く検知できる手法が必要となる． 本研究では，マルウェアの通信をモデル化し，未知のマルウェア亜種に対して効果的 な検知を実現した．モデル化にあたり，新規に出現したマルウェアであっても，過去に 出現したマルウェアの通信と類似性がある点に着目している．本モデルを用いること で新種のマルウェア固有の情報がなくても，ネットワーク上のマルウェアに感染した ホストの検知が可能となる．本手法を評価するためにインターネット上のマルウェア を収集し，仮想マシンを用いてマルウェアの通信を自動的に収集する機構を構築した． 本機構で得られたマルウェアの通信を用いて既存の手法と本手法の検知結果を比較し， マルウェアの通信モデルを用いた検知が未知のマルウェア亜種に対して有効な検知手 法であることを示した．これにより，既存の手法では難しかったマルウェアへの対応 が可能となり，インターネット上のボットネットによる脅威の低減が期待できる．

キーワード 1．インターネット，2．セキュリティ，3．ボットネット, 4. 通信モデル

慶應義塾大学大学院 政策・メディア研究科

金井 瑛



3.4 ノードベースの対策 . . . . . . . . . . . . . . . . . . . . . . . . . . . .
第 4 章 通信データの収集 4.1 ボット通信収集に求められる課題 . . . . . . . 4.1.1 自動的な収集機能 . . . . . . . . . . . . 4.1.2 外部への通信の制限 . . . . . . . . . . 4.2 ハニーポット: 能動感染型ボットの取得 . . . . 4.3 ボットクローラ: 受動感染型ボットの取得 . . 4.4 フィルタ: 外部に対する悪意のある通信の遮断 第5章 5.1 5.2 5.3


通信のモデル化 亜種と通信の類似性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 通信のモデル化を利用した検知 . . . . . . . . . . . . . . . . . . . . . . マルウェアの通信モデル化の例 . . . . . . . . . . . . . . . . . . . . . .

第 6 章 評価 6.1 評価環境 . . . . . . . . . . . . . . . . . 6.2 評価対象 . . . . . . . . . . . . . . . . . 6.2.1 モデルの解説 . . . . . . . . . . 6.2.2 モデルに含まれる状態の解説 . 6.3 評価結果 . . . . . . . . . . . . . . . . . 6.3.1 各モデルに一致したイベント数 6.3.2 各状態に一致したイベント数 . 6.4 既存研究との比較 . . . . . . . . . . . . 6.5 考察 . . . . . . . . . . . . . . . . . . . 第 7 章 結論 7.1 総括 . . . . . . . . . . . . . . . . . . . 7.2 今後の課題 . . . . . . . . . . . . . . . 7.2.1 複数の対策手法の連携 . . . . . 7.2.2 全く新しいマルウェアへの対応 7.2.3 実ネットワークでの運用と評価 7.2.4 環境に依存する脅威への対応 . 付 録A A.1 A.2 A.3 通信データの再構成 目的 . . . . . . . . . . . . . . . . . . . 能動型感染ボットの通信取得機構 . . . 問題点 . . . . . . . . . . . . . . . . . . A.3.1 PCAP ファイルの持つ情報の差 A.3.2 IP アドレスの差 . . . . . . . . .

目次
2.1 ボットネットの概要 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2 プッシュ型転送とプル型転送の例 . . . . . . . . . . . . . . . . . . . . . 3.1 snort 用に書かれたボット感染を検知するシグネチャの実例 . . . . . . . 4.1 受動感染型ボットの収集機構 . . . . . . . . . . . . . . . . . . . . . . . 3 6 16 19 23 26 28 44 45 46 48 49 50 50 51

5.1 攻撃パターンを変化させて感染する自己変形型マルウェアの例 . . . . . 5.2 モデルの例 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6.1 評価で用いたモデル . . . . . . . . . . . . . . . . . . . . . . . . . . . . A.1 A.2 A.3 A.4 A.5 A.6 A.7 A.8
マルウェアトラフィ ック収集のための一般的なハニーポット環境 実環境との差 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 実時間と pcap に含まれる時間の差分 . . . . . . . . . . . . . . . Nepenthes における実装の差分 . . . . . . . . . . . . . . . . . . パッチを適応した Nepenthes により出力されるログの例 . . . . pcap ipreplacer の利用方法 . . . . . . . . . . . . . . . . . . . . . pcap macreplacer の利用方法 . . . . . . . . . . . . . . . . . . . pcap appender の利用方法 . . . . . . . . . . . . . . . . . . . . .

表目次
5.1 能動感染型ボット A における通信 . . . . . . . . . . . . . . . . . . . . . 5.2 能動感染型ボット B における通信 . . . . . . . . . . . . . . . . . . . . . 6.1 6.2 6.3 6.4 6.5 6.6
評価に利用した能動感染型マルウェアの収集環境 . . . . . . . 評価モデルの解説 . . . . . . . . . . . . . . . . . . . . . . . . . 評価で用いた状態の解説 . . . . . . . . . . . . . . . . . . . . . 各モデルに一致したイベント数 . . . . . . . . . . . . . . . . . 各状態に一致したイベント数 . . . . . . . . . . . . . . . . . . 未知のマルウェアを含む通信情報 (Tu) に対する検知比較結果


A.1 タイムラインで用いられる記号の解説 . . . . . . . . . . . . . . . . . . A.2 通信合成による検知手法への影響 . . . . . . . . . . . . . . . . . . . . .

第 1 章 研究概要
1.1
背景

近年，インターネット上で感染を広げる悪意のあるプログラム (マルウェア) への対 応が急務とされている．従来のマルウェアは自律的に感染を拡大させるプログラムが 大部分であったが，2000 年頃より感染に成功したノードを攻撃者が集中管理できるよ うにするマルウェアが急増している．攻撃者が管理できるマルウェアに感染したノー ドはボットと呼ばれ，ボットの集合はボットネットと呼ばれている．攻撃者はボット ネットを用いて，迷惑メールの送信や感染ノード上に保存されているクレジットカー ド番号の収集など，金銭的利益を目的とした不正な活動を行っている．2000 年 2 月に はボットネットを利用した大規模な DDoS 攻撃が発生し，Amazon.com や Yahoo!など の Web サイトが数時間停止するという被害が発生した [1]．2006 年 5 月には攻撃者が 大量のノードからクリック課金型の Web 広告を不正クリックし利益と得ているとの報 告がされた．この大量のノードの操作にはボットネットが利用されている [2]．2005 年 10 月にオランダで発見されたボットネットは 10 万ものボットから構成されたという報 告があった [3]．さらに，このボットネットは後の報告で，150 万以上ものボットから 構成されていた事実が判明し，深刻な規模のボットネットとして関心を集めた．この ボットネットを用いて攻撃者らは企業への脅迫や，ハッキング行為を行ったとの報告 がある．ボットネットはノードの管理者とネットワーク管理者の両者の観点から大き な脅威になっていると言える． 不正な活動により利益を得ようとする攻撃者はボットの存在を隠蔽し，規模を拡大 させるために高い技術力を導入していると言われている [4]．インターネットが社会の 基盤となっている背景から，ボットネットの対策には多くの組織において研究や対策 手法の開発が進められているだけではなく，国が主導となった計画も出現している．た とえば，日本ではボット感染予防推進事業が総務省・経済産業省と独立行政法人 情報 処理推進機構の間で開始されている [5]．しかし，現在のボット対策技術は，従来の脅 威の対策技術の延長となっている．ボットは亜種発生頻度の高さや，高度な隠蔽技術 により従来の脅威とは異なる特徴があるため，既存の対策技術では十分な効果が期待 できない．
 本研究の目的

第 1. 研究概要  

1.2

本研究の目的

本研究の目的は、各ネットワーク内部のボットを検知・排除することで、ボットネッ トによる脅威を低減することである．そのため、本論文では、ボットの定期的な管理 サーバへのアクセスや、ボットの活動に見られる特徴的なネットワーク通信に着目し て、ネットワーク内部におけるノードのボット感染を検知する手法を提案した． ネットワーク内のボットの対策には，内部のノードをボットネットに加入させない 事前対策と，ボットが内部に存在する場合の事後対策として，ボットの検知と駆除が 必要となる．しかし，ボットネットは攻撃や活動の種類を頻繁に変更するため，多くの 既存の手法が用いているシグネチャ型の検知手法では十分な検知ができない．ボット の事前対策や検知が難しい理由の１つとして，マルウェアの亜種が短期間で大量に出 現するというボットネットの特徴がある．現在，多くのマルウェア対策ソフトウェア では脅威に対応する技術として，対象に関する特定の特徴を示すシグネチャを用いて いる．このため，ボットに対する特徴のアップデートが追いつかず，ボットの検知は対 応が困難となっている． 本研究では新規に出現したマルウェアであっても各ボット動作の通信には類似性が ある点に着目し，検知手法を提案した．通信の類似性を利用して，既知のボット動作 から特徴のある通信の前後関係に基づいたノードの通信に着目したボットの通信モデ ルを作成する．通信モデルを用いるとボット亜種固有の情報を用いないネットワーク ベースのボット亜種の検知が可能となる．また，インターネット上のボットを収集し， 仮想マシンを用いてボット通信を自動的に収集する機構を実現した．この機構で得ら れたボット通信の既存の手法との検知結果を比較し，ボットの通信モデルを用いた検 知が未知のボット亜種に対して有効な検知手法であることを示す．

1.3

本論文の構成

本論文は全 7章で構成される．第 2 章では，ボットネットとボットの現状についてま とめる．第 3章では，既存のボット対策技術と研究について述べ，それぞれの特徴を整 理する．第 4章においてボット通信を収集する機構に求められる要求と今回実現した環 境について述べる．第 5章では，ボットの通信モデル化についての提案と解説をする． 第 6章において，実際のボット通信にみられる通信のモデルを示し，モデル化によるマ ルウェアに感染したノードの検知についての評価をする．第 7章では本論文を総括し， 本研究分野における今後の展望について述べる．

2

第 2 章 ボットネットの脅威
本章では，本研究においてボットネット検知対策を検討するにあたりボットネット の概要ならびにボットネットを構成するボットの概要をまとめ，ボットネットの特徴 を整理する．

2.1

ボットネットの概要

 2.1: ボットネットの概要

ボットネットの概要について， 2.1 を用いて示す．攻撃者は，ボットネットを管理 する悪意を持ったインターネット利用者である．近年では，ボットネットを拡大するイ ンターネット利用者や，ボットネットのボットを他人に貸し出すだけのインターネット 利用者など役割が分割されているとされているが，本論文中ではボットネットを管理・ 利用するインターネット利用者を総じて攻撃者と称する．ボットネットは，ボットネッ ト管理者により不正に操作されるノードであるボットの集合である．ボットは，マル ウェアに感染し，ボットネットを構成するノードの１つである．ボットは管理サーバ

 ボットネットによる被害

第 2. ボットネットの脅威  

を介した攻撃者からの命令に従って，ノードの管理者が意しない通信や行動を実行 する．


ボットネットによる被害

ボットネットにより被害を受けるのは，ボットネットから攻撃を受けたノードやそ の管理者だけではない．多くの場合，ボットのノード管理者はノードがボットネット へ加入した事実を把握おらず，自分の管理しているノードが悪意のある活動をしてい ると認識していない．そのため，ボットに感染したノードの多くは，ノード管理者に 認識されず，対応がなされない．ネットワーク内のボットの存在は，次に述べる理由 により，ネットワーク管理者にとっても脅威となる． 機密性に対する脅威 ボットに感染した活動によって，ノード内部に含まれる個人情報の流出や，組織の機 密情報の流出を引き起こす．この結果，クレジットカードの不正利用や内部情報の流 出によって，金銭的あるいは情報的な不利益を引き起こす． 可用性に対する脅威 ネットワーク利用者はネットワークやコンピュータの資源が使えなくなるおそれがあ る．ボットの活動は，SPAM 送信によるメールサーバへの負荷集中やマルウェアの感 染活動のためのトラフィ ック圧迫など，ネットワークが提供するサービスの可用性を脅 かす．本来の目的外でネットワークの帯域が利用され，ネットワークの帯域が増加す ると，ネットワークの接続性が不安定になる．ネットワーク管理者が安定したサービ スを提供するには，ネットワークの可用性を確保しなければならない．


ボットの感染活動

脆弱なノードに感染する際のボットの一般的な感染活動は攻撃，転送と接続の３段 階に分けられる [6]．

1. 攻撃:他のノードから攻撃が発生し，ダウンローダと呼ばれる小さなソフトウェア が送り込まれる 2. 転送:インターネット上の配布元ノードからマルウェアをダウンロードする． 3. 接続:ボットネットの管理サーバに接続する．
本節ではこれらのボットの基本的な活動について述べる．
 ボットの感染活動

第 2. ボットネットの脅威  

攻撃: マルウェアの感染

ボットネット管理者はより多くのノードを自らが管理するボットネットに参加させ るために，他のノードに対してマルウェアの感染活動を試みる．マルウェアの感染は 能動感染型と受動感染型の２つに分けられる．以下にそれぞれの特徴を述べる． 能動感染型 能動感染型のマルウェアの感染とは攻撃者あるいはボットが能動的に感染のための通 信を開始する感染方式である．一般的に本手法は脆弱性を持つネットワークサービス が動作しているノードに対して，エクスプロイトコード (Exploit Code) と呼ばれる不 正な動作を行うコードを送り込む．通信をすべて許可するネットワーク下において脆 弱なサービスを動作させているノード全てが能動感染型は外部から感染を受ける対象 となる．そのため，多くのノード上で利用されているサービスに脆弱性が発見された 際は即座に世界中のノードがボットに感染する可能背がある (一般に Zero-day Attack と呼ばれる)． 受動感染型 受動感染型のマルウェアの感染とはノード管理者が自発的に悪意のあるプログラムを 実行し，ボットに感染する感染方式である．現在，多くの受動感染型のマルウェアは， ウェブ経由あるいはメール経由で感染を行う．ウェブ経由の受動感染はウェブページ にウェブブラウザの脆弱性を利用したコードが含まれており，不正な動作を行うコー ドを送り込む感染方式である．メール経由の受動感染はメールにマルウェアあるいは マルウェアをダウンロードするためのソフトウェアを添付し，利用者に対し自発的に ソフトウェアをクリックさせる感染方式である． また，すべての感染に用いられる攻撃は既知の攻撃と未知の攻撃に分類される． 既知の攻撃 既存の攻撃は，セキュリティベンダ (セキュリティ対策の製品開発や研究などを行って いる企業) に認知されている攻撃を示す．認知された攻撃の多くは，攻撃の際に用いら れるパケットの特徴，通信の特徴を攻撃のシグネチャとして定義し，このシグネチャ を用いて攻撃の検知を試みる．既存の攻撃に関しては従来から多くの研究が行われて おり，インターネット利用者は既存の対策技術を正しく用いることで，十分な対策が できる． 未知の攻撃 未知の攻撃は，セキュリティベンダに認知されていない攻撃を示す．これらの攻撃は 解析によって既知の攻撃となる．しかし，未知の攻撃の解析には早くとも数時間から 一日程度かかる．また，解析結果を対策技術に適応するには攻撃のシグネチャを配布 する必要がある．しかし，その配布にかかる時間の問題から，セキュリティベンダに より解析が完了しても即座に攻撃を検知することは困難である．
 ボットの感染活動

第 2. ボットネットの脅威  

転送: ボットのダウンロード

攻撃を受けたノードはマルウェアの転送を開始する．近年の攻撃者は，攻撃が成功 したノードをボットとして利用するが，その際にはマルウェアをノードに送り込む必 要がある．これは，多くの攻撃が利用する攻撃の手法は文字列処理など，メモリ管理 の脆弱性を利用したものであり，大きなプログラムの転送が困難だからである．しか し，攻撃が利用する脆弱性によって送信できるソフトウェアの容量には制限がある．そ のため，攻撃者はダウンローダと呼ばれる，小さなソフトウェアを送り込みノードに 実行させる．ダウンローダはインターネット上の他のノードからマルウェアを転送す る機能のみを持ったソフトウェアであり，多くの場合マルウェアに比べてファイルサ イズが小さい． ダウンローダによってマルウェアのダウンロードが開始されるが，その手法にはプッ シュ型転送とプル型転送の２つの種類がある．この２つはそれぞれマルウェアの転送 方法が異なる．それぞれの転送方法について 2.2 を用いて解説する．左のプッシュ
 プッシュ型転送とプル型転送の例

型転送ではダウンローダが実行されると脆弱なノードはあらかじめプログラムされた ポート番号でインターネットからの通信を受け付ける．攻撃元ノードは配布元ノード に対して脆弱なノードの IP アドレス情報とポート番号を伝える．攻撃元ノードと配布 元ノードは同一ノードの場合もある．配布元ノードは受け取った情報を用いて，脆弱な ノードにマルウェアをアップロードする．プッシュ型転送はインターネット上のノード から通信が開始されるため，NAPT など，外部からの通信が制限された環境において プッシュ型の転送は動作しない．右のプル型転送ではダウンローダが実行されると 脆弱なノードはあらかじめプログラムされた IP アドレスおよびポート番号で管理サー バに接続し，マルウェアをダウンロードする．プル型転送は脆弱なノードから通信が 開始されるため，外部からの通信が制限された環境においても動作する．

2.3.3

管理: 攻撃者との通信

マルウェアの転送が終了し，マルウェアに感染したノードはボットネットの管理サー バに接続する．以後は管理サーバからの命令に従い活動する．管理とはボット管理者

 ボットの活動

第 2. ボットネットの脅威  

からの命令がボットネット上のノードに伝えられる状態を示す． Barford らの調査 [7]，Honeynet プロジェクトの調査 [6] や筆者らの調査によると，現 在のボットの管理方法は IRC プロトコルを利用した継続的な管理と．HTTP プロト コルを利用した定期的な管理に分類できる．

IRC プロトコルを利用した継続的な管理 IRC プロトコルを利用した継続的な管理をするボットネットでは，ボットに感染した ノードが管理サーバに対して IRC プロトコルを用いて接続する．ボットは指定された チャンネルあるいは PRIV メッセージ (IRC プロトコルにおいて定義されているチャン ネルを介さないユーザ間のメッセージコマンド) で攻撃者から命令が発行されるのを 待つ． HTTP プロトコルを利用した定期的な管理 HTTP プロトコルを利用した定期的な管理をするボットネットでは，ボットに感染し たノードが管理サーバに対して一定間隔で HTTP プロトコルを用いて接続する．ボッ トからの接続に対して管理サーバが命令を返答すると，ボットは応答で返された活動 を実行する． IRC を利用したボットネットの管理は HTTP を利用したボットネットの管理に比べ て，攻撃者が命令を発行した際に即座に命令を実行できる点で優れる．また，IRC の 性質から TCP の通信を継続するため，ノードがインターネットに接続している状態で あるかの判断が容易である．HTTP を利用する管理は，命令を実行する際の即時性に 欠けるが，HTTP は汎用的に利用されているプロトコルであるため，ネットワーク管 理者やセキュリティベンダによる対策を難しくし，ボットの活性率を高められる． 調査では，これらの管理方法はプロトコルが利用する一般的なポート番号 (WellKnown ポート番号 [8]) が変更されている事例や，それぞれのプロトコルに独自の変 更が加えられている事例が観測されている．筆者らの調査では，第 2.5.4項で述べる隠 蔽化のために，これらの変更を利用している攻撃者が多い．

ボットの活動

ボットとなったノードは第 2.3.3項で述べたとおり，管理サーバに接続し，ボットネッ ト管理者からの命令を待ち受ける．ボットネット管理者からの命令を受けた時，ある いは管理サーバに接続すると同時にボットは多様な動作を行う．動作はボットの種類 やボットネット管理者の命令によって異なる．また，すべての動作が可能なマルウェア もあれば，単一の活動機能のみを実行できるマルウェアもある．本節では，ボットの 活動の詳細について述べる．
ボットの活動

第 2. ボットネットの脅威  

能動的な感染活動

第 2.3.1節で述べたとおり，いくつかのマルウェアでは積極的な感染活動にボットネッ トを拡大させるための手段として，能動感染型の攻撃を行う．そのため，ノードがボッ トに感染すると即座に，あるいは管理サーバに接続すると即座に同一ネットワークあ るいはインターネット上のホストに対して脆弱性の走査 (脆弱性スキャン) あるいは攻 撃を試みる．

分散サービス拒否攻撃

分散サービス拒否攻撃は DDoS 攻撃とも呼ばれ，多量のインターネットノードにサー ビスを提供するサーバ，あるいはネットワークを提供するルータに対して一斉にサー ビス要求を送信する攻撃である．サービスを対象とした DDoS 攻撃では，ボットに感染 したノードから特定のサーバ上の Web サーバやメールサーバを対象として集中的なア クセスが発生させる．サービスを提供しているサーバでは自らの計算機資源を消費し てサービスを提供する．そのため，極端に多量のサービス要求が発生すると，資源が不 足してすべての要求に対応できない．攻撃者は特定の企業の Web サーバやメールサー バに DDoS 攻撃を実施するあるいは実施すると脅しをかけることで，企業のイメージ を低下させたり，金銭的な脅迫を仕掛けることができる．


迷惑メールの送信

迷惑メール (一般に SPAM メールとも称される) の送信とは単一のユーザから無差別 にインターネットメールを送信する活動である．迷惑メールは営利目的あるいは悪意 を持つ Web ページへの誘導のために送信される．本節ではこの２つについて述べる． 営利目的 営利目的に SPAM メールを送信するインターネットユーザ (SPAM 送信者) は自らの利 益となるような Web ページへの URL を記載したメールを送る．たとえば，自らが経 営するインターネット上の電子商取引サイトの URL など自らの収益に結びつくような URL を記載する． 悪意を持つ Web サイトへの誘導 第 2.3.1節で述べたように Web ブラウザや Web コンテンツが利用するアプリケーショ ンの脆弱性を用いた攻撃手法が存在する．そのため，ボットネット管理者の一部はこ れらの攻撃コードを含んだ Web ページを用意する．そして，ボットネットを拡大する ために無差別なユーザに対して用意した Web ページの URL を含むメールを送信する．

ボットネット対策の困難さ

第 2. ボットネットの脅威  


他ホスト攻撃のための踏み台

ボット管理者あるいは悪意のあるインターネットユーザが他のノードにアクセスする 際，あるボットを踏み台にする事例が存在する．踏み台となったノード上では SOCKS[9] などのサービスがノード管理者の意に反して動作させられる．攻撃者はそのホスト を中継して他のインターネットノードに攻撃を試みる．踏み台となったノードは本来， マルウェアの被害者であるが，この場合は攻撃を中継する加害者となる．また，攻撃 を受けたノードから踏み台となったノードが所属するネットワークの管理者にインシ デントを通達しても，対応がなされる保証はない．さらに，踏み台となったホストか ら攻撃者を特定することは連携した協力を得る点から難しい．

2.4.5

昇格

ボットネットはボット管理者からの命令を実行するボットと，管理サーバや転送サー バといったいくつかの特殊なノードから構成されている．ボットネット上に参加する 大部分のノードはボットである．特殊なノードからマルウェアが駆除されて機能しな くなった場合，攻撃者はボットネットの冗長性を高めるためにボットを特殊なノード に昇格させる．昇格したノードは新たなプログラムをダウンロードし，ボットネット の運用に荷担する．

2.5

ボットネット対策の困難さ

これまでに述べたとおり，ボットネットは悪意のある活動を目的としている管理さ れたノード群である．セキュリティベンダや多くのセキュリティ研究者は，ボットネッ トの対策を提案・検証している．しかし，未だインターネット上から効果的にボット の駆除や，ボットネットからの被害の低減は困難である．本研究ではボットネット対 策の困難さを，冗長性，分散性，規模性と隠蔽性に分けて考える．

2.5.1

冗長性

冗長性とは，攻撃者がノードあるいはネットワークの管理者にボットネットの対策 を施されてもボットネットを維持可能である様子を示す．ボットネットの維持とは，第 2.1節で述べたボットネットの機能のすべてが動作している状態を維持することである． ボットネットは管理サーバがボットに命令を伝達する．そのため，管理サーバがネット ワークから切断されてしまえば，ボットネットは活動を継続できない．また，転送サー バの動作が停止すれば，マルウェアの転送を阻止し，ボットネットの拡大を防げる． しかし，近年のボットネット管理ではこれらの手法への対策が見られる．多くのマル ウェアでは，ある管理サーバに対する接続が失敗した場合，異なる管理サーバに接続 を試行する．主な２つの例として，あらかじめプログラムされた予備のホストに接続

 ボットネット対策の困難さ

第 2. ボットネットの脅威  

する例と，管理ホストを DNS 名で指定しておき，対策をなされたと同時に DNS のエ ントリを変更する例が挙げられる．そのため，ある管理サーバを対策しても，ボット ネットの管理が別の管理サーバに移管され，ボットネットの動作の阻止には至らない．

2.5.2

分散性

分散性とは，ボットネットを構成するボットが，複数なネットワークに分散している 様子を示す．分散性の高いボットネットは，ボットが世界中に分散している．ボットは 多くの異なるネットワークに所属し，各ネットワークの管理者が異なるため，個々の ボットへの対策が困難となる．あるボットに対策しようとするとそれぞれのノード管 理者あるいはネットワーク管理者に通知をしなければならない．多くの場合被害者が 得られるボットの情報だけではノードの管理者に連絡は取れないため，ネットワーク の管理者に通知されるが，対応に時間がかかる場合が多い．更に，ノード管理者ある いはネットワーク管理者が通知に対応しない場合も考えられる．

2.5.3

規模性

規模性とは，ボットネットを構成するボット数の大きさを示す．ボットネットを構成 するボットの規模は数百台から数千台のものが多い [10]．過去に検出された最大規模の ボットネットは 50 万以上のノードから構成されている [3]．2006 年度の調査ではイン ターネット全体におけるボットの感染率は 5%とも 10%以上ともいわれており [11]．平 成 17 年末における日本でのインターネット利用者は 8529 万人 [12] の環境下でボット の感染率が 5%と仮定すると日本だけで約 400 万以上ものインターネット利用者がボッ トに感染していると推測される． 一度，マルウェアに感染したノードは，ネットワークから切り離し，アンチウィル スソフトなどによる駆除，もしくはシステムの再インストールをしなければならない． インターネット上の全てのボットからマルウェアを駆除するのはその規模から困難で ある．

2.5.4

隠蔽性

隠蔽性とはボットが対策を施されないように自らがマルウェアに感染していること を感染ノードのネットワーク管理者に知られないようにしている状態を示す．近年の ボットはますます隠蔽性を高める傾向にあり，この様子は攻撃時と感染後の活動から 見て取れる． まず，攻撃においては受動的な攻撃の移行が主な傾向として挙げられる．従来の攻 撃は Blaster[13] や Code Red[14] に代表される能動的な攻撃であり，各ネットワーク の管理者は外部からの攻撃を観測して攻撃元の情報を得られた．しかし，2007 年より

10

2.5. ボットネット対策の困難さ

第 2. ボットネットの脅威  

Web を介した攻撃が増加し，既存の手法では攻撃元の特定が困難になってきた．また， 攻撃により送り込まれるボットに高度な対検知技術が用いられている．現在，ボット の隠蔽化に用いられている主な 3 点の手法について述べる． • 多重パッカーを利用した隠蔽化 パッカーは実行可能なファイルを圧縮するソフトウェアである．パッカーはイン ターネットの帯域が大きなファイルの転送に十分な帯域を持っていない時代に実 行ファイルのファイルサイズを縮小する目的で使われていた．また，自分が作成 したコードに対する第三者からのソフトウェアの逆アセンブルを困難にするため の実行ファイルの暗号化にも用いられていた．
マルウェアの作成者はパッカーを既存研究の検知を回避する目的で用いる．まず， パッカーで圧縮した実行形式ファイルは，バイナリファイルの内容が元のファイ ルと異なるため，既知の攻撃の特定のファイル内容を用いている検知手法などを 回避できる．近年では，パッカーを解読することでパッカーを用いた検知を試み る手法が存在するが，パッカーで圧縮されたファイルをさらにパッカーで圧縮す る検知の回避手法が存在する．回避手法は複数回パッカーを解読すれば元のファ イルを得られるが，解読する最大数をあらかじめ決めなければならない．もしも 攻撃者が無限回パッカーを実行しても，さらにパッカーに復元されるソフトウェ アを送り込むと，検知手法は常にパッカーの解読に資源を奪われてしまうからで ある．

• 管理サーバへのアクセス手法の変化 2006 年当時，管理サーバへの接続はボットから管理サーバに接続し，特に障害 などが発生しない限り接続を継続する事例がほとんどであった．しかし，近年で はボットネット管理者からボットに命令を伝達する際に，ボットが定期的にイン ターネット上の管理サーバに命令を取得しにいく事例が多く見受けられる．特に 管理サーバへのアクセスに HTTP を利用する事例が多く，正常なトラフィ ックと 区別が難しい．継続したトラフィ ックに比べて特徴が少なく，ネットワーク管理 者による検知を難しくしている． • 受動的な攻撃への遷移 受動的な攻撃への遷移とは観測されている攻撃の手法が能動感染型の攻撃から受 動感染型の攻撃に移っている事象を示す．能動感染型の攻撃では感染したノード が自ら他のインターネットノードに攻撃を試行するため，ネットワーク管理者や セキュリティベンダに対して自らの存在を露呈してしまう．そのため，対策をと られやすいが，受動感染型の攻撃ではノードからの接続を待ち受けるため，能動 感染型に比べて自らの存在を露呈しにくい．

11

2.6. ボット対策の要求

第 2. ボットネットの脅威  

2.6

ボット対策の要求

本章ではボットネットとボットの機能について述べた後，対策の困難さについて述 べた．ボットネットはボットネット管理者によって管理された世界中に分散する１つの オーバレイネットワークである．ボットネット管理者はボットに対して任意のタイミ ングで任意のコマンドを実行可能であり，ボットの本来の管理者や，インターネット システムにとって大きな脅威となりうる．さらに，ボットネットには４つの点から対 策が困難である．そのため，ボットネットの対策には次の２点が必要である． ネットワークベースの検知 ノードベースの検知はボット対策を取らない意識の低い利用者に無力である．また、 ボットネットベースの検知は近年、攻撃者が対策を練っている．管理できる範囲内に おいてネットワーク内のボット感染のインシデントを即座に知るのが、ボット対策に は望ましい． 亜種への対応 隠蔽化が進み多くの亜種が発生している現在において，亜種への対策は難しい．しか し，ボットの亜種の発生はボットネット対策を考える上で最も重要な課題であり，如 何に亜種を発見するかを考えなければならない．

12

第 3 章 ボットネットに対する既存の対 策技術
第 2章において，ボットネットは高度な技術が投入されたオーバレイネットワークで あり，隠蔽性の高さや分散性から対策が困難であることについて述べた．マルウェア の感染や攻撃者の活動を検知あるいは抑制する既存の研究が存在する．本章では，既 存のボットネット対策を対象と利用する情報によって 4 つに分類する．

3.1

サービスを対象とした対策

サービスを対象とする手法は，受動的な攻撃の感染源となる Web やメールのサービ ス上で何らかのボット対策を施す手法である．これらの対策はサービスの利用者やネッ トワークに依存せずサービスを利用する利用者全員に利益がある．サービスによる感 染の予防は，Web サイトへのアクセスを解析し，ボット感染の危険が予想されるサイ トへのアクセスを未然に防ぐ方法である．本手法はセキュリティに関する知識を持た ないインターネット利用者に対しても有効である． メールサービスによる感染防止対策は，メール送信サーバあるいはメール受信サーバ において配信するメッセージを検査するシステムである．広く使われているメールサー ビスにおける対策手法として，ClamAV[15] や IronPort[16] が挙げられる．前者は無償 で提供されているアンチウィルスソフトウェアで，Postﬁx[17] や Sendmail[18] といっ た UNIX システム上でよく利用されているメール配送システム (Mail Transfer Agent) で容易に利用することが出来る．このソフトウェアはシグネチャベースの検知が可能 である．後者は迷惑メール防止機能も有した統合型のメールサービスアプライアンス である．流行しているメールウィルスのシグネチャを高速に伝搬する機能や，メール が中継していたドメイン名や IP アドレスを独自のレピュテーション評価機構を用いて， 疑わしいメールを検知する．これにより，この手法によってあるネットワークにおけ るメールによるマルウェア感染の機会を低減できる． Web 検索サービスの１つである google[19] では，検索結果にボット感染の可能性を持 つ可能性のページを表示させない技術を導入している．google では，GhostBrowser[20] と呼ばれる技術が導入されている．この技術は，利用者が Web コンテンツにアクセス した際に，動的に利用者の意しないファイルがダウンロードされる Web コンテンツ を悪意の持つ Web コンテンツと定義する．google はサービス利用者に検索結果を返す 際に Web ページにマルウェア感染の可能性があるページについて警告を発する．これ

13

3.2. インターネットにおける対策

第 3. ボットネットに対する既存の対策技術  

により，google を利用するインターネット利用者がマルウェアに感染する機会を低減 できる．

3.2

インターネットにおける対策

インターネットを対象とする手法とは，ボットネットが管理サーバに集中管理される 仕組みを利用してボットネット自身の動作の抑制を試みる手法である．管理サーバを 停止すれば，該当ボットネットに所属するボットの活動を停止できる．そのため，ボッ トの規模性と分散性に対して高い効果が期待できる．

3.2.1

DNS による検知

DNS による検知は，多くのボットが管理サーバとの接続にドメイン名を利用してい る特性を利用したボット検知方法である．そして，攻撃者の多くは動的な DNS のアッ プデートの仕組みを用いたダイナミック DNS と呼ばれるシステムを用いて，冗長化を り，対策を困難にしている． そこで，ボットネットの特性を利用した DNS トラフィ ックの監視により，ボットの 検知を試みる検知手法が研究されている．大学や教育・研究機関へのネットワークプ ロバイダである SURFnet[21] は，DNS 通信を調査しマルウェアに感染したノードの検 出を試みている [22]．この調査では，以下のような DNS の通信が観測されるノードは マルウェアに感染している傾向が強いと述べられている． • マルウェアに利用されているドメイン名解決 • 頻繁に名前解決されるドメイン名解決 • 提供されているリゾルバ以外でのドメイン名解決 • 一般的に用いられないレコードでのドメイン名解決
この報告では，ネットワーク内部の該当ドメイン名に対するノードを摘発したり，ダ イナミック DNS の組織に該当レコードの削除を要請できると述べられている．DNS を 用いた検知は特定の実装に依存しない検知手法である．しかし，本手法は研究の段階 であり，実用化に至っていない．

3.2.2

管理サーバの発見と監視

本手法は，管理サーバを発見し，その通信を監視することで，ボットネットを構成 するボットに関する情報を収集をする．たとえば，IRC プロトコル [23] を管理に使用 したボットネットにおいては，ボットの通信から管理サーバの制御に使われるチャン

14

3.3. ネットワークベースの対策

第 3. ボットネットに対する既存の対策技術  

ネルを特定・接続することで，同じチャンネルに接続しているノードの情報を得られ る．ボットネットの管理に用いられているチャンネルに接続しているノードはボット であるため，該当ノードの管理ネットワークに通達しボットへの対応を依頼できる．

3.3

ネットワークベースの対策

ネットワークベースの対策手法は，ネットワーク内のノードのボットの活動や，ネッ トワーク外部からの感染攻撃を検知する手法である．

3.3.1

ミスユース型 NIDS

攻撃やスキャン活動の検知，あるいは遮断を目的とした管理ネットワークに接続さ れるシステムは，セキュリティデバイスと呼ばれる．NIDS(Network-based Intrusion Detection System) は，特に内部ネットワークにおけるネットワークトラフィ ックを監 視するセキュリティデバイスである． ミスユース型 NIDS は NIDS でも特に悪意のあるトラフィ ックに対して，シグネチャ と呼ばれる特徴データを予め用意しておき，トラフィ ックがそれらに一致するかを比較 するセキュリティデバイスである．シグネチャを用いるミスユース型は，ネットワー ク利用者が適切にシグネチャを調整することで，正常なパケットの誤検知なしに既存 の攻撃を検知できる．このため，特定のシグネチャが一致する活動に関して有効に利 用できる． ただし，シグネチャの登録されていない攻撃は検知できない．そのため，既存のシグ ネチャ型 IDS では未知の攻撃の検知が困難である．未知の攻撃に対して，honeycomb[24] や EarlyBird[25][26] といった研究をはじめ，シグネチャ型 IDS のためのシグネチャを 動的に生成する機構の研究 [27] が活発である．これらの手法を用いて，従来のシグネ チャ型 IDS では困難であった未知の攻撃検知が可能になり，ボット検知への応用にも 利用できる可能性がある．しかし依然としてシグネチャを用いるという性質は変わら ないため，亜種の十分な検知は難しい． ミスユース型 NIDS の実装としては snort[28] が広く使われている．ミスユース型 NIDS で用いられているシグネチャの例を 3.1に示す．例に示したシグネチャはボッ トがノードに感染した通信を検知するためのシグネチャであり，データのサイズと特 定のバイナリ列が判定条件として設定されている．シグネチャを用いるミスユース型 の検知手法は，シグネチャが登録されている活動に対しては有効であり，適切に調整 されたシグネチャを用いることで正常なパケットの誤検知なしに既存の攻撃の検知を 目的とする．このため，既知のマルウェアの感染や，定義されたシグネチャと同じ特 徴をもつ活動に関しては有効に利用できる．

15

3.4. ノードベースの対策

第 3. ボットネットに対する既存の対策技術  





alert tcp $EXTERNAL NET any -> $HOME NET any (msg: “BLEEDING-EDGE VIRUS Agobot/Phatbot Infection Successful”; ﬂow: established; dsize: 40; content:”221Goodbye, have a good infection |3a 29 2e 0d 0a|”; reference: url,www.lurhq.com/phatbot.html; classtype: trojan-activity; sid: 2000014; rev:2; )
 

3.1: snort 用に書かれたボット感染を検知するシグネチャの実例

3.4

ノードベースの対策

ノードにおけるボットへの対策手法では，各ノード上でソフトウェアの実行やネッ トワークの通信を監視し，ボットへの感染を予防あるいは検知する．ノード上におけ る対応では，メモリやファイルシステムに対する不正なアクセス制御や，マルウェア によく含まれるシステムコールの特徴など，感染あるいは感染後の詳細なボットの特 徴を用いた検知が可能である． 現在，多くのセキュリティベンダから一般的なインターネット利用者に対してセキュ リティ対策を施すように喚起が促されている．ノードにおけるセキュリティ対策ソフ トウェアは一般にアンチウィルスソフトと呼ばれる．アンチウィルスソフトの例とし て，symantec 社 [29] はから販売されているアンチウィルスソフト製品である Norton AntiVirus 2009[30] が挙げられる．基本的なアンチウィルスソフトの機能はシグネチャ 型の検知である．ネットワークベースの対策においてもシグネチャ型の検知は用いら れるが，ノードベースの対策ではネットワークを介して感染するマルウェアだけでは なく，USB デバイスやフロッピーディスクを介して感染するマルウェアも検知の対象 とする．もう１つの基本的な機能として，ファイアウォール機能が挙げられる．近年の アンチウィルスソフトで用いられているファイアウォール機能は，あらかじめ許可され たプロセスからの通信や指定されたポート番号の外部からの通信のみを許可する．そ れ以外の通信については全て破棄する．また，近年のアンチウィルスソフトではヒュー リスティ ック・ビヘイビア型のマルウェア検知を実装している．ヒューリスティ ック・ ビヘイビア型の検知機能はシステム資源に対する異常なアクセスや，本来，頻繁に発 生しないディスク領域へのアクセスを利用してマルウェアらしい振る舞いを検知する． また，Norton AntiVirus 2009 においては特に AntiBot[31] と呼ばれるボットに特化し た対策機能が導入されている．symantec 社によると，AntiBot はシグネチャ更新を必 要としない検知機能であり，リアルタイムにボットの検出と駆除を可能とするノード におけるヒューリスティ ック・ビヘイビア型の検知手法である． 近年のノードベースの対策は，これまでに述べたように多くの視点と対策でマルウェ アの感染防止を試みる．しかし，ノードベースのおける検知は２つの点から十分なマ

16

3.4. ノードベースの対策

第 3. ボットネットに対する既存の対策技術  

ルウェア感染の防止ができない．まず１点は，攻撃コードやボットのプログラムを制 作する攻撃者らは，よく知られたアンチウィルスソフトを保持している．そして，自 らが作成したプログラムがアンチウィルスソフトで検知されないように工夫する． もう１点はユーザの意識である．アンチウィルスソフトは高機能かつ多角的にノー ドのセキュリティを保護するが，アンチウィルスソフトの動作をノードの管理者に停 止されると，一切の保護機能が無効となる．新しいソフトウェアの導入時などにおい て，導入するソフトウェアが正常に動作しない場合にはアンチウィルスソフトを停止 させるように推奨する事例もある． また，多くの場合，音声チャ ットシステムや画像配信システムを利用するためには， ファイアウォール機能を適切に設定する必要があるが，この設定には専門的な知識が 求められるため，システムの利用のためにアンチウィルスソフトを無効化する事例も ある．また，アンチウィルスソフトの無効化まで至らずとも，アンチウィルスソフト の不正動作を検知し，ユーザにその対応を求める実装が多く用いられている．しかし， 先に述べたように多くの一般利用者は専門的な知識を要していないため，特に意識を せずに通信を許可してしまうことが考えられる． 前者の問題については解決が難しいとされているが対策が研究されている．だが，後 者の問題については利用者のリテラシに関わる問題である．このため，ノードベース の検知によりボットの感染を低減させることは難しい．

17

第 4 章 通信データの収集
筆者らが運用しているボットに感染したノードが通信するトラフィ ックを調査するた めのボット通信の収集システムについて述べる．

4.1

ボット通信収集に求められる課題

現在，マルウェア対策手法の研究や実現のために能動的に感染するマルウェア検体 や Web 経由での感染のマルウェア検体を収集するための取り組みが行われている．よ り多くのボット検体とその活動通信を得るためには既存の機構に加えて２つの機能が 必要となる．

4.1.1

自動的な収集機能

2008 年 10 月度のサイバークリーンセンターの調査 [32] によると，既存の手法では 検知できないマルウェアの亜種は月に千件以上発生しているとされている．第 1章で述 べたようにボットネットを用いた経済モデルが確立されており，今後もマルウェアの 亜種が発生する件数は現在と同様あるいは増加すると考えられる．また，松木の調査 [33] で述べられているように，自らのプログラムを書き換えながら感染するポリモー フィ ック機能型のボットが発生している．このような状況から，通信データの収集対象 となるマルウェアは多種多様に発生すると予想される． さらに，多量のボットを実行するには多くの人件費がかかる．そのため，能動的な 攻撃を試みるボットに関しては収集したボットを随時実行し，受動的な攻撃を試みる ボットに関しては疑わしいコンテンツを随時取得できる必要がある．

4.1.2

外部への通信の制限

ボットに感染したノードが通信する内容を取得するためには実機あるいは実機に準 じた環境下でボットを活動させる必要がある．ボットを活動させることで，管理サー バとの通信や，活動に関する情報など，ボットの活動を知る上で重要な情報を得られ る．だが，第 2.4節で述べたとおり，活動を開始したボットは外部に対する感染活動や 他のインターネット利用者に対する迷惑メールの配送といった悪意を持つ活動を試行

18

4.2. ハニーポット: 能動感染型ボットの取得

第 4. 通信データの収集  

し，攻撃者の活動を幇助してしまう．そのため，収集環境から外部に対する悪意のあ る通信を抑制は抑制し，それ以外の通信は許可する必要がある．

4.2

ハニーポット: 能動感染型ボットの取得

マルウェアの採取には Nepenthes[34] を用いる．Nepenthes は主に Microsoft Windows に含まれている脆弱性をエミュレートし，攻撃と攻撃元の情報を記録するハニーポット である．Nepenthes は脆弱性のエミュレート機能だけではなく，脆弱性を利用した結果結 果ダウンロードされるマルウェアを取得する機能も有する．しかし，Nepenthes の出力 するログファイルには研究に際して不十分な項目がある．本研究では，元の Nepenthes に不足しているログの出力機能を付録 A の通り追加した． Nepenthes でエミュレートできるのは，ダウンローダの実行と，その結果転送され るマルウェアを保存する段階までである．転送されたソフトウェアの実行とその結果 生じる通信については別の環境で観測する必要がある．本研究では，自動化のために， x86 仮想マシンである VirtualBox 2.1[35] を利用した．実行プラットフォームとして， VirtualBox 上に４つの仮想マシンを作成し，それぞれに対して Microsoft Windows XP SP2 を導入した．各仮想マシンは Nepenthes で取得されたマルウェアを順次実行し，一 定時間が経過した後に再起動する．マルウェアを実行後に再起動するのは，マルウェ アの活動を発見するためである．

4.3

ボットクローラ: 受動感染型ボットの取得
o gTGn BBTHYTY ed E Th§HgITYbn ThBed H YI
 4.1: 受動感染型ボットの収集機構

19

 
4.4. フィルタ: 外部に対する悪意のある通信の遮断

第 4. 通信データの収集  

 4.1 に受動感染型ボットの収集機構の概要を示す． Web 感染型マルウェアを取得するにあたり最も配慮すべき点は，アクセスするとマ ルウェアに感染する Web ページの URL である．攻撃者はサイトを運用する Web サー バ管理者による対策や，セキュリティベンダによる Web レピュテーションなどの対策 に対して対策するため，常に新しいサイトを構築している．攻撃者は Web サーバのク ラック，あるいはボットを Web サーバとして設定し，DDNS と連携することで常に新 しい URL で運用されるサイトを構築する．第 2.4.3項で述べたように， 攻撃者は自ら の作成した URL にユーザを誘導するため，無差別に用意したサイトの URL を含む迷 惑メールを送信する．本研究では迷惑メールに含まれる URL として，2008 年 4 月から 2008 年 8 月に筆者のメールアドレスに到達した URL をリストとして用いた． 脆弱性を持ったコンテンツへのアクセスには第 4.2節で述べた能動感染型マルウェア の実行環境と同様に，VirtualBox 上と Microsoft Windows XP SP2 の環境を利用した． また，Web コンテンツへのアクセス後，20 分経過後再起動し，その後 20 分経過してか ら処理を終了する動作も同様である．

4.4

フィルタ: 外部に対する悪意のある通信の遮断

第 4.1.2節で述べたように，自動実行環境下で活動するボットの悪意ある通信は遮断 されるべきである．本研究では次の３つについて通信の遮断が必要と考える．

• 感染活動 感染活動は自動実行環境の中で最も留意しなければならない活動である．外部へ のマルウェアの感染活動を許可するとマルウェアの拡大を助長する結果となり自 動実行環境が加害者となる．現在，我々が把握している能動的な活動を試行する マルウェアは Microsoft Windows のよく知られた脆弱性を利用する．外部へのこ れらの通信を禁止する必要がある． • 迷惑メールの送信 近年のマルウェアの中には感染と同時に外部の SMTP サーバにアクセスし，迷 惑メールの送信を試みる事例が見受けられる．迷惑メールの一部はメールを介し た感染活動である可能性がある．また，迷惑メールが感染活動を目的としない場 合においても，他のインターネット利用者に対して迷惑行為を働くため，外部へ のメールの送信は禁止する必要がある． • DDoS 攻撃 マルウェアは感染に成功すると自動的に，あるいは攻撃者からの命令を受けて外 部への DDoS 攻撃を試行する事例が多く見受けられる．DDoS 攻撃は対象のネッ トワーク管理者によって容易に検知される活動であるため DDoS 攻撃を十する ボットは減少傾向にあるが，たびたび見受けられる活動である．DDoS 攻撃も他

20

4.4. フィルタ: 外部に対する悪意のある通信の遮断

第 4. 通信データの収集  

のネットワーク利用者に対して大きな迷惑行為となる活動であるため，これらの 通信についても制限をする必要がある． 感染活動と DDoS 攻撃については内部から外部に対する TCP ポート番号 137,138,139,445,1433,1434 への通信を禁止する． また， 迷惑メールの送信についてはメール送信に用いられる SMTP の TCP ポート番号 25 の外部への通信を禁止する．

21

第 5 章 通信のモデル化
本章ではボットに感染したノードにおける通信の類似性について述べる．また，効 果的なボット検知のためには通信の類似性を利用した通信のモデル化が有用であるこ とを示す．

5.1

亜種と通信の類似性

マルウェアの隠蔽化技術は近年になって急速に成長している．インターネットが広 く普及していない時代に流行したコンピュータウィルス (Cascade や Cookie Monster） やインターネット普及初期に流行したワーム (Happy99 や Blaster) といったマルウェ アに対しては，ミスユース型検知手法が有効であった．これらのマルウェアは毎回同 じ通信内容で他のノードに感染を試行し，自己複製を繰り返していたため，特定の情 報を用いたミスユース型検知手法が効果的であった．しかし，近年では攻撃時の通信 を難読化して感染するマルウェアや，ダウンローダで送り込むプログラムのバイナリ 列を毎回変化させるマルウェアが出現している．この様子を 5.1 に示す．中では， ３台のノードが存在し，Host1 が M alwareA に感染している状態である．Host1 が２ 台のノード Host2 と Host3 に感染を試みる際に用いる通信は異なる．中ではこの例 を Host1 から Host2 に対して CodeA の通信内容で感染を試みるが，他のノード Host3 に対しては CodeA の通信内容で感染を試みている．また，その攻撃が成功した際に Host2 と Host3 に送信されるマルウェアは，M alwareA と M alwareA であり，元の M alwareA とは異なる内容を持つプログラムである．具体的には第 2.5.4節で述べたよ うにパッカーの回数を変更して，異なるバイナリ列とする手法が挙げられる． 第 3章で述べたように，ミスユース型検知手法に代表されるボットの特定の情報を 用いた検知は困難である．現在，この問題を解決する手法として水谷らの研究 [36] や BotHunter[37] では，ボットの通信類似性に着目した検知手法を提案している．これら の研究においては，マルウェアの動作によって発生する通信を特にボットの動作と関 連づけて未知のボット亜種を検知する． 実際のボット感染の通信を例に挙げて，マルウェアにおけるボット通信の類似性に ついて述べる．2008 年 11 月に筆者らが運用するハニーポットにおいて，収集された２ 種類の検体を実行した際に観測された通信について解析した．２つの検体をボット A とボット B とし，それぞれの検体における通信の内容を表 5.1 と表 5.2 にそれぞれ示 す． 各行は通信に含まれるフローを示す．

22

5.1. 亜種と通信の類似性

第 5. 通信のモデル化  

 5.1: 攻撃パターンを変化させて感染する自己変形型マルウェアの例

表 5.1: 能動感染型ボット A における通信
番号 タイムスタンプ 通信先 通信方向 プロトコル

SrcPort 2035 − − 1033

a1 a2 a3 a4

0.000000 1.095493 51.532777 51.572196

218.x.x.x 218.x.x.x 192.168.0.254 72.x.x.x

incoming outgoing outgoing outgoing

T CP TFTP DN S T CP

番号は解説に利用するために筆者がつけた通信を識別するための名称である． タイムスタンプはそれぞれのボットの通信が最初に観測されてから，その通信が開 始されるまでの経過時間を秒で示す． 通信先はノードに対して通信先となるノードの IP アドレスである．本論文中では ノードの特定を防ぐため，通信先がグローバル IP アドレスである場合は第２オクテッ ト以降を x.x.x と伏せて表記した． 通信方向は通信が発生したノードの方向を示す．outgoing は，ネットワーク内ノー ドから発生した通信を示し，incoming は，インターネット上のノードから発生した通 信を示す． tcpdump プロトコルは通信のプロトコルを tcpdump[38] で得られたプロトコル名を示す．

23

©¢  ¥£ ¡

 ¥£ ¡ ©¢ 
DstPort 135 69 53 6667


5.1. 亜種と通信の類似性

第 5. 通信のモデル化  

表 5.2: 能動感染型ボット B における通信
番号 タイムスタンプ 通信先 通信方向 プロトコル



ではポート番号から通信の内容が特定出来る場合は，アプリケーションプロトコルの 名称が得られる．ポート番号からプロトコルが特定できない場合は，それまでに確実 に特定できる通信のプロトコル名が得られる． SrcPort と DstPort はそれぞれ通信が開始されたポート番号と通信先のポート番号 を示す． ボット A とボット B によって発生したトラフィ ックは一見すると DNS のパケットを 除き，全く異なった通信に見える．しかし，これらのトラフィ ックをボットの活動と照 らし合わせると，通信が発生した原因について類似性が見られる．まず，a1 は RP C の脆弱性を利用した攻撃であり，b1 は LSASS の脆弱性を利用した攻撃である．それ ぞれ利用している脆弱性は異なるが，ノードに対して不正なコードの実行を試みる動 作は共通している．次に，a2 は T F T P を用いたマルウェアの転送であり，b2 はポー ト番号を変更した F T P プロトコルを利用したマルウェアの転送であった．転送に利用 しているプロトコルは異なるが，共にマルウェアを転送するための通信である．a3 と b3 では DNS によって異なるノード名から IP アドレスを解決している．a4 は IRC の W ell − Known ポートを利用した管理接続であり，b4 もポート番号が変更されている が通信を解析すると IRC プロトコルを利用した通信であった．このようにボット A と ボット B のトラフィ ックはそれぞれ，攻撃 ⇒ 転送 ⇒ 管理というボットネットの動作 に従って発生している． このような共通性はマルウェアの開発過程によるものであると考えられる．マルウェ アの亜種は agobot や SDbot など 2000 年前半に開発されたソフトウェアに改良を加え て開発されてきたといわれている [7]．動作の目的に共通性が見られたとしても具体的 な動作が異れば，第 3章で示したように既存の対策では有効性が低い．固有のシグネ チャを利用するミスユース型 NIDS やアンチウィルスソフトは，マルウェア本体や通信 プロトコル，通信に利用するデータにわずかな変更があるだけで検知ができなくなっ てしまう．そのため，マルウェア開発者は頻繁に亜種を作成することで，既存の対策 を回避している．検知回避のために亜種を作成する場合は，大幅に機能を変更する必 要はない．従って，あらかじめオブジェクト化された機能を組み合わせたり，部分的 にデータを変更することで亜種を大量に生成していると考えられる．これらの状況か ら大部分のボットの攻撃手段や活動内容は類似していると仮説が立てられる．

24

5.2. 通信のモデル化を利用した検知

第 5. 通信のモデル化  

5.2

通信のモデル化を利用した検知

本研究はマルウェアの活動における類似性に着目し，マルウェアの活動によって発 生する通信をモデル化することによって，マルウェア感染の汎用的な検知を目指す．通 信のモデル化とは，マルウェア特有の通信を抽象化し、それらの状態遷移を定義する ことである．第 5.1節で示したようにマルウェアには通信方法や通信内容は異なるが， 共通した目的の動作がある．これを活動の目的毎に分類した集合を Pn とする．またマ ルウェアは連続して異なる通信を実行するため，マルウェアに感染したノードの通信 は状態遷移として捉えることができる．よって，共通した目的の動作の集合 Pn の遷移 によってモデル Mx を表すことができる．第 5.1節で示した２つのマルウェアの通信を 利用して具体的なモデルの例を示す． ボット A の例 ボット A が RP C の脆弱性を利用した攻撃の後，T F T P でマルウェアをダウンロード し，T CP ポート番号 6667 番を用いた IRC により攻撃者と通信した． ボット B の例 ボット B は，攻撃に LSASS の脆弱性を利用した攻撃の後，通常使われるポートとは 異なる F T P を用いてマルウェアをダウンロードし，T CP ポート番号を 3000 番に変更 した IRC 通信を行っていた． いずれのボットもボットネットの動作に伴う通信を発生させている．これらの動作 は 1) 攻撃，2) 転送，3) 管理サーバへの接続という目的として表すことができる．それ ぞれを P1 ，P2 ，P3 とすると，表 5.1，表 5.2の通信はともに Ma = P1 → P2 → P3 とい うモデルで表せる． Pn で表されるボットに関連した動作 (Sn ) は，複数種類の通信の特徴を含む．例えば P3 とした管理サーバへの接続では特定の IRC コマンドを含む通信だけではなく，長期 の TCP セッションである点や ASCII 文字のみで構成されている TCP セッションも管 理サーバとの通信を発見するための手がかりとなる．本手法ではボットの通信を発見 する場合，特定の文字列や特定の通信方法だけではなく，多様な要素を判断条件とし て利用する．マルウェア開発のオブジェクト化が進むことで，既知のマルウェアの亜 種に感染したボットの通信は類似した通信内容の組み合わせで表現できると考えられ る．そのため、現在のボット通信を適切にモデル化することで、将来発生しうる未知 のマルウェアの亜種の通信を検知できると期待される．

5.3

マルウェアの通信モデル化の例

実際のモデルの例を 5.2に示す．マルウェアの特徴的な共通性を用いると，通信の 暗号化や，一部のバイナリ列を書き換えるといった攻撃者による活動の隠蔽化に対して 有効な検知ができる．では能動感染型攻撃 (P1 )，受動感染型攻撃 (P1 )，転送 (P2 )，管 理ネットワークへの接続 (P3 ) がそれぞれ示されており，ここから Ma = P1 → P2 → P3 と Mb = P1 → P2 → P3 の 2 種類のモデルを示している．Ma は能動感染型の攻撃に

25

5.3. マルウェアの通信モデル化の例

第 5. 通信のモデル化  

 5.2: モデルの例

よって感染したボット，Mb は受動感染型の攻撃によって感染したボットの動作モデル である．Pn における各動作は Sn として表されている．例えば S1 は LSASS の脆弱性 を利用した攻撃，S2 は DCE/RPC の脆弱性を利用した攻撃というように具体的な通信 内容は異なるが，能動感染型の攻撃として P1 に属している．Tn は各ボットの通信を表 している．T1 は S1 → S4 → S6 → S7 という通信を発生させており，これは Ma の通信 モデルに該当する．T2 の能動感染型の攻撃は S2 であり T1 とは異なる通信をしている が，これも Ma の通信モデルに該当している．このように，個別の通信の詳細が異なっ たとしても，モデルにそった通信をしていればボットの活動と認識することができる． 一方，T3 は受動感染型の攻撃によってマルウェアに感染しているが，T1 ,T2 とは異なる Mb のモデルに該当している． 本手法を実現するにあたり，ボットの特徴となる通信 Sn のデータ数が重要な要素と なる．一般的な通信とは異なるボットの特徴を抽出するために，本研究では第 4章で示 したボット通信データの収集機構を利用している．従来の手法では検知対象となるマ ルウェアの種類毎にシグネチャを作成する必要があったため，全てのマルウェアの情 報を把握する必要があった．しかし，本手法では部分的なマルウェアの情報だけであっ ても，各動作の特徴を抽出しモデルとしてまとめている．これによって，組合せによっ て作成されたマルウェアや部分的に動作を変更したマルウェアであれば，シグネチャ をもたないマルウェアの亜種でも検知できる可能性が高いと言える．

26


第 6 章 評価
本章では通信データの収集によって作成したマルウェアの通信モデルを用いて，効 果的にボットの検知ができることを示す．

6.1

評価環境

評価対象とする通信情報は第 4章で述べた環境により収集する．表 6.1に今回利用し た能動感染型マルウェアの収集環境について示す．まず，今回ハニーポットを設置した 表 6.1: 評価に利用した能動感染型マルウェアの収集環境
ネットワークの種別 ネットワークの規模 収集期間 モデル化に利用した収集期間 学術ネットワーク

ClassC ネットワーク 12 個分相当 2008/10/30 から 2008/12/29 2008/10/30 から 2008/11/20

ネットワークは学術ネットワークに割り当てられているアドレス空間を用いた．また， このネットワークは ClassC ネットワークを 12 個分のアドレスを持つ．今回の評価で 用いたハニーポットから得られた能動感染型マルウェアの情報は，2008 年 10 月 30 日 から 2008 年 12 月 29 日に得られた通信情報である．モデル化にあたっては，期間中の 2008 年 11 月 20 日までの情報を利用した．評価にあたり，2008 年 10 月 30 日から 2008 年 11 月 20 日までの通信データをモデル化に用いたこの通信情報を T h とする．T h に は期間中に検知された 80 件の異なるバイナリ列をもつマルウェアの通信情報が含まれ る．また，2008 年 11 月 21 日から 2008 年 12 月 29 日までの通信データの通信情報を T u とする．T u は T h と同様の環境で収集されたマルウェアの通信情報であるが，モデル 化に用いた通信の後に収集された通信情報であるため，未知のマルウェアに関する通 信情報を含むことが考えられる．T u には期間中に検知された 42 件の何らかの通信が 発生したマルウェアの通信情報が含まれる． また，ウェブクローラを用いた受動感染型マルウェアの通信情報については 2008 年 8 月に筆者のメールボックスにスパムとして判定されたメールから有効な Web の URL を利用した．各 URL に対して 2008 年 8 月にアクセスし，ウェブクローラから得られ

27

6.2. 評価対象

第 6. 評価  

た情報からマルウェアの動作が確認できた通信情報を利用した．これらの通信情報 T w には期間中に実行した 17 件の Web サイトとの通信が含まれる．

6.2

評価対象
PFHIGBEFCDAB PFHIGBEFCDAB U S Q PFHIGBEFCDAB VTRFIBFDB@@@@ P H G E C A

 6.1 に今回の評価で用いたモデルを遷移の形で示す．

 6.1: 評価で用いたモデル

6.2.1

モデルの解説

 6.1 に示したにおいてそれぞれのモデルが示す状態の遷移と意味を表 6.2 に示 す．本モデルにおいて，能動感染型攻撃，受動感染型攻撃，転送，管理，活動，通信 の失敗についての段階をそれぞれ A, P, T, C, R, F で示した．今回のモデルでは各段階 の状態は 1 つから 4 つで表される．

6.2.2

モデルに含まれる状態の解説

表 6.2 に各段階における状態の遷移条件を示す． 攻撃の通信の特徴は能動感染型 (Active-Attack) の感染活動と受動感染型 (PassiveAttack) の感染活動のそれぞれを A1 と P 1 で示す．A1 は能動感染型の Windows のよ く知られた脆弱性を利用した攻撃を示す．今回の評価において本状態は期間中に観測 されたすべての能動感染型マルウェアの動作を示していることを確認した．P 1 は受動 感染型の通信を示す．


6.2. 評価対象

第 6. 評価  

表 6.2: 評価モデルの解説
モデル 段階の遷移 解説 能動的な感染により管理サーバとの接続と活動を 行った通信モデル

M1 M2 M3 M4 M5 M6 M7

A→T →C→R A→T →C A→T →R A→T →F P →T →C→R P →T →C P →T

能動的な感染により管理サーバと接続を行ったが 活動が観測されなかった通信モデル 能動的な感染にマルウェアを転送した後，管理 サーバとの接続が観測されず活動した通信モデル 能動的な感染にマルウェアを転送したが管理サー バとの接続に失敗した通信モデル 受動的な感染により管理サーバとの接続と活動を 行った通信モデル 受動的な感染により管理サーバと接続を行ったが 活動が観測されなかった通信モデル 受動的的な感染にマルウェアを転送したが管理 サーバとの通信が発生しなかった通信モデル

転送 (Transfer) の通信の特徴は T 1 と T 2 で示される．T 1 は，転送サーバから実行形 式のファイルが転送される通信を示す．これには，Windows で実行可能なプログラム 冒頭に含まれる特徴あるバイナリ列を用いる．T 2 は，転送サーバからファイルの転送 が発生している通信を示す．2006 年の筆者の調査 [39] では転送サーバからマルウェア を転送する際には FTP[40] や TFTP[41] が多く用いられていると述べられているため， この特徴を利用する．T 3 は，転送サーバから HTTP を用いて gzip で圧縮された形式 のファイルが転送される通信を示す． 管理 (Communication) の通信の特徴は C1 から C4 で示される．C1 は，古典的な IRC プロトコルあるいは IRC プロトコルに基づいた通信方法を用いる管理セッションの特 徴を示す．C2 は，ネットワーク内部のボットから，管理サーバへ定期的に命令を取得す る管理セッションの特徴を示す．C3 は，管理サーバとの通信にアスキー文字列を用い る管理セッションの特徴を示す．2005 年の Honeynet Project の報告 [6] によれば，ボッ トが管理サーバと通信する管理プロトコルとして，IRC プロトコルあるいは IRC プロ トコルを元とするプロトコルが主であった．これらの通信ではいずれもアスキー文字 の含有率が高い．C4 は，継続的な管理サーバとの通信を示す． 転送や管理を試行したボットがそれらの活動に失敗 (Fail) した通信は F 1 と F 2 で示 される．F 1 は，管理サーバのネットワーク管理者などによって対策されたボットの管 理活動を示す．F 2 は，ボットがノード管理者やネットワーク管理者によって対策をさ れるなど，接続性が失われた管理サーバへの接続試行を示す． ボットとなったノードが命令に従って行動を実行 (Run) した通信は R1 と R2 で示さ

29

6.2. 評価対象

第 6. 評価  

表 6.3: 評価で用いた状態の解説
状態 遷移条件 解説 ポ ー ト 番 号 よく知られた攻撃ポートに対してのアクセス

A1

TCP

137,138,139,445,1433
と 1434 の外部からの通信

P1 T1 T2 T3 C1 C2

TCP ポート番号 80 の内部
からの通信

内部ノードからの Web アクセス

exe ファイルの転送 FTP あるいは TFTP の通
信

マルウェア本体の転送通信 既存のプロトコルを用いたマルウェア本体の転送 通信

gzip 符号化された HTTP
通信

gzip で圧縮されたマルウェア本体の転送通信
古典的な IRC ベースの管理通信

TCP ポート番号 6667 の内
部からの通信 単一のノードに対して同一 ポートの通信を３分以内に 繰り返し行っている

管理サーバへの定期的なアクセス

C3

データグラムに含まれる

ASCII 文字列を利用した管理通信

ASCII 文字の割合が 90%以
上である

C4 F1 F2

１台のノードに対して 300 秒以上継続している通信

常時管理サーバからの命令を受け付ける管理通信

30 秒以内に 5 回以上の DNS
要求を失敗している １台の同じノードに対して

管理サーバと接続しようとして失敗したボットの 活動 管理サーバに対して接続を試行したが成功しな かったボットの活動

1 分以内に 10 件以上の SYN
要求を送信

R1

10 秒以内に異なるノードに
対して SMTP 接続を試行し た

スパムメールの配信

R2

１秒間に異なるノードに対 して 10 件以上の SYN 要求 を送信

他のノードに対するスキャンや攻撃活動の通信

れる．R1 は，ネットワーク内部のボットからインターネット上に迷惑メール配送の活 動セッション，あるいは SMTP を用いて管理サーバに接続し命令を取得する管理セッ

30

6.3. 評価結果

第 6. 評価  

ションの特徴を示す．本モデルの作成に用いたトラフィ ックデータには，外部への通信 制限により SMTP の通信を許可していない．そのため，SMTP 通信を開始しようとい う通信は取得できるものの，該当セッション内に含まれる情報は取得できないため，具 体的な活動内容の特定はできなかった．R2 は，外部に対してスキャンや攻撃活動を行 う活動を示す．

6.3

評価結果

80 件の能動感染型マルウェアの通信情報を含むトラフィ ック T h，42 件の能動感染型 マルウェアの通信情報を含むトラフィ ック T u と 17 件の受動感染型マルウェアの通信 情報を含むトラフィ ック T w が，表 6.2 で示したそれぞれのモデルに対してどれだけ一 致したかについて表 6.4 に示す．また，それぞれのトラフィ ックが，表 6.3 で示したそ れぞれの状態に対してどれだけ一致したかについて表 6.5 に示す．各状態についてそ れぞれの項目は “一致したトラフィ ックの件数/トラフィ ックの総件数” である．また， ックの百分率 (小数点第３ 表 6.5 の括弧内の数値は，総件数に対する一致したトラフィ 位を四捨五入) を示した．また，各モデルは，n < m である Mn と Mm に一致した場 合，Mn として数え，Mm としては数えない．
表 6.4: 各モデルに一致したイベント数
状態名

Th 28 40 12 0 0 80

Tu 13 1 11 15 2 42

Tw 4 12 1 0 17

M1(A → T → C → R) M2(A → T → C) M3(A → T → F ) Ma(A → T → R) M4(P → T → C → R) M5(P → T → C) M6(P → T )
該当なし 合計

6.3.1

各モデルに一致したイベント数

T h について着目すると，全ての通信において，マルウェアの転送に成功している． マルウェアの転送後，12 件については，管理サーバへの接続に失敗した．残る 68 件は 管理サーバへの疎通に成功し，そのうち 28 件はボットとしての活動を試行した．全体 の半数に当たる 40 件については管理サーバに接続したが活動の通信がみられなかった． 31

6.3. 評価結果

第 6. 評価  

表 6.5: 各状態に一致したイベント数
状態名

T u について着目すると，42 件の通信情報のうち 40 件が定義したモデルに当てはまっ た．マルウェアの転送後，11 件については，管理サーバへの接続に失敗した．残りの 14 件は管理サーバへの疎通に成功し，そのうち 13 件はボットとしての活動を試行し， 他の１件については管理サーバに接続したが活動の通信がみられなかった．また，転 送に成功した後，管理サーバとの接続を試行する通信が検知されず，外部への攻撃を 試行するモデルが 15 件存在した． T w について着目すると，全ての通信において，マルウェアの転送に成功している． マルウェアの転送後 4 件のマルウェアは，管理サーバとの通信に成功した後に，迷惑 メールの送信あるいはインターネット上のノードに対して DDoS 攻撃を試行した．転 送に成功したうち別の 12 件は管理サーバとの通信が観測されたが，特に活動を行わな かった．また，残る 1 件について，実行形式ファイルの転送は確認できたが，管理サー バへの接続の試行や，マルウェアらしいの試行は発見されなかった． T h と T w のうちでモデルに該当しない通信はなかった．これにより，全通信はいず れかのモデルを満たした．T u に含まれる 42 件の通信情報のうち 2 件が定義したモデ ルに当てはまらなかった．この２件については，第 6.4節で詳しく述べる．

6.3.2

各状態に一致したイベント数

攻撃の状態に着目すると，A1 と P 1 はそれぞれの感染手法に拠る状態と定義したた め，それぞれの通信は各感染手法の状態を満たした．

32

6.4. 既存研究との比較

第 6. 評価  

転送の状態に着目すると，T h においては暗号化や圧縮された転送が存在しなかった ため，すべての通信が T 1 を満たした．また，一部の検体では FTP や TFTP と特定出 来る通信 T 2 が観測された．T u については T h と同様に暗号化や圧縮された転送が存 在しなかったため，すべての通信が T 1 を満たし，一部の通信が T 2 として観測された． T w においては約半数の通信がマルウェアを gzip 圧縮された形式で転送したため，通 信の内容による実行形式の検知 T 1 を満たしていない．残りの転送は gzip を用いた T 3 の条件を満たしており，T 2 の通信は確認できなかった．T w のうち 1 件は JavaScript により難読化された HTTP 通信 P 1 を満たし，実行形式のファイル転送が観測された が，その後，管理と思われる通信は一切行われなかった． 管理の状態に着目すると，T h において一般的な IRC 通信の TCP ポート番号 6667 に よる通信 C1 は 2 件検出され，約半数の通信において C3 と C4 を満たした．また 12 件 の C2 が観測された．T u はおおよそ T h と同様の傾向が見られた．T w においては多く の通信が C2 と C3 を満たした．継続的な通信である C4 は 1 件の通信が満たした． 活動について着目すると，全てのトラフィ ックにおいて R1 と R2 を満たす通信がい くつか観測された．T u において約８割の大量の SYN 送信を伴う通信を行っている． 活動に失敗した通信に着目すると，T h については 10 件の DNS 要求の失敗 F 1 が観 測された．この 10 件のうち 9 件は同一のドメイン名に対する名前解決要求であった． また，F 2 については T h で 2 件観測された．T u はおおよそ T h と同様の傾向が見られ， T w では活動に失敗した通信は発見されなかった．

6.4

既存研究との比較

本研究では，モデルの作成に利用した後にハニーポットで得られた情報 T u を用い て，提案手法が未知のマルウェアの検知に有効であるかを比較する．比較対象として， 第 3.4節で述べた symantec 社の Norton AntiVirus2009(NAV) を用いた．NAV は現在 最も広く一般的なインターネット利用者に利用されているアンチウィルスソフトであ る．また，NAV はボットに特化したアンチボットの機能を持つ．アンチボットの機能 は，シグネチャの頻繁な更新を必要とせずに，ボットの感染や動作を検知できる．本 論文における提案手法はネットワークベースの検知手法であるのに対し，NAV はノー ドベースの検知である．NAV はネットワークの通信情報に加えて，システム資源の監 視など多くの情報を得られる．広く用いられているアンチウィルスソフトである点と ボットに特化した検知手法である点から，NAV と同等あるいはそれ以上の検知を実現 できれば，未知のマルウェアに対して十分な検知が可能であるといえる． NAV により，マルウェアが検知できるかの評価は NAV をインストールしたマルウェ アの実行環境を構築し実現した．この環境は，マルウェアの実行環境で利用した仮想 マシンを元に，NAV をインストールした．それぞれのマルウェアについて，この仮想 マシン上で実行を試行し，NAV によってマルウェア感染の検知に成功したというログ が出力された場合，NAV で検知が成功したと判断する． この評価結果を表 6.6に示す．全体の 42 件のうち約 7 割にあたる 31 件が両方の手法

33

6.5. 考察

第 6. 評価  

表 6.6: 未知のマルウェアを含む通信情報 (Tu) に対する検知比較結果
本手法で検知成功 本手法で検知失敗 合計

NAV で検知成功 NAV で検知失敗
合計

31 9 40

2 0 2

33 9 42

で検知できた．また，本手法でボットの動作を検知できたが，NAV で検知できなかっ た通信が 9 件存在した．これらのマルウェアは NAV がインストールされた環境下で実 行を試行しても，NAV に何ら検知イベントとして発見されないマルウェア (あるいは， 何らかの活動が見受けられると警告を発するが悪意のあるマルウェアと断定されない マルウェア) である． 今回のモデルを用いた評価では，提案手法を用いた検知が失敗し，NAV で検知が成 功した通信が 2 件存在した．それぞれの通信の特徴を分析した結果を次に示す．

1. W32.Sasser.D 本手法で検知が失敗した１つめのマルウェアは W32.Sasser の亜種である．このマルウェ アの通信には，転送終了後に，多量の ICMP の ECHO Request メッセージをインター ネット上に送信するスキャン活動が含まれている．今回，モデル化に利用した通信情 報には多量の ICMP を試行するマルウェアが含まれておらず，攻撃活動の検知に失敗 した． 2. W32.Gobot.A 本手法で検知が失敗したもう１つのマルウェアは W32.Gobot の亜種であった．このマ ルウェアは，転送終了後に，管理サーバとの接続試行とみられる 4 つの DNS パケット を送信し，その解決に失敗した．今回のモデルの定義では F 2(複数の DNS の解決に失 敗) に当てはまるべき活動であるが，“30 秒以内に 5 回以上の DNS 要求を失敗” という 条件に当てはまらず，検知に失敗した．
また，T u 内に，本手法と NAV 両方で検知できなかったマルウェアは含まれていな かった．

6.5

考察

本結果では C4 の長期のセッションに着目した通信だけではなく，C2 のように類似 した通信を繰り返し続けるセッションも観測された．これは，短期のセッションを定期 的に通信する管理手法が能動感染型のマルウェアでも頻繁に用いられている．2007 年 頃から増加している Web を介した受動感染型のマルウェアの大多数の管理通信は，こ のような定期的かつ短期的な通信を主流としている．管理通信が HTTP を多く用いる 傾向は，ボットがノードの管理者が自ら HTTP の通信を要求しているように振る舞い，

34

6.5. 考察

第 6. 評価  

活動の隠蔽化を目的とした活動であると考えられる．しかし，本手法ではこれらの差 異が検知結果に影響しないことを評価によって示した． 今回評価に用いた通信データのうち，通信のモデル化に利用した通信情報である 97 件のマルウェアの活動が通信モデルから検知出来ることを示した．また，未知のマル ウェアを含む通信情報についても 42 件中 40 件の検知のマルウェアを検知でき，検知 できなかったマルウェアが 2 件存在した．これらを検知するためには，1 件については 多量の ICMP 送信に関する攻撃の特徴を定義する，もう 1 件についてはより多くのマ ルウェア通信を解析し条件となる数値を適切に調整するなど，モデル改善の必要性が 見られる．しかし，モデルを改善することで，これらのマルウエア通信の検知は可能 である． 本章では提案手法が既存のボット通信を十分にモデル化できていることを示した．ま た，既存のボット通信を利用したモデルは未知のボット通信を十分に検知でき，既存 研究において困難とされていた未知のボット亜種の検知に有効であると示した．

35

第 7 章 結論
本章では本研究をまとめ，本研究分野が取り組むべき今後の課題について示す．

7.1

総括

既存のセキュリティ対策手法の多くはシグネチャを必要とする．シグネチャを必要 とする検知手法では常に亜種の出現するマルウェアの対策は困難である．また，ボッ トネットに着目した調査や DNS を用いた対策手法は，ボットの規模性や管理サーバの 冗長化といった問題を抱えている．これらの既存の手法は，世界中に拡散して多くの 亜種の出現するボットネットに対して十分な成果が期待できない． この問題に対して本研究では，ボット通信をモデル化し，既知のボットを元とした ボット亜種の効率的な検知を実現した．また，本研究を用いることで，ネットワーク 管理者はボットネットの専門知識を持たなくとも，確実に検知したネットワーク内の ボットを検知できる．これにより，既存の手法では難しかったボットへの対応が可能 となり，インターネット上のボットによる脅威の低減が可能となる．

7.2

今後の課題

本研究ではインターネット上の脅威を低減するための手法について取り組んだ．し かし，攻撃者は常に脅威の対策を回避する手法の開発に注力しているため，マルウェ アの検知の分野においてはいくつかの大きな課題がある．

7.2.1

複数の対策手法の連携

ボット通信の多様化はセキュリティインシデント検知において避けられない課題で あり，今後も多くのボットが発生すると考えられる．また，検知手法にはそれぞれ第 3章で述べた通りの特徴がある．インターネット上からマルウェアによる被害を低減す るためには，インターネット規模における管理サーバの発見や，ノードにおける多様 な管理視点に基づいた検知手法など複数の視点から取り組む必要がある．

36

7.2. 今後の課題

第 7. 結論  

7.2.2

全く新しいマルウェアへの対応

今回は実験データを用いて収集されたボットの通信の特徴を用いて，正しくボット が検知されることを示した．しかし，第 1章で述べたとおり，ボットは経済モデルが成 り立っていることから，新しい通信モデルを用いたボットネットの開発が進んでいく と考えられる．その際には，明らかに悪意のある通信を確実に検知できる方向を考え， 検知できない活動を効率的にモデル化していく必要がある．

7.2.3

実ネットワークでの運用と評価

本論文中では，マルウェアのモデルがボットの検知に有用であることを示した．し かし，本研究を含む通信のモデル化や，第 3章で挙げた DNS を利用したボットネット の検知については，正常なトラフィ ックの誤検知問題など解決すべき課題が残る．近年 では Norton AntiBot などマルウェアのふるまいを抽象化した検知手法が製品として登 場しており，実ネットワークにおける運用と評価が期待される．

7.2.4

環境に依存する脅威への対応

Zou らの報告 [42] によれば，一部のボットは外部への接続が制限された環境では正 常な動作を行わないといわれている．そのため，第 4.4節で述べたように通信を軽減し ている環境下では実環境のボット通信を完全に再現しているとはいえない．鵜飼らの 取り組み [43] は特定の条件下でしか活動しないボットの条件などを判別する静的解析 手法が研究されている．今後，特定環境下でしか実行できないボットが増加する可能 性を考慮し，静的解析と連携したボット通信の取得方法が期待される．

37

謝辞
本論文の執筆にあたり，本当に多くの方々にお世話になりました．この場をお借り して，お礼を述べさせていただきたいと思います． まず，本研究を進めるにあたり，ご指導をいただきました慶應義塾大学 環境情報学 部教授 村井純博士に感謝いたします．大変ご多忙な中，本研究のテーマや研究の進め 方について，非常に貴重な意見を頂きました． 同学部教授 中村修博士に感謝いたします．私は氏から丁寧に研究の本質を考えるよ うご指導いただきました． 慶應義塾大学 政策・メディア研究科教授 武田圭史博士に感謝いたします．氏は私の 研究を親身に考えてくださり，方向性や執筆に迷った際には大きな助けを私に与えて くださいました． 学部からの研究について常にご指導いただき，様々な議論を交わしあった慶應義塾 大学 政策・メディア研究科 水谷正慶氏と白畑真氏に感謝いたします．お二人は私が研 究室に入った当初から私の研究についての議論や様々な講義のために多くの時間を割 いてくださいました．氏らと共に実験環境の構築や結果の考察に取り組むことで，セ キュリティという研究分野に一層楽しく取り組めました． また，かねてより研究を進める上でモービル広域ネットワークプロジェクトの先生 方から多くの助言などを頂いてきました．楠本博之博士，Rodney D. Van Meter III 博 士，鈴木茂哉氏，土本康生博士，重近範行博士，吉藤英明博士，朝枝仁博士，植原啓 介博士，斉藤賢爾博士，三次仁博博士，稲葉達也氏，中根雅文氏に感謝します． 本論文執筆にあたっては慶應義塾大学徳田・村井・楠本・中村・高汐・重近・バン ミーター・植原・三次・中澤合同研究プロジェクトの諸氏らからさまざまな励ましと助 言，手助けをいただきました． 岡田耕司氏には本研究をはじめとして研究室内での生活における様々な課題につい て相談に乗っていただきました．氏は常に私の研究生活を励ましてくださいました．松 谷健史氏の持つハードウェアに対する情熱と知識には強く刺激を受け，私の興味の分野 を広げることができました．また松谷氏は本論文執筆中における多くの夕飯をサポー トしてくださいました．お二人のサポートは私の研究生活に欠かせないものでした．本 当にありがとうございました． 研究室の同期であり共に執筆に取り組んだ空閑洋平氏の新しい技術やツールに関す る情報アンテナの広さは私に刺激を与え，研究生活を豊かな環境にしてくれました．特

に，氏の考案したトランプゲーム charlatan は論文執筆中に非常に良い気分転換の機会 となりました．同様に執筆を共にした奥村祐介氏は常に場の空気を和ませてくれ，時 にゲームのライバルとして，非常に充実した時間を与えてくれました．本多倫夫氏と は学部１年次から共に研究活動に取り組んできました．あの頃に苦労しながらも共に 学んだ輪講の様子は昨日のように覚えています．みんな，ありがとう． 石原知洋氏，海崎良氏，堀場勝広氏と工藤紀篤氏は多くのネットワーク設計・運用 の場と人脈を築く機会を私に与えてくださいました．これらの経験はネットワークを 基盤とする私の研究活動において，非常に有意義なものでした．南政樹氏と小原泰弘 博士には，私が研究室に入った時から多くのことをご指導いただきました．氏らは私 にプログラミングやネットワーク・サーバ運用の技術からそれらの心構え，研究室で の生活まで多くのことを教えてくださいました．氏らのご指導なくして，ここまで有 意義な研究生活は過ごせませんでした．ありがとうございました． 研究室で活動を共にした神谷尚保氏，町田啓太氏，六田佳祐氏，波多野敏明氏，永 山翔太氏，上原雄貴氏，黒宮佑介氏，遠峰隆史氏，川喜田佑介博士，江村桂吾氏，佐 藤龍氏，佐藤泰介氏，三部剛義氏，久松剛氏，三島和宏氏，松園和久氏，中村友一氏， Achmad Basuki 氏，Mohamad Dikshie Fauzie 氏，中村遼氏，中里恵女史，小椋康平 氏，尾崎隆亮氏に感謝いたします．特に六田佳祐氏と波多野敏明氏は本研究の手助け だけにとどまらず，研究室内での様々な取り組みを快く引き受けてくれました．また， 永山翔太氏と上原雄貴氏は研究生活に笑顔を与えてくれ，論文執筆の面でも大きな手 助けをくれました．小椋康平氏から伝えていただいたゲームの文化は私の心に大きな ゆとりと新しい楽しみをもたらしてくれました．また，私は石原知洋氏と黒宮佑介氏 が作成してくれた私の本論文執筆を心強くサポートするポスターを忘れません．そし て，私は本論文の執筆中に私を癒し続けてくれた，水谷氏のペットであるでんすけの 顔を忘れません．皆さん，ありがとうございました． 多くの友人と家族に対して感謝いたします． 新倉弥幸女史とは学位論文のテーマや執筆ついて互いに語り合いました．研究分野 の違う女史との会話は非常に興味深く，私に刺激を与えてくれました． 竹尾明子女史は私をいつも見守り，励ましつづけ，女史自身が多忙であった時も私 を支え続けてくれました．心から感謝いたします．本当にありがとう． 最後に私の健康を気遣い，学部時代から影ながら研究を大いに支えてくれた父 千明， 母 艶子と妹 香に感謝します． 皆様の御指導と御助力がなければ本論文は成し得ず，私の学生生活もこれほどまで に充実したものにはなりませんでした．本当にありがとうございました．

2009 年 2 月 金井 瑛

参考文献


7.2. 今後の課題

第 7. 結論  

[

42

付 録A
A.1
目的

通信データの再構成

本論文では，能動感染型ボットの活動によって生じる通信を取得するために，ハニー ポットソフトウェア Nepenthes を用いた．Nepenthes は本論中で紹介したとおり，多く の脆弱性エミュレート機能を備え，ダウンロードの実行が可能なハニーポットである． Nepenthes は仮想マシンや実機を用いる高インタラクションハニーポットとは異なり， 脆弱性の処理と脆弱性によって発生するマルウェアの転送をエミュレートし，その後 の通信には関与しない．すなわち，Nepenthes の通信を監視するとマルウェアの活動の うち攻撃と転送についての情報を得られる．しかし，その後の管理と活動については 有益な情報を得られない．本章では，Nepenthes でマルウェアを取得する際の通信と， 取得されたマルウェアを実行環境で実行した際の通信を結合する工夫について述べる．

A.2

能動型感染ボットの通信取得機構

ハニーポットはボットネットの研究を進める上で有効なツールである．運用コスト や法的な問題から低インタラクション型のボットネットは研究に用いやすい．しかし， 一般的な低インタラクション型の環境から得られる情報は，セッション型ボット検知 機構に対して十分な情報を与えない．

一般的な低インタラクション型ハニーポットを用いたボットトラフィ ック収集の環境を  A.1に示す．中では，IP アドレス IP a を持つマシン上で低インタラクション型ハ ニーポットが稼働している．ハニーポットの稼働しているマシンの通信はすべてトラ フィ ックミラーポイント M P a でミラーリングされ，蓄積される．M P a のトラフィ ッ クダンプデータにはハニーポットが対応したすべての攻撃に対してのトラフィ ックが蓄 積される．ハニーポットで蓄積したマルウェアは手動で IP アドレス IP b を持つ実行マ シンにコピーする．法的な問題から実行マシンからのトラフィ ックは管理者の設定した ポリシーによって，フィルタアウトされる．また，実行マシンの通信はトラフィ ックミ ラーポイント M P b によってミラーリングされ，蓄積される．M P b のトラフィ ックダ ンプデータは筆者のモデルを用いたボット検知機構などのマルウェアの通信を利用し てボットを検知する機構には有効である．対して，M P a のトラフィ ックダンプデータ

43

A.3. 問題点

付 録 A. 通信データの再構成  

 A.1: マルウェアトラフィ ック収集のための一般的なハニーポット環境

にはマルウェアのダウンロードまでのトラフィ ックのみが含まれるため，筆者の機構な どには有効な情報とならない．

A.3

問題点

第 A.2節ではハニーポットの有用性と，ハニーポットと実行マシンを用いたマルウェア の通信情報収集環境について述べた．実際のマルウェア通信を再現するためには M P a の通信と M P b の通信を１つに結合する必要がある． ２つの PCAP ファイルのパケットを結合する既存の実装として tcpmerge が存在す る．tcpmerge は２つの PCAP ファイル内のパケットの時間情報を保持したまま，パ ケットを結合する．しかし，結合に際して，PCAP ファイルの持つ情報の差の問題が ある．また，問題を解決しトラフィ ックを結合したのみでは IP アドレスの差と時間情 報の差の２つの問題が発生する．これら３つの問題は，通信を用いたネットワークイ



ハニーポットのトラフィ ック M P a はすべてのマルウェアに関するトラフィ ックを保 持する．しかし，実行環境のトラフィ ック M P b は，マルウェアごとに分割されたトラ フィ ックデータを保持する．そのため，マルウェア毎のトラフィ ックを得るには，ハニー ポットトラフィ ックからマルウェア毎のトラフィ ックを抜き出す必要がある．この問題 を A.2に示す．

A.3.1

ンシデント検知機構の評価に大きな影響を及ぼす．

A.3. 問題点

PCAP ファイルの持つ情報の差


付 録 A. 通信データの再構成  

A.3. 問題点

付 録 A. 通信データの再構成  

A.3.2

IP アドレスの差

ハニーポットマシンと実行環境マシンは保持する IP アドレスが異なるので，IP アド レスを用いて通信ノードを特定すると，実際とは異なったマシンが通信しているよう に観測される． A.1の例では，ハニーポットトラフィ ックでは IP a が，実行環境トラ フィ ックでは IP b がそれぞれ外部と通信をしているトラフィ ックとなる．本論文で述べ た種類のネットワークベースの検知機構では，内部ノードのフローの順序を利用して 検知するが，IP a と IP b の行う別の通信として扱われるため，正しい検知が実現でき ない．

A.3.3

時間情報の差

実行環境トラフィ ックは，マルウェアを収集した直後に収集されていないので，実際 の動作と時間情報に差が出る．この様子を A.3に示す．ただし，中の用語を表 A.1

 A.3: 実時間と pcap に含まれる時間の差分

のように定義する．∆t は式 A.1 のように表わされる．

∆t = ts2 − te1

実際のトラフィ ックでは一般的に，マルウェアの転送終了直後にマルウェアが実行され るため，te1 と ts2 の差は十分に小さい．しかし，一般的な実行環境においては，マル ウェアのダウンロード時間とマルウェアの実行に大きな時間差が生じるため，T r2 の 全トラフィ ックは実際に比べて ∆t だけ遅れた時間をもつパケットとなる．



付 録 A. 通信データの再構成  

表 A.1: タイムラインで用いられる記号の解説
項目名 内容 ハニーポットトラフィ ックの開始時刻 ハニーポットトラフィ ックの終了時刻 実行環境トラフィ ックの開始時刻 実行環境トラフィ ックの終了時刻 ハニーポットトラフィ ック 実行環境トラフィ ック 時間情報を保持したまま結合したトラフィ ック 実際のトラフィ ック

ts1 te1 ts2 te2 Tr1 Tr2 Tr3 Tr3

本論文で述べたモデル化による検知機構を含む多くのトラフィ ック監視するセキュリ ティ機構では，フロー間の間隔が長いとそれらを連続したフローとして扱わない．そ こで，T r2 は ∆t だけ時間を早くして T r1 と結合し，実際のトラフィ ックに近づける必 要がある．

A.4
A.4.1

実装
Nepenthes へのパッチ

本節では，低インタラクションハニーポットである Nepenthes に対して加えた変更 について述べる．

Nepenthes の構成モジュール Nepenthes は C++で書かれたハニーポットである．Nepenthes のボット収集に関す る機能は大きく 5 つのモジュールに分かれている．各モジュール間の全体像を A.4に 示す．に示したモジュール以外にも nepenthes はログの出力機構や，イベントハンド リングモジュールなどを含む． Socket Module 本モジュールは Nepenthes 起動時に読み込んだ Vulnerable モジュールへの通信を受け 付ける Socket を listen する．また，Download モジュールからのダウンロード要請を処 理する．Socket モジュールとは Msg クラスによりデータがやり取りされている． Vulnerable Module 本モジュールは socket モジュールと Msg クラスによりデータをやりとりし，脆弱性を 47

A.4. 実装

付 録 A. 通信データの再構成  

Nepenthes における実装の差分

エミュレートする．多くの脆弱性では，シェルコードを実行するために，受け取った データを Msg クラスで ShellCode モジュールに伝える． Shell Code Module 本モジュールは主に，送り込まれたシェルコードの実行をエミュレートする．多くの エミュレートの結果，Donwload モジュールに対して，Download クラスによってダウ ンロードを要求する． Download Module 本モジュールは，ダウンロード要求を処理する．ShellCode モジュールからのダウン ロード要求を受け付け，Msg クラスによって Socket モジュールと通信する．ダウンロー ドが終了すると，Download クラスによって，File クラスへデータを通達する． File Module 本モジュールは Download モジュールからの Download クラスのデータを受け取り，ダ ウンロードが終了したデータをファイルに保存する．

Nepenthes へのパッチ
各モジュールに対してイベント発生時固有の識別子を生成 継承するように Nepenthes ・ を変更した．この結果， A.5 のようにログが出力される．


付 録 A. 通信データの再構成  





(12102007 22:21:36 info handler dia) Time: 1192195296, Info: KNOWN DCOM(2) ATTACK RECEIVED, UniqueId: 1, Local: 203.178.143.29:135, Remote: 203.174.215.156:1258 12102007 info mgr submit Time: 1192195331 (12102007 22:21:36 info down handler module) Time: 1192195296, Info: LINK(1) DOWNLOAD START, UniqueId: 1, Local: 203.178.143.29:33286, Remote: 203.174.215.156:54791 (12102007 22:21:36 info handler dia) Time: 1192195296, Info: BLINK DOWNLOAD START, UniqueId: 1, Local: 203.178.143.29:33286, Remote: 203.174.215.156:54791 (12102007 22:22:11 info mgr submit) Time: 1192195331, Info: SUBMITED, UniqueId: 1, FileName: 2aa59ba4251795deda72738d1c67be7c, FileType: MS-DOS executable PE for MS Windows (GUI) Intel 80386 32-bit
 

 A.5: パッチを適応した Nepenthes により出力されるログの例

A.4.2

PCAP Address Replacer

PCAP Address Replacer は C 言語で記述されたパケット内部の IP アドレスと MAC アドレスを書き換えるコマンドラインソフトウェアである．パケットに含まれる コマンドラインから指定したアドレスを置き換え，また，IP チェ ックサムおよび，L4 のチェ ックサムを再計算する．IP は IPv4 および IPv6 をサポートする．また，L4 プロ トコルは TCP と UDP をサポートする． PCAP Address Replacer は PCAP IP Address Replacer と PCAP MAC Address Replacer に分かれており，それぞれ A.6 と A.7 に示したコマンドラインで置換 する．

A.4.3

PCAP Appender

PCAP Appender は C 言語で記述された 2 つの PCAP ファイル内のパケットの時 間を調整し，それぞれの PCAP ファイルを結合するソフトウェアである．本ソフトウェ アは， A.8 に示したコマンドラインで結合を実行する． 本ソフトウェアは第 A.3.3節で示したように，inﬁle1 のトラフィ ックを T r1，inﬁle2 の 49

A.5. 考察

付 録 A. 通信データの再構成  





pcap ipreplacer -iinﬁle1 -ooutﬁle -bbefore-ip-address -aafter-ip-address -i: Input PCAP ﬁle :入力 PCAP ファイル -o: Output PCAP ﬁle: 出力 PCAP ファイル -b: Replace IP address: 置換対象の IP アドレス (ipv4/ipv6) -s: Replace with IP address: 置換した後の IP アドレス (ipv4/ipv6)
 

 A.6: pcap ipreplacer の利用方法
 



pcap macreplacer -iinﬁle1 -ooutﬁle -bbefore-mac-address -aafter-mac-address -i: Input PCAP ﬁle :入力 PCAP ファイル -o: Output PCAP ﬁle: 出力 PCAP ファイル -b: Replace MAC address: 置換対象の MAC アドレス -s: Replace with MAC address: 置換した後の MAC アドレス MAC アドレスは:あるいは-あるいは. で区切られた 6 フィールドあるいは 3 フィー ルドの文字列
 A.7: pcap macreplacer の利用方法



トラフィ ックを T r2 として扱い，T r2 の各パケットの時間軸を −∆t ずらすことで，T r4 に近いトラフィ ックを生成して，outﬁle に書き出す．

A.5

考察

本機構はハニーポットトラフィ ックと実行トラフィ ックを合成することで，実際のト ラフィ ックに似たトラフィ ックを生成する機構である．表 A.2に，筆者が提案した手法 あるいは一般的なネットワークベースの検知手法にたいして，実際のトラフィ ックイン シデントの検知に影響が生じるかを示した． IP Address IP アドレスは，本手法によって置換されるため，実際のトラフィ ックと変わらない． Protocol Type L4 のプロトコルタイプは，一切の影響を受けないため，実際のトラフィ ックと変わら ない． Packet Length 筆者の提案手法では利用しない項目である． ネットワークスタックの問題により，完全に実際のトラフィ ックとは一致しない． Start Time フローの開始時刻は最初の攻撃のパケットであるため，実際のトラフィ ックと変わら

50

A.5. 考察

付 録 A. 通信データの再構成  





pcap appender -1inﬁle1 -2inﬁle2 -ooutﬁle -1: Merge base PCAP: 結合する -2: Merge PCAP ﬁle to inﬁle1 : inﬁle1 に結合する PCAP -o: Output PCAP ﬁle: 結合した結果を出力するファイル名
 

 A.8: pcap appender の利用方法 表 A.2: 通信合成による検知手法への影響
提案手法への影響 一般的な影響 影響

IP Address Protocol Type Packet Length Start Time End Time pps bps port number Timeout DNS PACKET L7 payload TCP FLAG WindowSize pattren PacketSize pattren

UNUSE perhap UNUSE UNUSE UNUSE UNUSE

o o o o o perhap o o Network Stack issue Network Stack issue Network-Stack issue Network-Stack issue Network-Stack issue Network-Stack issue Network-Stack issue Ephemeral port issue We can solve this problem

ない． End Time ネットワークスタックの問題により，完全に実際のトラフィ ックとは一致しない．今回 の提案手法では無視できる程度と考える． pps/bps ネットワークスタックの問題により，完全に実際のトラフィ ックとは一致しない．今回 の提案手法では無視できる程度と考える． port number ポートは一切の影響を受けないため，実際のトラフィックとは変わらない．ただし， ハニーポットが外部のノードに接続する際は，OS の実装によって，Ephemeral Port Number が異なる可能性をある． Timeout

51

A.5. 考察

付 録 A. 通信データの再構成  

ネットワークスタックの問題により，フロー間の間隔が若干長くなる可能性はあるが， 今回の提案手法では無視できる程度と考える． DNS Packet DNS パケットには特に影響がないため，実際のトラフィ ックと変わらない． L7 Payload 今回の提案手法では利用しない項目である． アプリケーション層のペイロードには影響がないため，実際のトラフィ ックと変わら ない．ただし，ペイロード内にハニーポットあるいは実行環境マシンの IP アドレスを 含み，検知手法がその項目を重要視する場合は影響がある．kanai の提案手法では無視 できる． TCP FLAG kanai の提案手法では利用しない項目である． TCP フラグには特に影響がないため，実際のトラフィ ックと変わらない． WindowSize/PacketSize Pattern kanai の提案手法では利用しない項目である． ネットワークスタックの問題により，完全に実際のトラフィ ックとは一致しない．

52

</data>
       <segmenter>japanese</segmenter>
       <stemmer>depluralize</stemmer>
       <kb>japanese-indexing</kb>
</test>
</testset>
