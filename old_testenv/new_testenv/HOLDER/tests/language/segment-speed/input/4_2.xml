<?xml version="1.0" encoding="UTF-8"?>
<testset>
<test>
<data>
LYX の高度設定 熟練ユーザのための各機能
LYX 開発チーム1
第 20x 版
2010 年 8 月 30 日

YX 文書化メーリング リスト lyx-docs@listslyxorg 宛お送りください。件名ヘッダに「[Customization]」と い う 文 字 を 入 れ 、こ の ファイ ル の 現 在 の メ ン テ ナ Richard Heck &lt;rgheck@comcastnet&gt;を cc にして送ってください。

1 もしコメントや誤りの修正をお持ちでしたら、L

i

目次
第 1 章 はじめに 第 2 章 LYX 設定ファイル 21 LyXDir にはなにがあるの？211 自動的に生成されるファイル   212 ディレクトリ213 変更を加えない方がよいファイル 214 ひとこと必要なファイル群22 ユーザのローカル設定ディレクトリ23 LYX を複数の設定を使って実行するには 第3章 31 32 33



設定ダイアログ 9 書式   9 複写子  10 変換子  11

第 4 章 LYX の各国語対応 41 LYX を翻訳する   411 GUI（テキストメッセージ）を翻訳する 4111 多義訳語メッセージ   412 説明書を翻訳する  42 国際キー配列421 kmap ファイル   422 cdef ファイル423 デッドキー 424 自分の言語設定を保存する

15 15 15 17 17 18 19 20 21 22
第 5 章 文書クラスを新規に導入する 23 A 51 新しい L TEX ファイルの導入  24
ii 52レイアウトファイルの型   521 レイアウトモジュール522 sty ファイル用のレイアウト 523 cls ファイル用のレイアウト 524 ひな型を作成する   525 旧レイアウトファイルの更新レイアウトファイルの書式  531 文書クラス宣言532 モジュール宣言533 ファイル書式 534 汎用テキストクラスパラメータ   535 ClassOptions 部   536 段落様式537 段落様式の国際化   538 フロート539 任意設定差込枠と差込枠レイアウト 5310 カウンタ5311 フォント指定 5312 引用書式指定 XHTML 出力のタグ 541 段落様式542 差込枠レイアウト XHTML  543 フロート XHTML   544 書誌情報の整形545 LYX が生成した CSS53
第 6 章 外部素材を取り込む 61 どのように機能するのか   62 外用ひな型設定ファイル   621 ひな型のヘッダ622 Format 部   623 プリアンブルの定義 63 代入機構64 セキュリティに関する論点 
第 1 章 はじめに
この取扱説明書は、LYX に備わっている高度設定機能を取り扱います。 ここでは、短絡キーや画面プレビューオプション、プリンタオプション、 A LYX サーバ経由での LYX へのコマンド送信、国際化、新しい L TEX クラ スや LYX レイアウトの導入などの題材について論じます。おそらくは変 更可能なことすべてについて触れることは無理でしょうが—私たちの開 発者たちは私たちが文書化できる速さよりも速く新しい機能を付け加え てしまうので—、もっとも一般的な高度設定については説明を行い、わ かりにくいものについては正しい方向を指し示すことができるようにし ていくつもりです。
第 2 章 LYX 設定ファイル
本章の目的は、LYX 設定ファイル群を理解するための一助となること です。本章を読み進める前に、ヘルプ ◃ LyX についてを使って、LYX ライ ブラリとユーザディレクトリがどこにあるかを確認しておいてください。 ライブラリディレクトリは、LYX がシステム全体の設定ファイルを置い ておくところです。一方、ユーザディレクトリは、自身がそれを修正し た版を置いておくところです。私たちは、本書の以下の部分で、前者を LyXDir と呼び、後者を UserDir と呼ぶことにします。LyXDir にはなにがあるの？

LyXDir とそのサブディレクトリには、多くのファイルがあり、LYX の 挙動を高度設定するのに使用されます。これらのファイルの多くは、LYX 内のツール ◃ 設定ダイアログから変更することができます。LYX 中で行い たいと思うような高度設定は、ほとんどこのダイアログから行うことがで きるようになっています。しかしながら、LYX の他の多くの内部動作は、 LyXDir のファイルを修正することで高度設定されます。これらのファイ ルは様々なカテゴリに分類しうるので、以下の各小節で説明します。

自動的に生成されるファイル
UserDir にある各ファイルは、LYX が自動設定を行ったときに生成され ます。これらのファイルは、内部調査中に推測された様々な既定値が置 かれています。これらは、随時上書きされてしまうので、一般的には修 正しないことが望まれます。 lyxrcdefaults このファイルには、様々な既定コマンドが置かれてい ます。 packageslst このファイルには、LYX が認識したパッケージの一覧が 収められています。現在のところ、これは LYX プログラム自体には使用
第 2 章 LYX 設定ファイル

されていませんが、抽出された情報その他は、ヘルプ ◃ LaTeX の設定で 見ることができます。 textclasslst ユーザの layout/ディレクトリで検出されたテキスト A クラスと、関連した L TEX 文書クラスおよびその説明の一覧です。 lyxmoduleslst ユーザの layout/ディレクトリで検出されたレイアウ トモジュールの一覧です。 A *fileslst ご使用のシステムで検出された様々な種類の L TEX 関連 ファイルの一覧です。 doc/LaTeXConfiglyx このファイルは、 自動設定中に LaTeXConfiglyxin A から自動的に生成されます。ご使用中の L TEX の設定に関する情報が納 められています。
ディレクトリ

以下の各ディレクトリは、LyXDir と UserDir に重複して存在します。 特定のファイルが両方の場所にある場合には、UserDir の方にあるもの が使用されます。 bind/ このディレクトリには、LYX で使用されるキー割当を定義して いる、拡張子がbind のファイルが置かれています。$LANG_xxxbind と いう名称の割当ファイルの各国語版がある場合には、そちらが用いられ ます。 clipart/ このディレクトリには、文書に取り込むことのできる画像 ファイルが納められています。 doc/ このディレクトリには、LYX の取扱説明書ファイル（今お読みの ものも含めて）が納められています。上述のように、LaTeXConfiglyx ファイルは特に注目に値します。各国語版のヘルプ文書は、doc/xx（ xx」 「 は ISO 言語コード）サブディレクトリにあります。詳しくは、第 4 章を ご覧ください。 examples/ このディレクトリには、何らかの機能の使い方を説明する 例示ファイルが納められています。ファイルブラウザ中で用例ボタンを 押すと、このディレクトリが表示されます。 images/ このディレクトリには、文書ダイアログで使用される画像ファ イルが納められています。さらに、ツールバーの各アイコンや、LYX を 起動したときに現れるバナーも納められています。

21 LyXDir にはなにがあるの？
kbd/ このディレクトリには、キーボードのキー割当ファイルが納めら れています。詳細については、第 42 章をご覧ください。 layouts/ このディレクトリには、第 5 章に述べられているテキストク ラスおよびモジュールのファイルが納められています。 lyx2lyx このディレクトリには、LYX の各バージョン間の変換に使用 される lyx2lyx Python スクリプトが納められています。たとえば、複数 のファイルの変換をバッチ処理したい場合には、これらをコマンドライ ンから実行することもできます。 scripts/ このディレクトリには、外用ひな型機能の有用性を示すため のファイルがいくつか納められています。LYX 自身が使用するスクリプ トもいくつか収められています。 templates/ このディレクトリには、第 524 章で述べられている標準 の LYX ひな型ファイルが納められています。 ui/ このディレクトリには、LYX の操作画面を定義する拡張子ui の ファイルが納められています。つまり、これらのファイルは、どのメニュー 項目がどのメニューに現れるかを定義し、どの項目がツールバーに現れ るかを定義しています。
変更を加えない方がよいファイル

これらのファイルは LYX が内部的に使用するもので、あなたが開発者 でない限りは、凡そこれらに変更を加える必要はありません。 CREDITS このファイルは、 YX 開発陣の名簿です。 L この内容は、 メニュー 項目ヘルプ ◃ LyX についてで表示されます。 A chkconfigltx これは、自動設定プロセスによって使用される L TEX スクリプトです。直接実行しないでください。 configurepy これは、LYX の再設定によって使用されるスクリプトで す。これは、このスクリプトを実行したディレクトリに設定ファイルを 生成します。

214

ひとこと必要なファイル群

encodings このファイルには、各文字エンコーディングがどのように Unicode にマップされるかを示した表が載っています。

6

第 2 章 LYX 設定ファイル

external_templates このファイルには、新しく導入された外用ひな 型機能で使用できるひな型が載っています。 languages このファイルには、現在 LYX がサポートしている言語の全 一覧が載っています。

22

ユーザのローカル設定ディレクトリ

LYX を非特権ユーザとして利用している場合でも、自分自身で使うた めに、LYX の設定を変更したいと思うかもしれません。UserDir ディレク トリには、すべての個人設定ファイルが収められています。これは、ヘル プ ◃ LyX についてで「ユーザーディレクトリ」として言及されているディ レクトリです。このディレクトリは、LyXDir のミラーとして使用されて おり、これは UserDir 内のすべてのファイルが、LyXDir の対応するファ イルを置き換えるものとして機能していることを意味します。前節で述 べられた設定はどれも、全ユーザに影響する全システム用ディレクトリ に置くこともできますし、自分自身で使うために個人のローカルディレ クトリに置くこともできます。 わかりやすくするために、いくつか例を挙げましょう。 • ツール ◃ 設定ダイアログで設定されるユーザ設定は、UserDir 中の preferences ファイルに保存されます。 • ツール ◃ 再設定を使用して再設定を行うと、LYX は configurepy スクリプトを実行し、その結果のファイルは、ご自身のローカル設定 ディレクトリに書き込まれます。 これはすなわち、 UserDir/layouts にご自身で追加したテキストファイルは、文書 ◃ 設定ダイアログの クラス一覧に表示されるようになることを意味します。 • たとえば、LYX の FTP サイトから最新の取扱説明書をとってきた ものの、使用中のシステム上で管理者権限がないために、それをイ ンストールすることができなかったとしても、それらのファイルを UserDir/doc/ディレクトリにコピーすれば、ヘルプメニュー項目 はこれらを開くようになります！

23 LYX を複数の設定を使って実行するには
を複数の設定を使って実行するには

ローカル設定ディレクトリにおいて設定の自由度があるだけでは、２ つ以上の設定を自由に使いこなしたい場合には充分ではないかもしれま せん。たとえば、使用する度に異なるキー割当を使用したり、異なるプ リンタ設定を使用したいことがあるかもしれません。これは、複数の設 定ディレクトリを作ることで実現することができます。そして、実行時 にどのディレクトリを使用するか指定するのです。 LYX をコマンドラインスイッチ-userdir &lt;ディレクトリ名&gt;と共に起 動すると、設定を既定のディレクトリではなく、指定したディレクトリ から読み込むように、指示することになります（LYX を-userdir スイッ チなしで実行すれば、既定ディレクトリを指定することになります） 。指 定したディレクトリが存在しない場合には、LYX は、初めて LYX を実行 したときに既定ディレクトリを訊いてくるのと同様に、そのディレクト リを作るかどうか訊いてきます。この追加したユーザディレクトリでは、 既定ディレクトリで行うのと全く同じように設定オプションを修正する ことができます。これらのディレクトリは完全に独立しています（が、読 み進めてください） 。また、環境変数 LYX_USERDIR_20x を特定の値に設 定しても、全く同じ効果があります。 複数の設定を持つことはまた、維持の手間も増えるということです。も し新しいレイアウトを NewUserDir/layouts に加えて、これをすべての 設定で利用できるようにしたいならば、これをすべての設定ディレクト リで個々に付け加えなくてはなりません。これを避けるには、次のよう なトリックを使用してください。LYX が新しい設定ディレクトリを生成 すると、そのサブディレクトリ（上記参照）はほとんど空です。新しい 設定が既存のものをミラーするようにするには、空のサブディレクトリ を、既存の設定の対応するサブディレクトリへのシンボリックリンクに 置き換えてください。ただし doc/サブディレクトリには、設定スクリプ ト（ツール ◃ 再設定で使用可能）が書き出した、設定毎に異なるファイル が含まれていますので、注意を払ってください。

9

第 3 章 設定ダイアログ
設定ダイアログのオプションのすべては、ユーザーの手引きの付録設 定ダイアログに述べられています。オプションのうちいくつかについて、 ここでさらに詳細に説明します。
書式

ファイル書式が定義されていない場合、はじめの一歩は、使いたいと 思うファイル書式を定義することです。それには、ツール ◃ 設定ダイアロ グを開いてください。ファイル処理 ◃ ファイル書式の中で新規   ボタン を押して、登録する新しい書式を定義してください。書式フィールドは、 GUI 中で書式を認識するために用いられる名称です。短縮名は、書式を 内部的に識別するために用いられます。さらにファイル拡張子も入力す る必要があります。これらはすべて必須事項です。オプションの短絡キー フィールドは、メニュー中で短絡キーを提供するのに使用されます（た とえば、Alt-V D を押すと表示 ◃ DVI となります） 。 書式には、閲覧プログラムと編集プログラムを関連づけることができ ます。たとえば、PostScript ファイルを閲覧するのに Ghostview を使用し たいとしましょう。このプログラムを起動するのに必要なコマンドを対 応するフィールドに入力します。ここで、コマンドを定義するのに、次 節に掲げる 4 つの変数を用いることができます。この閲覧プログラムは、 LYX 中で画像を閲覧したり表示メニューを使用したときに起動されます。 一方、編集プログラムは、たとえば、画像を右クリックして現れるコン テクストメニューで外部で編集を選択したときに起動します。 文書書式オプションは、LYX に、この書式が文書として書き出すのに 適していることを指示するものです。このオプションが有効となってい て、適切な変換経路が存在する場合には（第 33 節を参照） 、この書式が ファイル ◃ 書き出しメニューに表示されます。また、この書式に閲覧プロ グラムが指定されている場合には、この書式は表示メニューにも表示さ

10

第 3 章 設定ダイアログ

れます。png のような純粋な画像書式は、このオプションを有効にしては いけません。pdf のようにベクター画像であると同時に文書でもあるよう な書式は、これを有効にします。 ベクター画像書式オプションは、LYX にこの書式がベクター画像を含 みうることを教示するものです。この情報は、pdﬂatex を書き出す際に、 内包されている画像をどの書式に変換するかを決定するのに使用されま す。pdﬂatex は、pdf・png・jpg 以外の画像書式を取り扱うことができない ので、内包されている画像は、これらの書式に変換される必要があるか もしれない為です。内包されている画像が既に pdf・png・jpg のいずれか になっていない場合には、ベクター画像書式オプションが有効になって いる場合には pdf に変換され、そうでない場合には png に変換されます。

32

複写子

書式の変換はすべて、LYX の一時ディレクトリで行われるため、変換 用にファイルを一時ディレクトリにコピーする前段階で、ファイルに変 更を加える必要のあることがあります1 。これは複写子によって取り扱わ れ、複写子は、ファイルを一時ディレクトリに（あるいは一時ディレク トリから）コピーすると同時に、その過程でファイルに変更を加えます。 複写子の定義においては、以下の 4 つの変数を用いることができます。 $$s LYX のシステムディレクトリ（例：/usr/share/lyx） $$i 入力ファイル $$o 出力ファイル A $$l 「L TEX 名」 A 最後の変数は、L TEX の\include コマンドで使用されるのと同形式の ファイル名です。これは、書き出すファイルがそのようなインクルード に適している場合のみ、使用さるべきものです。 複写子は、 出力ファイルに関する操作であれば、 ほとんどすべてに対応す ることができます。 たとえば、 生成した PDF ファイルを、 /home/you/pdf/と いう特別なディレクトリにコピーしたいものとしましょう。その場合に は、以下のようなシェルスクリプトを書きます。

#!/ b i n / bash
たとえば、ファイルが他のファイル—たとえば画像—を、相対ファイル名を用いて 参照している場合、このファイルが一時ディレクトリにコピーされると参照が無効にな る場合があります。
1

33 変換子 FROMFILE=$1 TOFILE=‘basename $2 ‘ cp $FROMFILE /home/ you / pdf /$TOFILE

11

これを、 自身のローカル LYX ディレクトリ—たとえば/home/you/lyx/scripts/pdfcopiersh— に保存し、お使いのプラットフォームが必要とするならば、実行可能属性 を付与します。それから、ツール ◃ 設定ダイアログのファイル処理 ◃ ファ イル書式の中で、PDF(pdﬂatex) 書式—あるいは他の PDF 書式のうちど れか—を選択し、複写子フィールドに pdfcopiersh $$i $$o と入力し ます。 複写子は、LYX 自身が様々な変換に使用します。たとえば、適切なプ ログラムが検出された場合、LYX は自動的に HTML 書式と HTML (MS Word) 書式の複写子を導入します。これらの書式を書き出す際、複写子 は、本体の HTML ファイルだけでなく、関連した様々なファイル（スタ イルファイルや画像など）もコピーされるように手配します。これらの ファイルはすべて、元の LYX ファイルのあるディレクトリのサブディレ クトリに書き込まれます2 。

33

変換子

各書式間でファイルを変換するために、ご自身の変換子を定義するこ とができます。これは、ツール ◃ 設定 ◃ ファイル処理 ◃ 変換子ダイアログ で行います。 新規に変換子を定義するには、ドロップダウンリストから変換元の書 式と変換先の書式を選択し、変換に必要なコマンドを入力してから追加 ボタンを押してください。変換子の定義には、以下のような変数を使用 することができます。 $$s LYX システムディレクトリ $$i 入力ファイル $$o 出力ファイル $$b 入力ファイルのベースファイル名（拡張子をとった部分）
この複写子の挙動は調整することができます。非必須の「-e」オプションは、コピー する拡張子をコンマ区切りで羅列したものを引数にとります。これを省略した場合には、 すべてのファイルがコピーされます。 -t」引数は、生成したディレクトリに書き加える 「 拡張子を指定するものです。既定値では、これは「LyXconv」となっているので、/path/to/ﬁlenamelyx から生成された HTML ファイルは、/path/to/ﬁlenamehtmlLyXconv と なります。
第 3 章 設定ダイアログ

$$p 入力ファイルのパス $$r 元の入力ファイルのパス（変換子が連鎖して呼び出されたときの 挙動が$$p とは異なります） 追加フラグフィールドには、以下のフラグをコンマで区切って入力す ることができます。 A latex この変換子が L TEX の一種を実行することを示します。これに A よって、LYX の L TEX エラーログに記録を残せるようになります。 A needaux 変換に L TEX のaux ファイルが必要であることを示します。 xml 出力が XML であることを示します。 以下の 3 つのフラグは key = value 形式の引数をとります（したがって 厳密にはフラグとは呼べません） 。 parselog これを指定すると、変換子の標準エラーが infileout フ ァイルにリダイレクトされ、引数に指定されたスクリプトが script &lt; infileout &gt; infilelog の形で実行されるようになります。引数には $$s を指定することができます。 resultdir これには、変換子が生成したファイルをダンプするディレ クトリ名を指定します。LYX はこのディレクトリを作成せず、ここに何も コピーしませんが、このディレクトリを宛先にコピーします。引数には、 $$b を使用することができ、これはディレクトリがコピーされる際に、入 力ファイルおよび出力ファイルのベース名で置換されます。 resultdir と usetempdir は、同時に用いることはできませんのでご注意く ださい。前者が指定されているときには、後者は無視されます。 resultfile これは出力ファイル名を指定するもので、$$b を使用する ことができます。resultdir が指定されているときのみ有効で、必ず用い る必要はありません。指定されていなければ、既定値は「index」です。 最後の 3 つは、LYX とともに導入される変換子には、現在いずれも使 用されておりません。 変換しようとするすべての書式のあいだに変換子を定義する必要はあ りません。たとえば、 LYX から PostScript」変換子が定義されていない 「 のに、LYX は PostScript を書き出していることに気づかれることでしょ A う。これは、まず L TEX ファイルを生成した後に（これには変換子を定義 する必要はありません） 「L TEX から DVI」変換子を使用して DVI に変 、 A 換し、最後に、得られた DVI を PostScript に変換することによって実現 しています。LYX はこのような変換子の「連鎖」を自動的に見つけ、つね に最も短い連鎖を選択します。しかしながら、なお書式間に複数の変換

A 方法を定義することも可能です。たとえば、標準的な LYX 設定は、L TEX から PDF へ変換するのに、以下の 3 つの方法を用意しています。(1) 直 接 pdﬂatex を使用するもの。(2) （DVI と）PostScript を経由して ps2pdf を使用するもの。(3) DVI 経由で dvipdfm を使用するもの。このように代 替連鎖を定義するには、第 31 節に述べられているように、ターゲットと なる「ファイル書式」を複数定義しなくてはなりません。たとえば、標準 設定では、pdf・pdf2・pdf3 と命名された書式が定義されていて、すべて 共通の拡張子pdf を持ち、上記で言及した各変換方法に対応しています。

15

第 4 章 LYX の各国語対応
LYX は、翻訳された操作画面の利用をサポートしています。私たちが 最後に確かめたところでは、LYX は 30 言語の翻訳を提供しています。選 択した言語は、使用するロケールと呼ばれます（ロケール設定について の詳しい資料は、お使いの基本ソフトに添付のロケール関連説明書をご 覧ください。Linux の場合は、マニュアルページの locale(5) から見る と良いかもしれません） 。 これらの翻訳は適切に機能しますが、欠点もいくつかあることに注意 してください。たとえば、ダイアログはすべて英文を念頭にデザインさ れているため、翻訳文の一部は、割り当てられたスペースに収めるには 大きすぎるかもしれません。これは表示上の問題に過ぎず、他の障害は 引き起こしません。また、翻訳によっては、すべての短絡キーが定義され ていないことに気づかれるでしょう。短絡キーのために空いている文字 が十分ないことが時々あるのです。単に翻訳者がまだ短絡キーを定義し ていないこともあるでしょう。もちろん、私たちの各国語対応チーム— あなたも参加したいと思われるかもしれません1 —は、LYX の将来のバー ジョンでこれらの欠点を修正しようとするでしょう。
LYX を翻訳する
グラフィカル・ユーザ・インタフェース（テキスト・ メッセージ）を翻訳する

LYX は、操作画面の国際化対応に GNU gettext ライブラリを使用し ます。LYX のすべてのメニューやダイアログでお好みの言語を話させた いときには、その言語の po ファイルが必要です。このファイルが利用可 能であれば、そこから mo ファイルを生成して、この mo ファイルをイン
もしあなたが英語以外の言語を流暢に操れるならば、これらのチームに参加するこ とは、LYX コミュニティに報いるたいへん素晴らしい方法です！
第 4 章 LYX の各国語対応

ストールしなくてはなりません。この全過程は、GNU gettext の取扱説 明書に説明があります。この作業をあなたのためだけに行うこともでき ますが、もしせっかくするのであれば、あなたの骨折りの結果を LYX コ ミュニティの他の人々と分かち合いませんか。どのように段取りを進め ればよいか、詳しくは LYX 開発者メーリングリストにメールを送ってく ださい。 要約すれば、以下のように行います（xx は言語コードを表します） 。

• LYX ソースコードをチェ ックアウトしてください（ウェブ上の情報参 照） 。 • lyxpot ファイルを**po ファイルのあるフォルダにコピーして、 xxpo に名前を付け替えてください（lyxpot がどこにもない場合 には、コンソールからそのディレクトリで make lyxpot コマンド を実行し、作成し直すか、他言語の既存の po ファイルをひな型と して使用することができます） 。 • xxpo を編集します2 。メニューラベルやウィジェ ットラベルのうち には、翻訳しなくてはならない短絡キーがある場合があります。こ れらのキーは「|」の後に記されており、当該言語の単語やフレーズ に対応して翻訳しなくてはなりません。さらに、新しい po ファイル の冒頭に、あなたの電子メールアドレスなどの情報も書き加えて、 人々があなたに提案や、滑稽な怒りのメッセージを届けることがで きるようにしてください。
もし、あなたがこれを自身のためだけに行っているのであれば、

• xxmo を生成してください。これは msgfmt -o xxmo &lt; xxpo で できます。

• この mo ファイルを、お使いのロケールツリー中、言語 xx のアプリ ケーションメッセージ用の正式なディレクトリにコピーして、 lyxmo という名称にしてください ： （例 /usr/local/share/locale/xx/LC_MESSAGES/lyxmo

これは単なるテキストファイルなので、どのテキストエディタでも編集できます。 しかし、Poedit（全プラットフォーム用）や KBabel（KDE 用）のように、この目的の 編集をサポートする特別なプログラムがあります。Emacs にも po ファイルを編集する ための「モード」があります。
しかしながら前述のように、この新しい po ファイルを他の人たちが使用 できるよう、LYX 頒布版に追加できることが最善です。これを追加するに は、LYX に変更を加える必要がありますので、もしその気があれば、開 発者メーリングリストに電子メールを送ってください。

多義訳語メッセージ

時には、 一つの英語のメッセージが、 翻訳先の言語では複数のメッセージ に翻訳されなくてはならないことが判明することがあります。一つの例は、 To というメッセージで、これは英語で「to」がどういう意味を持っている かによって、独語では Nach と訳されたり Bis と訳されたりします。GNU gettext は、このような多義訳語を To の代わりに、To[[as in ’From format x to format y’]] や To[[as in ’From page x to page y’]] としなくてはなりません。これによって、これら 2 つの To は、gettext には別物と解釈され、それぞれ正しく Nach と Bis に訳すことができるよ うになります。 もちろん、この文脈情報は、翻訳が存在しないときには取り去られる 必要がありますので、メッセージの終わりに二重大括弧で囲わなくては なりません（上例参照） LYX の翻訳機構では、メッセージの終わりに二 。 重大括弧で囲われているものはすべて、メッセージを表示する前に取り 去るようにされています。

412

説明書を翻訳する

（Help メニュー中の）オンライン説明書は翻訳することができます（そ して翻訳されるべきです！） 。説明書の翻訳版が利用可能であり3 、ロケー ルがその言語に設定されている場合、LYX はこれを自動的に使用します。 LYX は、翻訳版を LyXDir/doc/xx/DocNamelyx（xx は現在使用してい る言語コード）で探します。翻訳文書がない場合には、既定の英語版が表 示されます。翻訳版は、原典と同じファイル名（上述の DocName）を持っ ていなくてはならないことに注意してください。説明書を翻訳する気が おありであれば（これは原典の校正としてもたいへん役立ちます！） 、以 下のような点をすぐに行うべきです。
2008 年 3 月現在、説明書の少なくとも一部が翻訳されている言語は 14 言語に上り、 入門編が訳されているものはさらにいくつかあります。
第 4 章 LYX の各国語対応

• 説明書翻訳ウェブページ http://wwwlyxorg/Translation を確認し てください。ここで、どの文書が（もしあれば）お使いの言語に既に 翻訳されているかを見つけることができます。また、説明書をお使 いの言語に翻訳する作業の面倒を見ている人を（もしいれば）見つ けることができます。この作業の面倒を見ている人がいない場合に は、私たちにあなたが興味をお持ちであることを知らせてください。
いったん実際の翻訳の仕事に取りかかったならば、トラブルを回避する いくつかのヒントがあります。

• 文書化チームに所属してください そのための情報が Introlyx（ヘ ！ ルプ ◃ はじめの一歩）にあります。また、この Introlyx が最初に 訳すべき文書です。 • 翻訳しようとする言語での印刷慣行を学んでください。活版印刷は 古来の技術であり、何世紀にもわたって世界の至る所で、様々な慣 行を発達させてきました。また、あなたの国で活版工が用いる専門 用語も学んでください。自分で勝手な専門用語を捻出するとユーザ を混乱させるだけです。 （警告！活版技術は病みつきになる可能性 があるので注意してくさい！） • 文書のコピーをとってください。これを作業用コピーとします。こ れをお使いの UserDir/doc/xx/ディレクトリにコピーすれば、個人 用の翻訳ヘルプファイルとして使用することができます。 • （LYX チームが維持している）原典の説明書は、時折更新されま す。変更点については、http://wwwlyxorg/trac/timeline のソース ビューアでご覧ください。この方法で、翻訳文書のどの部分を更新 しなくてはならないか、たやすく見つけることができます。
もし原典に誤りを見つけたならば、修正して文書化チームの他のメンバー に変更したことを知らせてください（文書化チームに参加することをお 忘れになっていませんよね） 。
国際キー配列

以下の 2 節では、kmap およびcdef ファイルの文法を詳細に解説しま す。これらの節は、提供されているキー配列があなたのニーズに合わな い場合に、自身用のキー配列をデザインする手助けとなるでしょう。ファイル

kmap ファイルは、打鍵したものを文字や文字列に割り当てます。名前 が示唆するように、これはキーボード配列表を定義します。kmap ファイ ルは、以下の各項で説明するように、kmap・kmod・ksmod・kcomb のキー ワードを定義します。 kmap 文字を文字列に割り当てる \kmap 文字 文字列
これは、文字を文字列に割り当てます。文字列中では、二重引用符（"） とバックスラッシュ \）は、前にバックスラッシュ \）を付けてエスケー （ （ プしなくてはならないことに注意してください。 &を打鍵すると/記号が出力される kmap ステートメントを、一例とし てあげると、

\kmap & /
のようになります。 kmod アクセント文字を指定する

\kmod 文字 アクセント 許可文字
これは文字を許可文字のアクセントとするものです。これはデッドキー4 機 構です。 文字を打鍵してから許可文字にないキーを打鍵すると、文字の後に許 可文字ではないその文字が出力として表示されます。Backspace はデッド キーを取り消しますので、文字→ Backspace と打鍵すると、カーソルは一 文字戻ることなく、文字が次の打鍵したものに及ぼしたはずの効力を取 り消します。 以下の例は、’ 文字を acute アクセントとして、a・e・i・o・u・A・E・ I・O・U の文字に許可するものです。

\kmod ’ acute aeiouAEIOU ksmod アクセント文字に例外を指定する
デッドキーという用語は、それ自身で文字を出力しないけれども、別のキーを続け て打つと、望んだアクセント文字を出力するキーのことを指し示します。たとえば、独 語でä のようなウムラウトのついた文字は、このようにして出すことができます。
4

20 \kxmod
アクセント 文字 結果

第 4 章 LYX の各国語対応

これは文字上のアクセントについて例外を指定するものです。ここでア クセントには、前出の\kmod 宣言で打鍵キーを既に割り当てられてなく てはならず、文字はアクセントの許可文字の集合に属していてはなりま せん。こうしてアクセント→文字の順に入力すると、結果が出力される ようになります。kmap ファイルにこの宣言がない場合には、アクセン ト→文字と入力すると、アクセントキー→文字（アクセントキーは\kmod 宣言の最初の変数）と出力されます。 以下のコマンドを用いると、acute-i（’i）と入力した場合、äi と出力さ れるようになります。

\kxmod acute i "\\’{\\i}" kcomb 2 つのアクセント文字を結合する \kcomb アクセント 1 アクセント 2 許可文字
これはなかなか難解になってきます。これはアクセント 1 とアクセント 2 を（この順番で）結びつけて、許可文字に効果を及ぼすようにします。 アクセント 1 とアクセント 2 の打鍵キーは、ファイル内のこのコマンド よりも前に、\kmod コマンドで設定されていなくてはなりません。 greekkmap ファイル上にある例をとってみましょう。

\kmod ; acute aeioyvhAEIOYVH \kmod : umlaut iyIY \kcomb acute umlaut iy
これは;:i を押すと\’{\"{i}}という効果を得るようにするものです。この 場合のバックスペースは、最後のデッドキーを取り消すので、;: Backspace i と押した場合には、\’{i}となります。
ファイル

kmap による割り当てが行われた後、cdef ファイルは、記号の作り出 す文字列を現在のフォントの文字に割り当てます。LYX 頒布版には、現在 のところ、少なくとも iso8859-1cdef ファイルと iso8859-2cdef ファ イルが含まれています。 一般的にcdef ファイルは、

42 国際キー配列
セット中の文字番号 文字列
という形の宣言の羅列です。たとえば、\’{e}を iso-8859-1 セットの対応 する文字 (233) に割り当てるには、以下の宣言を用います。

233 "\\’{e}"
ここで、文字列中の\と"はエスケープされています。同一の文字を二つ以 上の文字列に充てることができることに注意してください。 iso-8859-7cdef ファイルには、

192 "\\’{\\\"{i}}" 192 "\\\"{\\’{i}}"
という例があります。LYX は、キー打鍵やデッドキーの組み合わせで生 成される文字列の割り当てを見つけることができないとき、それがアク セント付き文字のように解釈ができないかどうかチェ ックして、画面上の 文字にアクセントを引くことを試みます。

423

デッドキー

国際文字のサポートを追加する第 2 の方法として、いわゆるデッドキー による方法があります。デッドキーは文字と一緒に用いて、アクセント 付き文字を生成します。ここではその機能を説明するために、きわめて 単純なデッドキーの作り方を説明します。 仮に、曲折アクセント記号「ˆ」が必要になったものとしましょう。こ の場合、自身の lyxrc ファイル中で、^キー（すなわち Shift-6 キー）を、 LYX コマンドの accent-circumflex に結びつけることができます。する と^キーの後に文字を打ったときはいつでも、この文字上に曲折アクセン トが付けられるようになります。たとえば「^e」という打鍵順は「ê」と いう文字を生成します。しかしながら、もし「^t」と打鍵したならば、 t」 「 は曲折アクセントをとることは決してないために、LYX はビープを鳴ら して文句を付けます。デッドキーの後にスペースを打つと、アクセント だけが生成されます。この最後の点に注意してください。あるキーをデッ ドキーに割り当てる場合には、このキー上の文字を別のキーに割り当て 直す必要があります。たとえば、, キーをセディーユに割り当てるのはよ

22

第 4 章 LYX の各国語対応

くありません。コンマを入力しようとすると必ずセディーユが出てくる ようになるためです。 デッドキーを割り当てるのによく用いられる方法は、Meta-・Ctrl-・Shiftキーを、 ~」 ,」 ^」のようなアクセントと一緒に用いる方法です。ま 「 ・ ・ 「 「 た、xmodmap や xkeycaps を使って、特別な Mode_Switch キーを設定す る方法もあります。Mode_Switch キーは、ちょうど Shift キーのように機 能するので、アクセント文字を割り当てるのに使用できます。また、特 定のキーを usldead_cedilla などに割り当てることで、これらのキーを デッドキーに仕立て、このシンボリックキーを対応する LYX コマンドに 割り当てることもできます5 。この Mode_Switch キーには、Ctrl-キーの片 方や使われていないファンクションキーなど、ほぼ何でも指定すること ができます。アクセントを生み出す LYX コマンドについては、LYX 関数 説明書の LFUN_ACCENT_*の項をご覧ください。ここには完備した一覧が あります。

424

自分の言語設定を保存する

ツール ◃ 設定ダイアログを使えば、LYX を起動したときに、ご希望の 言語環境に自動的に設定されるように、設定を編集することができます。

John Weiss からの註：これはまさに私が、自分の~/lyx/lyxrc と~/xmodmap で行っていることです。私は、Scroll Lock キーを Mode_Shift に仕立てて、多数の usldead_*シンボリックキーを Scroll Lock-^や Scroll Lock-~などに割り当てています。 私はこの方法でアクセント文字を入力しています。

5

23

第 5 章 文書クラスやレイアウト やひな型を新規に導入 する
この章では、新しく LYX のレイアウトファイルやひな型ファイルを作 A 成して、導入する手順を説明すると共に、新規に L TEX 文書クラス（ド キュメントクラス）を正しく導入する方法を復習します。 A まず、LYX と L TEX の間の関係をどのように考えるべきか、若干の注 釈を加えておくことにしましょう。理解していただきたいことは、ある意 A 味において、LYX は、L TEX について何も知らないと云うことです。実際 A のところ、LYX の観点からは、L TEX は、LYX が出力を生成することがで きる、複数の「バックエンド書式」のうちの一つに過ぎないということ です。同種のバックエンド書式には、DocBook・平文・XHTML がありま A A す。もちろん L TEX は、とくに重要な書式ですが、LYX が L TEX につい て持っている情報のほとんどは、実はプログラム本体には含まれていな いのです1 。このような情報は、articlecls のような標準クラスでも、 「レイアウトファイル」に保管されています。同様に、LYX は、DocBook や XHTML についてもほとんど知りません。LYX が知っていることは、 レイアウトファイルの中にあります。 文書クラス用のレイアウトファイルは、LYX 構成体—対応する様式や何 A らかの差込枠などを有する段落群—と、 それに対応する L TEX 構成体 Doc・ Book 構成体・XHTML 構成体との間の翻訳指南書のようなものです。た とえば、LYX が articlecls について知っていることのほとんど総ては、 articlelayout と、 それが呼び出す他の様々なファイルに書き込まれてい ます。このことから、レイアウトファイルを書こうとする人は、既存のファ イルを研究することを勧めます。とっかかりとしては、articlelayout
過度に複雑なため、LYX に「ハードコード化」されているコマンドもありますが、 一般的に開発者は、これを「わるいこと」とみなしています。
1

24

第 5 章 文書クラスを新規に導入する

や booklayout や、文書クラス用の他のレイアウトファイルに取り込ま れている stdsectionsinc から見始めるのがよいでしょう。このファイ ルは、節などの定義が為されている場所です。stdsectionsinc は、節 A 様式や小節様式などとしてマークされている段落を、対応する L TEX・ DocBook・XHTML のコマンドやタグにどのように翻訳すべきかを LYX に知らせるものです。基本的に articlelayout ファイルは、これらの std*inc ファイルを取り込んでいるだけのものです。 A しかしながら、LYX–L TEX 間の対応を定義するだけが、レイアウトファ イルが行うことではありません。レイアウトファイルが行うもう一つの 仕事は、LYX 構成体自身が画面上にどのように表示されるべきかを定義 することです。この 2 つの仕事は全く独立したものであるので、レイア ウトファイルが 2 つの仕事を行うという事実は、しばしば混乱を引き起 A こす元となります。ある段落様式を L TEX に翻訳する仕方を LYX に指示 することは、その表示の仕方を LYX に指示するものではありません。逆 に、ある段落様式の表示の仕方を LYX に指示することは、その段落様式 A をどのように L TEX に翻訳するかを LYX に指示するものではありません A （ましてや L TEX に表示の仕方を指示するものではありません） 。つまり、 A X にどのように 一般的に、新しい LYX 構成体を定義する際には、(i) L TE 翻訳するかを LYX に指示する、(ii) それをどのように表示するかを LYX に指示する、という、二つのかなり異なることを行わなくてはならない のです。 もちろん、LYX の他のバックエンド書式に関しても、ほぼ同じことが 言えますが、XHTML の場合には若干事情が異なり、LYX が、ブラウザ 中での段落の表示方法を（CSS の形で）出力するにあたって、当該段落 を LYX が画面上に出力する仕方の情報を、ある程度利用することができ ます。しかし、この場合でも、LYX が内部的に行うことと、外部的に行 う物事の間の区別は、依然として有効であり、この 2 つは独立して制御 することができます。詳細に関しては、第 54 節をご覧ください。

51

A 新しい L TEX ファイルの導入

A 頒布版によっては、LYX で使いたい L TEX パッケージやクラスファイル が含まれていないことがあるかもしれません。たとえば、オーバーヘッド プロジェクタ用のスライドを準備するためのパッケージである、FoilTEX がないかもしれません。TEXLive（2008 年以降）や MiKTEX のような最

A 51 新しい L TEX ファイルの導入

25

A 近の L TEX 頒布版には、これらのパッケージを導入するためのユーザー インタフェースが用意されています。たとえば、MiKTEX では、付属の 「Browse Packages」プログラムを起動すると、利用できるパッケージの 一覧を得ることができます。どれかを導入するには、その上で右クリック するかツールバーボタンを押してください。 A お使いの L TEX 頒布版が、これらの「パッケージマネージャ」を提供 していなかったり、頒布版にそのファイルが入っていなかったりした場合 には、以下の手順に従って手動で導入するとことができます。

1 CTAN などから欲しいパッケージを入手してください。 2 このパッケージは、いくつかの場所に置くことができます。このパッ ケージを、お使いのシステム上の全ユーザに使用できるようにする ためには、これをその「ローカル」TEX ツリーにインストールしな くてはなりません。逆に、あなた個人だけで使いたい（あるいはその 必要がある）場合には、これをあなたの「ユーザ」TEX ツリーにイン ストールすると良いでしょう。これらが既に存在しない場合に、どこ にこれらを作ればよいかは、お使いのシステムの子細に依存します。 これらをどこに作ればよいかを調べるには、texmfcnf2 ファイルを 見ると良いでしょう。 「ローカル」TEX ツリーの場所は TEXMFLOCAL 変数で定義されていて、通常は /usr/local/share/texmf/ のよう な場所になっています。 「ユーザ」TEX ツリーは TEXMFHOME で定義 されており、多くは$HOME/texmf/になっています（もしこれらの変 数が既に定義されていなければ、新たに定義することができます） 。 「ローカル」ツリーを作成したり修正したりするためには、おそら く root 権限が必要ですが、 「ユーザ」ツリーの場合にはそのような 制限はないはずです。 3 TEXMF 変数に TEXMFLOCAL 変数と TEXMFHOME 変数が含まれているこ とを確認してください。たとえば、 TEXMF = {$TEXMFHOME,!!$TEXMFLOCAL,!!$TEXMFMAIN} のようになります。ほとんどの場合はこうなっているはずです。 4 ローカルツリーとユーザーツリーは、TEXMFMAIN に指定されている、 既存の texmf ディレクトリ （通常は/usr/share/texmf/） のディレク
これは通常$TEXMF/web2c にありますが、kpsewhich texmfcnf を実行すれば、ど こにあるかががわかります。
2

26

第 5 章 文書クラスを新規に導入する
A トリ構造と同様になっていなくてはなりません。たとえば、L TEX パ ッケージは、 $TEXMFLOCAL/tex/latex/か$TEXMFHOME/tex/latex/以 下に入らなくてはなりません。パッケージをここに置かない場合に は、おそらく機能しません。

5 ツリーが適切に設定されたならば、パッケージを適切な場所に導入 することができます。幸運ならば、導入しようとしているパッケー ジが、いわゆる「TDS」 TEX Directory Structure）zip ファイルと （ して提供されているかもしれません。これを導入するには、ツリー の最上層で解凍すれば結構です。たとえば、newpkgzip ファイルを /home/yourname/texmf にコピーし、このディレクトリの中から、 unzip newpkgzip を実行するだけです。これによって、必要なファ イルが抽出され、必要な場所にコピーされます。 TDS ファイルになっていない場合には、手動でこれを行わなくては なりません。たとえば、FoilTEX のファイルを $TEXMFLOCAL/tex/ latex/foiltex に導入するものとしましょう。どうしてここなので しょうか。 CTAN ダウンロードディレクトリは、 それ自身 TEX ツリー と同様に構成されているので、自身で導入を行う際にその構造に従 うことは、悪い考えではありません。たとえば、FoilTEX は http:// ctanorg/texarchive/macros/latex/contrib/foiltex/ にありま す。 6 最後に、TEX がファイルを発見するのに使用するデータベースを更 新しなくてはなりません。MiKTEX では、MiKTEX の「Setings」プ ログラムにある Refresh FNDB ボタンを押すことで、これを行うこ とができます。TEXLive などでは、必要に応じて root 権限で、端末 から texhash を実行してください。
A これでパッケージが導入され、L TEX に利用可能となります。これは、端 末から「kpsewhich yourfileext のように打ち込むことで確認するこ とができます。LYX にこれを認識させるためには、再設定をして（ツー ル ◃ 再設定）LYX を再起動する必要があります。もし新規パッケージが、 FoilTEX の場合のように文書クラスであるならば、文書 ◃ 設定 ◃ 文書クラ スで、この場合には slides (FoilTeX) が利用可能となって見えるはずです。 新しい文書クラスのレイアウトファイルが利用可能でない場合にはど うなるでしょうか。この場合には、残念ながら、あなたが自身でレイアウ トファイルを作成しない限り（あるいは他の人に作成してもらわない限

52 レイアウトファイルの型

27

り）は、LYX はこの文書クラスについて何も知ることができません。こ れが次節の話題です。

52

レイアウトファイルの型

この節は、レイアウト情報を含む各種 LYX ファイルについて述べます。 これらのファイルは、各種段落様式や文字様式についての記述がされて いるものであり、LYX がそれらをどのように表示すべきなのか、また、そ A れらをどのように L TEX や DocBook、XHTML その他の出力書式に翻訳 すればよいのかが記されています。 ここでは、レイアウトファイル作成過程の包括的な解説を試みたいと A 思いますが、L TEX クラスだけでもサポートする文書の種類があまりにた くさんあるので、読者が出会いうるケースや問題をすべてカバーするこ とはとても望めません。LYX ユーザーメーリングリストには、自身の経 験を人々と分かち合いたいと望む、レイアウトデザインの経験豊かな人々 がよく顔を出していますので、気軽に質問を投げかけてみてください。 新しいレイアウトを準備するに当たっては、LYX と共に頒布されてい るレイアウトの例を見るのがたいへん役立ちます。他の人々も使用でき A る L TEX 文書クラス用の LYX レイアウトを作ったり、他の人々にも有用 なモジュールをお書きになった場合には、LyX Wiki のレイアウトに関す る節か、LYX 開発者メーリングリストに投稿して、LYX 頒布版に同梱す ることができるようにしてください3 。

521

レイアウトモジュール

ここまで、 「レイアウトファイル」についてお話してきました。しかし、 レイアウト情報を含むものには、他の種類のファイルもあります。厳密に レイアウトファイルと呼ぶとき、それはlayout 拡張子を持ち、文書クラ スに関する情報を LYX に提供するものを指します。しかしながら、LYX 16 以降、レイアウト情報は、拡張子がmodule のレイアウトモジュールに A も含めることができます。レイアウトが L TEX クラスに対応しているよ A うに、モジュールは L TEX パッケージに対応するものであり、endnotes モジュールのように、特定のパッケージにサポートを提供するためのモ
LYX は General Public License の下でライセンスされていますので、LYX に寄贈さ れたものは総て同じライセンス下に置かれることに注意してください。
第 5 章 文書クラスを新規に導入する

ジュールもあります。レイアウトモジュールは、特定の文書レイアウト に特化したものではなく、多くのレイアウトで使用できるという意味に おいて、一面、stdsectionsinc 等のインクルードファイル4 のようなも のです。相異なる点といえば、articlecls でインクルードファイルを 使用するには、そのファイルを編集しなくてはなりませんが、モジュー ルの場合は、文書 ◃ 設定ダイアログで選択するだけですみます。 モジュール作成は、新しく段落様式を一つ加えたり、任意設定差込枠 を加えたりするだけで済むことも多いので、レイアウト編集を学ぶ上で もっとも易しい方法です。しかし原理的には、レイアウトファイルに入 れることのできるものはすべて入れることができます。 新しいモジュールを作成し、それを layout/フォルダにコピーした後、 モジュールがメニューに現れるようにするためには、LYX の再設定を行っ て再起動しなくてはなりません。しかしながら、モジュールの修正の場 合には、文書 ◃ 設定を開いてどれかを選択し「OK」を押せば、直ちに反 映されます。これを実行する前に、作業中の文書を保存しておくことを 強く勧めます。もっと言えば、実際の文書で作業しているときに、同時 にモジュールの編集をしようとしないことを強く勧めます。もちろん開 発陣は、そのような場合でも LYX が安定性を維持するように努力してい ますが、あなたが作成したモジュール中の文法エラー等によって、奇妙 な挙動が引き起こされることがあるからです。

522

sty ファイル用のレイアウト

A A 新しく L TEX 文書クラスをサポートしようとするとき、L TEX 2ε クラス （cls）ファイルが絡む場合と、スタイル（sty）ファイルが絡む場合の 2 つの状況があり得ます。スタイルファイルのサポートは、通常は、かな り容易ですが、新しくクラスファイルをサポートすることは、もう少し 難しくなります。この節では、前者について述べることとし、後者につ いては次節に譲ります。当然のことながら、新しく DocBook DTD をサ ポートしたい場合にも、同様の所見が当てはまります。 この易しい方の場合では、新しい文書クラスは、既にサポートされて いる文書クラスと共に使うスタイルファイルとして提供されています。例 示のために、スタイルファイルは myclasssty という名称で、標準的なク

これらは任意の拡張子をつけることができますが、慣習的にinc 拡張子が用いら れます。

4

52 レイアウトファイルの型

29

ラスである reportcls と共に用いられるものと仮定しましょう。 既存の文書クラスのレイアウトファイルを、以下のように、お使いの ローカルディレクトリにコピーすることから始めてください5 。

cp reportlayout ~/lyx/layouts/myclasslayout
それから、myclasslayout を編集して、

\DeclareLaTeXClass{report}
という行を

\DeclareLaTeXClass[report, myclasssty]{report (myclass)}
のように変更してください。それから、ファイル冒頭辺りに

Preamble \usepackage{myclass} EndPreamble
と書き加えてください。 LYX を起動してツール ◃ 再設定を選択してください。それから LYX を 再起動し、新規文書を作成してみてください。すると、文書 ◃ 設定ダイア ログの文書クラスオプションに「report (myclass)」が現れるはずです。新 しいクラスにおいて、節区切り用コマンドなどの一部が、基礎となった クラス—この例では report—とは違う挙動をすることはよくありますの で、希望に応じて、各節の設定をいじると良いでしょう。各節のレイア ウト情報は、stdsectionsinc に含まれていますが、このファイルをコ ピーしたり変更したりする必要はありません。代わりに、自身のレイア ウトファイル中、stdsectionsinc も取り込む Input stdclassinc の 後に変更を加えるだけです。たとえば、章見だしのフォントをサンセリ フ体に変更するには、以下のような行を加えます。

もちろん、どのディレクトリがローカルディレクトリとなるかは、プラットフォー ムに依存します。LYX では、起動時に-userdir オプションを指定することによって、ロー カルディレクトリを指定することも可能です。

5

30 Style Chapter Font Family Sans EndFont End

第 5 章 文書クラスを新規に導入する

これは、既存の章様式宣言を上書き（あるいはこの場合には追加）します。 新しいパッケージでは、基礎となったクラスには存在しないコマンド や環境を提供することもできます。この場合には、これらをレイアウト ファイルに加えます。そのやり方については、第 53 節の情報を参照して ください。 もし myclasssty が他の文書クラスで使用することができたり、ある いはできない場合でも、基礎となるクラスから読み込むことのできるモ ジュールを書くのが最も簡単であることがわかるでしょう。最も簡単な モジュールの例としては、以下のようなものになります。

#\DeclareLYXModule{My Package} #DescriptionBegin #Support for mypkgsty #DescriptionEnd Format 21 Preamble \usepackage{mypkg} EndPreamble
もう少し複雑なモジュールでは、既存の構成物の挙動を修正したり、新 しい構成物を定義したりすることになるでしょう。この辺りの議論につ いては、第 53 節を参照してください。

523

cls ファイル用のレイアウト

これには 2 つのケースがありえます。ひとつは、クラスファイル自体が 既存の文書クラスに立脚している場合です。たとえば、多くの学位論文 用クラスは bookcls に基づいています。お使いのものがどうであるかを見 るには、クラスファイル中に

\LoadClass{book}

52 レイアウトファイルの型

31

A という行がないかどうか探してください。 もしこれがあれば、 DeclareLTEXClass 行は異なりますが、おおよそ前節のように進めることができます。あな たが新しく作るクラスが thesis であり、book クラスに基づいていれば、 A DeclareLTEXClass 行は以下のようにします6 。

\DeclareLaTeXClass[thesis,book]{thesis}
他方、新しいクラスが既存のクラスに基づいていない場合には、おそら くあなた自身のレイアウトをしたためる必要があります。もし可能であ A れば、類似した L TEX クラスを使用している既存のレイアウトファイル をコピーして、それに修正を加えるようにすることを強くお勧めします。 少なくとも、どの項目を考慮すべきかがわかるように、既存のファイル を作業の開始点としてください。

524

ひな型を作成する

新しい文書クラス用のレイアウトファイルを書いたならば、そのレイ アウト用のひな型も書くことを検討されるかもしれません。ひな型は、内 容はダミーですが、レイアウトの使い方を示す一種のチュートリアルと して動作します。もちろん、イメージを得るために、LYX 添付のひな型 をあれこれ見てみるのもよいでしょう。 ひな型は、通常の文書と同様、LYX を使って作成することができます。 唯一違う点は、通常の文書では、フォント構成や用紙寸法を含め、すべて のあり得る設定が為されている点です。これらの場合、通常ユーザーはひ な型が彼の設定値を上書きすることを望みません。この理由から、ひな 型の設計者は、\fontscheme や\papersize などの対応するコマンドをひ な型 LYX ファイルから取り除く必要があります。これは、たとえば vi や notepad のような、どの軽いテキストエディタでも行うことができます。 編集したひな型を UserDir/templates/に置き、グローバルなひな型 ディレクトリ LYXDir/templates/から使用したいものを同じ場所にコピー し、ツール ◃ 設定 ◃ パスダイアログのひな型パスを再定義してください。 ところで、特別な意味を持つひな型 defaultslyx があることに注意 してください。このひな型は、ファイル ◃ 新規を使って新規文書を作成す る際、便利な既定値を提供する目的で必ず読み込まれます。このひな型
さらに LYX は、文書クラス名がレイアウトファイル名と同じだと仮定するので、ク ラスファイルを thesislayout という名前で保存するのが最も簡単です。
6

32

第 5 章 文書クラスを新規に導入する

を LYX 内部から作成するのにしなくてはならないことは、対応する設定 を持つ文書を開き、文書既定値として保存ボタンを押すことです。

525

旧レイアウトファイルの更新

レイアウトファイルの書式は、 YX のリリース毎に変更されますので、 L 古 いレイアウトファイルは変換されなくてはなりません。 この過程は、 YX 第 L 14 版から自動化されました。LYX が古い書式のレイアウトファイルを読み 込むと、 YX は、 L 自動的に変換ツール LYXDir/scripts/layout2layoutpy を呼び出し、それを現在の書式の一時ファイルに変換します。元のファ イルは変更を加えられずに措かれます。もしこのレイアウトファイルを よく使うならば、LYX がこれを毎回行なわくて済むように、レイアウト ファイルを恒久的に変換しておきたいと思うかもしれません。これを行 うには、以下のように変換子を手動で呼び出してください。

mv myclasslayout myclassold python LYXDir/scripts/layout2layoutpy myclassold myclassnewlayout
もちろん、LYXDir は、お使いの LYX システムディレクトリ名に置き換え てください。 手動変換は、インクルードされているファイル内部の変更までは取り 扱いませんので、それらのファイルは別に変換されなくてはなりません。

53

レイアウトファイルの書式

以下の各節では、いよいよ自分の手を汚してレイアウトファイルを作成 したり編集したりする段階になった際、直面することの説明を行います。 私たちからのアドバイスとしては、ゆっくりと進めるようにして、ちょ っ と進むごとに保存やテストを行い、心休まる音楽を聴き、好きな大人の 飲み物を一二杯口にしながら行うのがいいでしょう。特に行き詰まって しまったときにはそうです。実際にはそんなに難しいことではないので すが、特に一度に多くのことをやろうとすると、選択肢が多くありすぎ て圧倒されてしまうのです。さて、もう一杯大人向け飲料をどうぞ。適 量ね。 この章で述べられているタグは、すべて大文字小文字を区別しません。 つまり、Style・style・StYlE は同じコマンドとなります。機能名の後

53 レイアウトファイルの書式

33

にある角括弧は、その機能が取り得る値を示します。テキストクラス設 定内で機能が特定されていない場合には、既定値は強調で表記されます。 引数が「文字列」や「浮動小数点型」などのデータ型をとる場合には、既 定値は浮動小数点型=既定値のように表示されます。

531

文書クラス宣言

レイアウトファイル中の#で始まる行はコメントです。この規則には一 つだけ例外があります。すべての*layout ファイルは、以下のような行 で始めなくてはならないのです。

#% Do not delete the line below; configure depends on this # \DeclareLaTeXClass{article}

この 2 行目は、LYX を初期設定や (再) 設定するときに用いられるのです。 A このレイアウトファイルは、L TEX スクリプト chkconfigltx が、#を無 A 視する特別なモードで読み込みます。1 行目は単なる L TEX コメントで すが、2 行目にはテキストクラスの宣言が書かれています。これらの行が articlelayout と名付けられたファイルにあると、article（レイアウ A トファイル名）という名称のテキストクラスを定義し、L TEX 文書クラ ス articlecls を使用するようになります（既定ではレイアウトと同じ 名称のものを使用します） 。上記に現れる「article」という文字列は、文 書 ◃ 設定ダイアログのテキストクラスの説明に使用されます。 節見出し表示に変更を加えた、articlecls 文書クラスを使用するテキ ストクラスを自分で書いたものとしましょう。これを myarticlelayout というファイルに置いたとすると、このファイルのヘッダは以下のよう になります。

#% Do not delete the line below; configure depends on this # \DeclareLaTeXClass[article]{article (with my own headings)}
A これは、L TEX 文書クラス articlecls に関連づけられ、 article (with 「 my own headings)」と表示される、myarticle テキストクラスを宣言す るものです。もしこのテキストクラスが複数のパッケージに依存するな らば、以下のように宣言すると良いでしょう。

34

第 5 章 文書クラスを新規に導入する

#% Do not delete the line below; configure depends on this # \DeclareLaTeXClass[article,foosty]{article (with my own headings)}

これは、このテキストクラスが foosty パッケージを使用することを示 しています。最後に、DocBook コード向けのクラスを宣言することもで きることを見ます。典型的な宣言は以下のようになります。

#% Do not delete the line below; configure depends on this # \DeclareDocBookClass[article]{SGML (DocBook article)}

これらの宣言には、文書クラス名を宣言する非必須パラメータ（ただし リストではない）を与えることができることに注意してください。 できる限り明示的に要約すると、レイアウト宣言は以下の形をとります。
# \DeclareLaTeXClass[クラス, パッケージ名sty]{レイアウト の説明}
A ここで「クラス」は、L TEX クラスファイル名とレイアウトファイル名が 異なるときのみ、指定する必要があります。クラスファイル名が指定さ れなければ、LYX は単純に、クラスファイル名がレイアウトファイル名 と同じであると仮定します。 テキストクラスがあなたの嗜好に合うように修正できたならば、他にし なくてはならないことは、それを LyXDir/layouts/か UserDir/layouts にコピーし、ツール ◃ 再初期設定を実行し、LYX を終了して再起動する だけです。そうすれば、この新しいテキストクラスが、他のテキストク ラスと同様に使用できるようになります。 レイアウトファイルが導入されたならば、これを編集して、再初期設 定したり LYX を再起動したりすることなく、その変更を確認することが できます7 。LYX 関数 layout-reload を使用すれば、現在使っているレイア ウトの再読み込みを強制することができるのです。この関数への既定の キー割り当てはありません—もちろん自分でどれかのキーに割り当てる こともできますが—。しかし、通常は、この関数を使用する場合は、こ れをミニバッファに入力します。

第 16 版よりも前の LYX では、これを行うことはできませんでした。その結果、レ イアウトファイルに加えた変更を反映させるには、その度に LYX を再起動しなくては ならなかったので、レイアウトファイルを編集する作業は、たいへん時間を浪費する作 業だったのです。

7

53 レイアウトファイルの書式

35

注意：layout-reload はかなり「高度な機能」です。この機能を利用する 前に、作業中の文書を保存しておくことを強く勧めます。もっと言えば、 大事な文書の作業をしているときに、同時にレイアウト情報の編集をし ようとしないことを強く勧めます。テスト用文書を使用してください。レ イアウトファイル中の文法エラー等が奇妙な挙動を引き起こす可能性が あります。特に、そのようなエラーが起こると、LYX は現在のレイアウ トが無効であるものと判断して、別のレイアウトに切り替えようとする 可能性があります8 。LYX 開発陣は、このような状況下でも安定性を保つ よう努力していますが、後悔よりも安心の方が良いでしょう9 。

532

モジュール宣言

モジュールは、以下のような行で始まらなくてはなりません。

#\DeclareLyXModule[endnotessty]{Endnotes}
波括弧内に入っている必須引数はモジュール名で、これは文書 ◃ 設定内に 表示されます。角括弧内の引数は非必須です。これは、モジュールが依存 A する L TEX パッケージをすべて宣言します。角括弧の中には、LYX にとっ て既知のパッケージだけしか、列挙することはできないことに注意して ください。10 LYX は、任意のパッケージをチェ ックすることはしません。 また、非必須引数として、変換元-&gt;変換先の形を使用することができま す。これは、変換元書式から変換先書式への変換鎖が存在するときのみ、 このモジュールを使用できることを宣言するものです。 それから、以下のようなモジュール宣言を行います。

#DescriptionBegin #Adds an endnote command, in addition to footnotes #You will need to add \theendnotes in TeX code where you #want the endnotes to appear #DescriptionEnd
非常に悪質な文法エラーの場合には、LYX が終了してしまうことさえあります。こ れは、ある種のエラーでは、LYX がレイアウト情報を全く読めなくなる可能性があるか らです。ご注意ください。 9 重ねての助言ですが、つねにバックアップを取ってください。それから、お母さん のお片づけに注意。 10 既知のパッケージのリストは、ソースコード中でしか、ドキュメント化されていま せん。
8

36

第 5 章 文書クラスを新規に導入する

#Requires: somemodule | othermodule #Excludes: badmodule
ここで説明（Description）は、文書 ◃ 設定でこのモジュールが何をするも のか、ユーザに情報を与えるために使用されます。Requires 行は、この モジュールが共に使用する必要がある、他のモジュールを特定するのに 用いられます。一方、Excludes 行は、このモジュールが共に使用しては ならない、他のモジュールを特定するのに用いられます。この 2 つの行は 必須ではなく、上記のようにモジュールが複数ある場合には、パイプ記 号「|」で区切らなくてはなりません。Requires に指定されたモジュール は、選言的に取り扱われることに注意してください。つまり、Requires に指定されたモジュールのうち、少なくとも一つが使用されていればよ いということです。同様に、Excludes に指定されたモジュールは、一つ も使用されてはなりません。ここでモジュールは、module 拡張子を除い たファイル名で認識されることに注意してください。つまり somemodule とは、実のところ somemodulemodule のことです。

533

ファイル書式

レイアウトファイルやインクルードされたファイル、またはモジュー ルの最初の非コメント行には、以下のように、かならずファイル書式番 号が記されていなくてはなりません。

Format [整数型] このレイアウトファイルの書式
このタグは LYX 140 で導入されました。LYX 13x 以前のレイアウトファ イルには、明示されたファイル書式がないため、書式 1 と解されます。LYX 現行版のファイル書式は、書式 21 です。しかし、LYX の各版は、旧版の LYX で作成されたファイルを読むことができるように、旧版のレイアウ トファイルも読むことができます。しかしながら、以前の書式に変換す る方法はありません。したがって、LYX 16x は、書式 11 以前のファイ ルのみを読むことができますが、書式 21 は読むことができません。

534

汎用テキストクラスパラメータ

以下は、文書クラス全体の挙動を決定する汎用パラメータです（これ は、layout ファイルのみに使用されるべきで、モジュールでは使っては

53 レイアウトファイルの書式

37

ならない、ということを意味するものではありません。モジュールには、 すべてのレイアウトタグを使用することができます） 。

AddToHTMLPreamble この文書クラスが XHTML に出力されるときに、 &lt;head&gt;ブロックに追加出力される情報です。典型的には、これは CSS スタイル情報を出力するのに用いられますが、&lt;head&gt;に出力す るものであれば、何でも使用することができます。 EndPreamble」 「 で閉じる必要があります。 AddToPreamble 文書プリアンブルに書き加えられる情報です。 EndPreamble」 「 で閉じる必要があります。 CiteFormat 書誌情報の表示に使う書式を定義します。詳細については、 第 5312 節をご覧ください。 End」で閉じる必要があります。 「 ClassOptions 文書クラスがサポートする様々な大域オプションを記し ます。説明は、第 535 節を参照してください。 End」で閉じる必 「 要があります。 Columns [1 , 2] 文書クラスが既定で 1 段組か 2 段組かを指定します。文 書 ◃ 設定ダイアログで変更することができます。 Counter [文字列] この部分はカウンタの特性を定義します。カウンタが まだ存在していなければ、生成されます。もし存在しなければ修正 されます。 End」で閉じる必要があります。 「 カウンタについての詳細は、第 5310 節を参照してください。 DefaultFont 文書を表示するのに用いられる既定フォントを設定します。 フォントの宣言の仕方については、第 5311 節を参照してください。 「EndFont」で閉じる必要があります。 DefaultModule [文字列] この文書クラスに、既定で取り込むモジュール を指定します。モジュールは、module 拡張子を除いたファイル名 で指定します。ユーザはこのモジュールを除外することができます が、当初は有効の状態になっています（これは新しいファイルが作 成されたときや、既存の文書にこの文書クラスが選択したときのみ 該当します） 。 DefaultStyle [文字列] これは新規段落に割り当てられる様式であり、通 常は標準です。もしこれを指定しなければ、最初に定義される様式

38

第 5 章 文書クラスを新規に導入する がこれに割り当てられるようにはなっていますが、このディレクティ ブを使用することが推奨されます。

ExcludesModule [文字列] このタグは、指定されたモジュール—module 拡張子を除いたファイル名で指定します—が、この文書クラスでは 使用できないように設定します。これはたとえば、特定の学術誌用 レイアウトファイルの中で、定理番号を節毎に振る theorems-sec モジュールが使用されるのを防ぐために用いたりすることができま す。このタグは、モジュール内で使用してはいけません。モジュー ルは、他のモジュールを排除する独自の枠組みがあります（第 521 節参照） 。 Float フロートを新規に定義します。詳細は、第 538 節を参照してくだ さい。 End」で閉じる必要があります。 「 HTMLPreamble この文書クラスが XHTML に出力されるときに、 &lt;head&gt;ブ ロックに出力される情報です。これより前に出現した HTMLPreamble や AddToHTMLPreamble 宣言は、すべて完全に上書きされることに注 意してください。 （プリアンブルに何かを追加したい時には、 AddToHTMLPreamble を使用してください。 「EndPreamble」で閉じる必要があります。 ） HTMLTOCSection [文字列] 文書が HTML に出力されるときに、目次や書 誌情報などに使用されるレイアウトです。article の場合には、これ は通常「節」であり、book の場合は「章」です。これを指定しない 場合には、LYX はどのレイアウトを使用するべきか、解析しようと 試みます。 IfCounter [文字列] 与えられたカウンタの特性を修正します。カウンタ が存在しない場合には、この節は無視されます。 End」で閉じる必 「 要があります。 カウンタについての詳細は、第 5310 節をご覧ください。 IfStyle [文字列] 与えられた段落様式の特性を修正します。様式が存在 しない場合には、この節は無視されます。 End」で閉じる必要があ 「 ります。 Input 名称の指し示すように、このコマンドは、同じコマンドを何度も 指定せずに済むように、別のレイアウト定義ファイルを取り込ませ

53 レイアウトファイルの書式

39

ます。よく使われる例は、基本的なレイアウトのほとんどを収録し ている stdclassinc のような標準レイアウトファイルです。

InsetLayout このセクションは、差込枠のレイアウトを定義（再定義） します。これは、既存の差込枠にも、新しい文字様式のような新規 のユーザ定義差込枠にも使用することができます。 End」で閉じる 「 必要があります。 詳しい情報は、第 539 節をご覧ください。 LeftMargin 画面上の左余白の幅を指示する文字列。例： MMMMM」 「 。 （これは、 2ex」 「 のような 「長さ」 ではないことに注意してください。 ） NoFloat このコマンドは既存のフロートを削除します。 これは特に、 Input で取り込んだファイルに定義されていたフロートを抑制するのに便 利です。 NoStyle このコマンドは既存の様式を削除します。これは特に、Input で 取り込んだファイルに定義されていた様式を抑制するのに便利です。 OutputFormat このクラスによって生成されるファイル書式を示す文字 列（設定ダイアログで定義される形のもの） 。おもに、OutputType が「literate」になっていて、新しい型の literate 文書を定義したい 時に便利です。対応する OutputType パラメーターに遭遇したとき には、この文字列は、 docbook」「latex」「literate」のいずれか 「 ・ ・ にリセットされます。 OutputType このクラスを使用する文書がどのような種類の出力をするか を示す文字列。現在のところ、取り得る値は「docbook」「latex」 ・ ・ 「literate」です。 PageStyle [plain, empty, headings] 既定ページ様式。文書 ◃ 設定ダイ アログで変更することができます。
A Preamble L TEX 文書のプリアンブルを設定します。前に行った Preamble 宣言や AddToPreamble 宣言は、すべて上書きされてしまうので注意 してください。 （プリアンブルに何かを追加したい時には、 AddToPreamble を使用してください。 「EndPreamble」で閉じる必要があります。 ）

Provides [文字列] [0 , 1] このクラスが文字列で示される機能を既に提 供しているかどうかを示します。機能は、一般的にパッケージ名

40

第 5 章 文書クラスを新規に導入する （amsmath makeidx）やマクロ名（url boldsymbol）です。 ・ ・ ・ ・ サポートされている機能の全覧は、LYX ソースコード以外には残念 A ながら文書化されていませんが、興味があれば LTEXFeaturescpp を A ご覧ください。ヘルプ ◃ LTEX の設定もサポートされているパッケー ジの概要を提供します。

ProvidesModule [文字列] このレイアウトが文字列で表されているモジ ュールの機能を提供することを示し、module 拡張子を除いたファ イル名で指定します。DefaultModule タグを使用すると、モジュー ルを使用しなくてはならないことを示しますが、このタグは主に、 このレイアウトがモジュールを直接取り込んでしまっていることを 示すのに用いられます。同じ機能を別に実装しているモジュール中 で使用するなどすることもできます。 Requires [文字列] このクラスが文字列で表されている機能を要求するこ とを示します。機能が複数ある場合には、コンマで区切らなくては なりません。サポートされている機能以外は要求できないことに注 A 意してください。 （機能一覧については、これも LTEXFeaturescpp をご覧ください。 ） RightMargin 画面上の右余白の幅を指示する文字列。例： MMMMM」 「 。
A SecNumDepth どの節区切りまで連番を振るかを指定します。L TEX にお ける secnumdepth カウンタに対応します。

Sides [1, 2] クラスの既定値として、用紙の片面に印字するか両面に印字 するかを指定します。文書 ◃ 設定ダイアログで変更することができ ます。 Style この部分は段落様式を定義します。様式がまだ存在していなけれ ば、生成されます。既に存在していれば、そのパラメータが修正さ れます。 End」で閉じる必要があります。 「 段落様式に関する詳細は、第 541 節をご覧ください。 TitleLatexName [文字列="maketitle"] TitleLatexType で使用すべき コマンド名あるいは環境名。The name of the command or environment to be used with TitleLatexType

53 レイアウトファイルの書式

41

TitleLatexType [CommandAfter , Environment] 文書のタイトルを定義 するのに、 どのようなマークアップを使用するのかを示します。 CommandAfter は、 InTitle 1」 「 が指定されている最後のレイアウトの後に、 TitleLatexName で指定したマクロ名を挿入することを意味します。Environment は、 「InTitle 1」を持つ段落群を TitleLatexName で指定した環境でく るむ場合に対応します。
A TocDepth どの節区切りまで目次に取り込むかを指定します。L TEX の tocdepth カウンタに対応します。

535

ClassOptions 部

ClassOptions 部は、以下の項目を取り得ます。 FontSize [文字列="10|11|12"] 文書のメインフォントが使用できるフォ ント寸法の一覧です。 |」で区切ります。 「 Header XML ベースの出力クラスで、DTD 行を設定するのに使用されま す。例：PUBLIC “-//OASIS//DTD DocBook V42//EN” PageStyle [文字列="empty|plain|headings|fancy"] 使用できるペー ジ様式の一覧です。 |」で区切ります。 「 Other [文字列=""] \documentclass コマンドの非必須パラメータとして 付け加える文書クラスオプションです。コンマで区切ります。 ClassOptions 部は「End」で閉じる必要があります。

536

段落様式

段落様式の記述は、以下のようになります11 。

Style 名称  End
これは新しいレイアウトを定義するか、既存のレイアウトを修正することになるこ とに注意してください。
11

42

第 5 章 文書クラスを新規に導入する

ここでは、以下のコマンドを使用することができます。

Align [block, left, right, center] 段落の揃え。 AlignPossible [block, left, right, center] 使用できる揃えのコン A マ区切りリスト（L TEX スタイルには、意味を成さない一部の揃え が禁じられているものがあります。たとえば、連番箇条書きを右揃 えや中央揃えにすることはできません） 。 BabelPreamble これは、前に現れたこの様式の BabelPreamble 宣言をす べて、 完全に上書きしますので注意してください。 EndBabelPreamble」 「 で閉じる必要があります。これの利用法についての詳細は、第 537 節をご覧ください。 BottomSep [浮動小数点型=0]12 このレイアウト型の段落塊の最後の段落 と、次の段落とを分離する垂直空白。次の段落が別のレイアウト型 である場合、分離幅は足し上げられるのではなく、最大値がとられ ます。 Category [文字列] この様式のカテゴリです。これは、ツールバーのレイ アウト・コンボボックスで関連した様式をグループ化するのに用い られます。任意の文字列を使用することができますが、作成した様 式に既存のカテゴリを使用したいと思うことが多いでしょう。 CommandDepth XML コマンドの深度。XML 型の書式でのみ使用されま す。 CopyStyle [文字列] 既存の様式から、すべての機能を現在の様式にコピー します。 DependsOn この前にプリアンブルを出力させる様式名。マクロ定義がお 互いに依存関係にある場合に、プリアンブルの断片の順序を確実に するためのものです13 。 EndLabeltype [No_Label, Box, Filled_Box, Static] 段落の最後（あ るいは LatexType が、 Environment Item_Environment List_Environment ・ ・
ここで「浮動小数点型」とは 15 のような実数を指します。 この機能以外には、プリアンブルの順序を確定する方法はないことに注意してくだ さい。LYX の特定のバージョンで観察された順序は、将来のバージョンで警告なしに変 わる可能性があります。
13 12

53 レイアウトファイルの書式

43

のいずれかの場合は、段落群の最後）に置くラベル。No_Label の 場合は「何もない」ことを指し、Box（あるいは Filled_Box）の場 合は、証明終了マーカ用の白い箱型（あるいは黒い箱型）を指し、 Static は明示したテキスト文字列を指します。

EndLabelString [文字列=""] Static 型 EndLabelType のラベルで用い る文字列。 Fill_Bottom [0,1] Fill_Top と同様。 Fill_Top [0,1] このパラメータは、この様式で段落を初期化する際に設 定される、編集 ◃ 段落設定ダイアログの「上部垂直余白」リストの Fill 値を設定します14 。 Font 本文テキストとラベルの両方で用いられるフォント。第 5311 節を 参照。このフォントを定義すると、自動的に LabelFont も同じ値で 定義されることに注意してください。したがって、LabelFont も同 時に定義したい場合には、これを先に定義してください。 FreeSpacing [0, 1] LYX は、空白をそれ自体文字や記号ではなく、2 つ の単語の間の分割子として捉えているため、単語間に 2 つ以上の空 白を入れることは、通常許可していません。これ自体はとても素晴 A らしいことですが、たとえばプログラムコードや生の L TEX コード を入力しようとするときなどに、煩わしくなることがあります。こ のことから、FreeSpacing を有効にすることが認められています。 A LYX は、L TEX モード以外では 2 つめ以降の空白には、保護された 空白を使用することに注意してください。 HTML* これらのタグは、XHTML 出力で使用されます。第 541 節をご覧 ください。 InnerTag [[FIXME]] （XML 型書式でのみ使用されます。 ） InTitle [1, 0] 1 の場合、このレイアウトをタイトルブロックの一部とし てマークします（大域項目の TitleLatexType と TitleLatexName も参照） 。
Jean-Marc による註：この設定にどれほど使途があるかは定かでなく、おそらく将 来のバージョンで取り除かれます。
14

44

第 5 章 文書クラスを新規に導入する

ItemSep [浮動小数点型=0] これは、同じレイアウトを持つ段落群の間に 追加する空白を与えるものです。複数のレイアウトを一つの環境に 入れると、それぞれのレイアウトは、その環境の Parsep だけ分離 されます。しかし、その環境の項目全体は、さらにこの Itemsep 分 だけ離されます。これは乗数であることに注意してください。 ItemTag [[FIXME]] （XML 型書式でのみ使用されます。 ）
A KeepEmpty [0, 1] 段落を空のままにすると、L TEX 出力が空になってしま うので、通常、LYX は段落を空にすることを許可しません。しかし ながら、これを無効にすることが望ましい場合が存在します。たと えば、書簡のひな型では、必須フィールドを人々が忘れないように、 空のフィールドのまま提供する手もあります。特別なクラスにおい ては、レイアウトを実際には文章を含まないある種の改行として使 用することもあります。

LabelBottomsep [浮動小数点型=0] ラベルと本文テキストとの間の垂直余 白。 本文テキストの上に来るラベルにのみ使用されます Top_Environment （ お よ び Centered_Top_Environment） 。 LabelCounter [文字列=""] 自動連番に使われるカウンタ名（詳しくは第 5310 節参照） 。 LabelType が Counter 型のときには、本項目は必須です。この場合 には、この様式が出現するたびにカウンタが増えます。 また、LabelType が Enumerate 型のときにも、若干複雑にはなり ますが、本項目を使うことができます。たとえば、 LabelCounter 「 A X におけるのと myenum」と宣言したものとしましょう。すると、L TE 同様、実際に使われるカウンタは、myenumi・myenumii・myenumii・ myenumiv のようになります。これらのカウンタは、全て別々に宣 言されなくてはなりません。 カウンタの詳細については、第 5310 節をご覧ください。 LabelFont ラベルに使用されるフォント。第 5311 節を参照。 LabelIndent ラベルをどれくらい行頭下げすべきかを示す文字列。 Labelsep [文字列=""] ラベルと本文テキストの間の水平余白。本文テキ ストの上に来ないラベルにのみ使用されます。

53 レイアウトファイルの書式

45

LabelString [文字列=""] Static ラベル型でラベルに使用する文字列。 LabelCounter を設定している場合、第 5310 節に述べられている 特別な整形コマンドを含めることができます15 。 LabelStringAppendix [文字列=""] これは付録の中で LabelString の代 わりに用いられます。 LabelString ステートメントは、 各 LabelStringAppendix をもリセットすることに注意してください。 LabelTag [FIXME] （XML 型書式でのみ使用されます。 ） LabelType [No_Label, Manual, Static, Top_Environment, Centered_Top_Environment, Counter, Sensitive, Enumerate, Itemize, Bibliography] • Manual は、ラベルが最初の単語（最初の本当の空白まで）で あることを示します。ラベルに 2 単語以上使用したいときは、 保護された空白を使用してください。 • Static は、ラベルが LabelString で宣言したものであること を示します。これは「静的」であることに注意してください。 • Top_Environment と Centered_Top_Environment は、Static の特別な場合です。ラベルは段落の上に印字されるのですが、 それは単一の環境の上か、このレイアウトを持つ連続した段落 群の上だけに印字されます。たとえば、Abstract レイアウトが 使用したりします。 • Sensitive はキャプションラベルの「図」や「表」の特別な場 合です。Sensitive は、 （ハードコードされた）ラベル文字列 がフロートの種類に依存することを示します。これは、フロー トに関連付けられたカウンタの値が N であるものとすると、 「FloatType N」にハードコードされています。 • Counter ラベル型は、自動的に連番が付されるラベルを定義し ます。LabelString は、それが含むカウンタ参照をすべて解決 するために展開されます。 これは、 たとえば Section \thechapter\thesection のようになります。第 5310 節を参照してください。

後 方 互 換 性 の た め に 、@style-name @と い う 文 字 列 は 、style-name 様 式 の LabelString を展開したものに置換されます。この機能は既に廃されたものとなってい るので、第 5310 節の機構に置き換えられなくてはなりません。

15

46

第 5 章 文書クラスを新規に導入する

• Enumerate は、通常の連番ラベルを生成します。現在のとこ ろ、これは、第 4 階層まで順に、アラビア数字・小文字・小文 字ローマ数字・大文字を使用するようにハードコードされてい ます。 • Itemize は、各階層でさまざまなブリットを生成します。これ もハードコードされています。 • Bibliography は、 YX で内部的に使用され、 L LatexType BibEnvironment とともにのみ使用されます。 LangPreamble これは、この様式で既に出現した LangPreamble 宣言をす べて、完全に上書きしますので、注意してください。使用法につい ての詳細は、第 537 節をご覧ください。
A LatexName 対応する L TEX の名称です。環境名かコマンド名を指します。

LatexParam 対応する LatexName の非必須パラメータです。このパラメー タは、LYX 内部から変更することはできません。 LatexType [Paragraph, Command, Environment, Item_Environment, A List_Environmen, Bib_Environment] レイアウトがどのように L TEX に変換されるべきかを示します16 。 • Paragraph は、何も特別なことは意味しません。 • Command は、\LatexName {}を意味します。 • Environment は、 \begin{LatexName }\end{LatexName }を 意味します。 • Item_Environment は Environment と同じですが、\item が この環境のすべての段落に付けられるところだけが異なってい ます。 • List_Environment は Item_Environment と同じですが、 LabelWidthString が環境の引数として渡されるところだけが異なっています。 LabelWidthString は、編集 ◃ 段落設定ダイアログで定義する ことができます。
これらのルールは SGML クラスにも適用されるので、LatexType の名称は、少し ミスリーディングかもしれません。特定の例については、SGML クラスファイルを見て ください。
16

53 レイアウトファイルの書式

47

A A 上記最後のいくつかをまとめると、L TEX 出力は、L TEX 型に依存 して

\latexname[latexparam]{}
のようになるか、

\begin{latexname}[latexparam]  \end{latexname}
となります。

LeftMargin [文字列=""] レイアウトを環境の中に入れた場合、左余白は 4 単純に加えられるのではなく、因子 depth+4 をかけて加えられます。 このパラメータは、Margin が Manual あるいは Dynamic に設定さ れているときにも用いられることに注意してください。その場合に は、これは手動設定余白または動的設定余白に加えられることに注 意してください。 引数は文字列として渡されます。たとえば「MM」と指定すると、段 落を通常フォントの「MM」の幅だけ行頭下げを行います。文字列の 前に「-」を付けると、負の幅を与えることができます。この方法 が採用されたのは、どの画面フォントでも見かけが同じになるよう にするためです。 Margin [Static, Manual, Dynamic, First_Dynamic, Right_Address_Box] このレイアウトの左余白の種類です。Static は固定余白を示しま す。Manual は、左余白が編集 ◃ 段落設定ダイアログで入力した文字 列によって決められることを示します。これは、タブを用いずに整っ た一覧表を組むのに使用されます。Dynamic は、余白がラベルの大 きさに依存することを示します。これは、自動連番の見出しに使用 されます。 54321 非常に長い見出し」という見出し行が、 32 「 「 非常に長い見出し」よりも広い左余白（54321 足す空白と同じ幅） を必要とすることは明らかでしょう（標準的「ワープロ」はこんな ことはやってくれませんが） First_Dynamic は似ていますが、段 。 落の最初の行だけが Dynamic でその他の行は Static です。これは、 たとえば、箇条書き（記述）に使用されます。Right_Address_Box は、段落中、最も長い行が右余白に合うように余白を選択します。 これは、ページの右端に住所を組版するのに用いられます。

48

第 5 章 文書クラスを新規に導入する

NeedProtect [0 ,1] このレイアウト中の脆弱なコマンドが\protect され るべきか否か（註：これはこのコマンド自体が\protect されるべ きかではありません） 。
A Newline [0, 1 ] 新規行を L TEX の新規行（\\）に変換するか否か。LYX A 中で L TEX 編集をやりやすくするために、変換は無効にすることが できます。

NextNoIndent [1, 0 ] 次の段落に最初の行の行頭下げを許すか否か。1 は 許可しないことを意味し、0 は望むならば行頭下げできることを意 味します。 ObsoletedBy このレイアウトが置き換えられたレイアウト名。これは、 後方互換性を維持しながら、レイアウトの名称を変更するのに使用 されます。 OptionalArgs [整数型=0] このレイアウトに使用することのできる非必 A 須引数の数。節見出しのようなものに有用であり、L TEX でのみ意 味を持ちます。出力時には、非必須引数は、すべての必須引数の前 に来ることに注意してください（以下参照） 。つまり、 \mycmd[非必須引数 1]{必須引数 1}{段落の内容}
のようなコマンドは生成できますが、

\mycmd[非必須引数 1]{必須引数 1}[非必須引数 2]{段落 の内容}
のようなコマンドは、TEX コード（これを使えば何でもできます） を使用することなしには、生成することができません。

ParIndent [文字列=""] 段落の最初の行の行頭下げ。レイアウトによって は Parindent は固定されています。例外には標準レイアウトがあ り、標準レイアウトの段落の行頭下げは、NextNoIndent で禁止す ることができるようになっています。また、環境中の標準レイアウ ト段落は、当該段落の Parindent ではなく、この環境の Parindent を使用します。たとえば、箇条書き（連番）内の標準段落は、行頭 下げされません。

53 レイアウトファイルの書式 Parsep [浮動小数点型=0] このレイアウトの 2 段落間の垂直余白。

49

Parskip [浮動小数点型=0] LYX では、文書を組版するのに、ユーザが「行 頭下げ」か「スキップ」を選ぶことができます。 「行頭下げ」を選択 した際には、この値は完全に無視されます。 「スキップ」を選択した A X 型「段落」レイアウトの ParIndent は無視され、す 際には、L TE べての段落はこの Parskip 引数分だけ引き離されます。垂直余白は、 DefaultHeight を標準フォントでの 1 行の高さとすると、Parskip の値×DefaultHeight によって計算されます。このようにして、画 面フォントを変更しても同じように表示されるのです。
A PassThru [0, 1] この段落の内容が、L TEX が必要とするような特別な変 換を行わずに、生の形で出力されるべきかどうか。 A Preamble この様式が使用されたときに、L TEX プリアンブルに付け加え るべき情報。この特定の様式が要求するマクロを定義したり、パッ ケージを読み込んだりと言ったことに使用します。 EndPreamble」 「 で閉じる必要があります。

RefPrefix [文字列] この型の段落を参照する際、生成されるラベルに使 用する前置句。これによって、整形参照を使用することができるよ うになります。
A RequiredArgs [整数型=0] このレイアウトに対応する L TEX コマンドや A L TEX 環境が予期している、必須引数の数。コマンドの場合には、 段落の内容自体に関連付けられている引数以外に、必要な引数の数 のことです。これらの引数は、実際には渡されなくても構いません。 必要な場合は、LYX が空の引数を生成します。非必須引数は、必須 引数の前に出力されることに注意してください。詳細については、 上記 OptionalArgs タグにおける議論をご覧ください。

Requires [文字列] このレイアウトが文字列で表される機能を必要するか 否か。 「機能」に関する情報は、上記 Provides の説明（43 ページ） をご参照ください。 RightMargin [文字列=""] LeftMargin に同様。 Spacing [single, onehalf, double, other 値] これはレイアウト中 の既定の行間をどうすべきか定義するものです。引数の single・

50

第 5 章 文書クラスを新規に導入する

onehalf double は、それぞれ乗数 1 125 1667 に対応します。引数 ・ ・ ・ other を指定した場合には、実際の乗数値も引数として指定しなくて はなりません。他のパラメータと違って Spacing は、setspacesty A パッケージを使用した、限定的な L TEX コードを生成することを意 味することにご注意ください。 Spellcheck [0,1] この様式の段落をスペルチェ ックするか否か。既定値 は真です。 TextFont 本文に使うフォント。第 5311 節参照。 TocLevel [整数型] 目次中でのこの様式の階層。これは、節見出しの自動 連番に使用されます。 TopSep [浮動小数点型=0] このレイアウトを持つ一連の段落群の最初の段 落と、その前の段落の間の垂直余白。前の段落が別のレイアウトを 持っていれば、余白は単純に追加されるのではなく、それらの最大 値がとられます。

537

段落様式の国際化

LYX は、長きにわたってレイアウト情報の国際化をサポートしてきま したが、第 20 版までは、これは操作画面にのみ適用されるものであって、 たとえば PDF 出力には適用されませんでした。たとえば、フランスの著 者が、 Theorem 1」の代わりに「Thorme 1」としたければ、醜いハック 「 に頼るしかありませんでした。Georg Baum のおかげで、これは解消さ れました。 もし Style が、組版文書に出力される文字列を定義するのであれば、非 英語文書や複数言語文書をサポートするために、LangPreamble や BabelPreamble を使用することができます。以下の抜粋（theorems-amsinc より） は、これがどう動作するかを示すものです。 Preamble \theoremstyle{remark} \newtheorem{claim}[thm]{\protect\claimname} EndPreamble LangPreamble

53 レイアウトファイルの書式

51

\providecommand{\claimname}{_(Claim)} EndLangPreamble BabelPreamble \addto\captions$$lang{\renewcommand{\claimname}{_(Claim)}} EndBabelPreamble
A 原則として、LangPreamble と BabelPreamble タグ内には、有効な L TEX コードはすべて用いることができますが、実際においては、ここで典型 的に示したような形になるでしょう。組版文字列が正しく翻訳されるた A めの鍵となるのは、L TEX コマンド\claimname とその\newtheorem 中で の用い方です。 LangPreamble タグは、文書全体の言語に基づいた国際化を提供します。 タグの内容は、Preamble タグと同様、プリアンブルに置かれるのですが、 これを特別なものにしているのは、 「関数」_() が使用されていることで A X 出力を生成する際、その引数を文書言語に翻 す。これは、LYX が L TE 訳したもので置き換えられます。 BabelPreamble タグは、複数言語文書をサポートし、babel パッケー ジへのインタフェースを提供することを意図しているので、もう少し複 雑です。その内容は、文書に現れる言語それぞれについて一度、プリア ンブルに追加されます。この場合には、_() の引数は、その当該言語への 翻訳で置き換えられ、$$lang は言語名（babel パッケージで使用される もの）で置き換えられます。 したがって、フランス語のセクションを持つドイツ語文書では、以下 のような内容がプリアンブルに追加されます

\addto\captionsfrench{\renewcommand{\claimname}{Affirmation}}
A それから、L TEX と babel は協力して、出力に正しい文字列を生成します。 ここで注意しなくてはならない重要な点は、翻訳は、操作画面の国際 化に使われるのと同じ機構を通じて、LYX 自身によって提供されるとい うことです。つまり、ユーザー作成のレイアウトファイルに入力された文 字列は、LYX の国際化ルーチンでは取り扱われないので、LangPreamble と BabelPreamble は、事実上、LYX とともに提供されるレイアウトファイ ルでのみ、使うことができるということを意味します。とはいえ、こう いうことでありますので、将来的に LYX に同梱させようという意図を以 て作成されたレイアウトは、適切なところではすべて、これらのタグを 使用するべきです。

\addto\caption

52

第 5 章 文書クラスを新規に導入する

538

フロート

LYX 第 130 版以来、テキストクラス自体の中でフロート（ﬁgure・table・）を定義することが可能となり、かつ必要となりました。標準的なフ ロートは stdfloatsinc ファイルに含まれているので、作業中のレイア ウトファイルに Input stdfloatsinc
と加えるだけで済むことも多いでしょう。LYX に同梱されている AGU ク ラスのように、それ以外のフロート型を提供するテキストクラスを実装 するには、以下の情報が役立つでありましょう。

Extension [文字列=” ”] 図などのリストを含む外部ファイルのファイル A 拡張子名。L TEX がキャプションを書き込むファイルです。 GuiName [文字列=” ”] メニューとキャプションに使用される文字列。babel が使用される場合には、これは現在の言語に翻訳されます。 HTML* これらは、XHTML 出力で使用されます。第 54 節をご覧ください。 ListCommand [文字列=” ”] この型のフロートの一覧を生成するのに使用 するコマンド。頭部の「\」は書きません。NeedsFloatPkg が偽の 時には、このコマンドを生成する標準的な方法はないので、これは 必ず指定しなくてはなりません。NeedsFloatPkg が真の時は、標準 的な方法が存在するので、これは無視されます。 ListName [文字列=” ”] この種類のフロート一覧（図一覧・表一覧など） に使用される見出し。LYX 中では、これは画面上のラベルとして使 A 用されます。また、見出しとして使用するために、L TEX に渡され、 XHTML 出力でも見出しとして使用されます。これは、文書言語に 翻訳されます。 NeedsFloatPkg [0,1 ] フロートが文書クラス中に既に定義されているか、 あるいは代わりに floatsty を読み込んで、それが提供しているも のを使用する必要があるかを示します。 既定値は 1 であり、 floatsty A X 文書クラスでフロートが既に定義されている を使用します。L TE ときには、0 に設定しなくてはなりません。

53 レイアウトファイルの書式

53

NumberWithin [文字列=” ”] この（非必須の）引数は、このクラスのフロー トが文書中のある節単位ごとに番号を振り直されるべきかどうかを 規定します。たとえば、引数に chapter と指定されていれば、フ ロートは章ごとに番号が振り直されます。 Placement [文字列=” ”] このクラスのフロートの既定の配置法。文字列 A は、標準的な L TEX 表記に従い、t ならば上部（top） b ならば下 、 部（bottom） p ならばページ（page） h ならばここ（here）を表 、 、 17 します 。これらの他に新しい型 H があり、これはフロートを「こ こ」に置いていいけれども他の場所はだめ、というものなので、本 当はフロートにあるものではありません。しかし、H 指定子は特別 なものであり、その細かい実装上の理由で、組み込み以外のフロー ト型では使用することができません。これが何を意味するかおわか りにならない場合には、代わりに「tbp」を指定してください。 RefPrefix [文字列] この型のフロートを参照する際、生成されるラベル に使用する前置句。これによって、整形参照を使用することができ るようになります。コピーした様式が設定した RefPrefix は、特別 な文字列「OFF」 （すべて大文字）を使えば、いつでも削除するこ とができます。 Style [文字列=” ”] \newfloat を使用してフロートを定義する際に使用 される様式。 Type [文字列=” ”] プログラムやアルゴリズムのような、フロートの新 しいクラス「型」 。適切な\newfloat の後で、\begin{program}や \end{algorithm*}といったコマンドが利用できます。 type 型のフロートを定義すると、自動的に対応するtype 名カウンタが 定義されます。

539

任意設定差込枠と差込枠レイアウト

LYX は第 140 版から文字様式をサポートしています。第 160 版以降、 これは任意設定差込枠と呼ばれています。 任意設定差込枠には次の 3 種類があります。
17 A LT

EX 同様、文字列中でのこれらの文字の順序は関係ありません。

54

第 5 章 文書クラスを新規に導入する
A • 文字様式（CharStyle） 。これは、\noun や\code などの L TEX コマ ンドに対応した意味論的マークアップを定義するものです。

• ユーザ設定（Custom） 。これは、TEX コードや脚注などに似たユー ザ設定の折りたたみ式差込枠を定義するのに使用することができま す。わかりやすい例は endnote 差込枠で、これは endnote モジュー ル中で定義されています。 • XML 要素（Element） DocBook クラスで使用するものです。 。
任意設定差込枠は、以下で説明する InsetLayout タグを使用して定義さ れます。 InsetLayout タグは、もう一つ別の機能も提供します。これを使えば、 いろいろな種類の差込枠全体のレイアウトを設定するのに使用すること ができるのです。現在のところ、InsetLayout は任意設定差込枠を定義 することの他に、脚注・傍注・注釈差込枠・TEX コード（ERT）差込枠・ 派生枝・リスト・索引・ボックス・表・アルゴリズム・URL・オプション 引数のレイアウトパラメータを設定するのに使用することができます。 InsetLayout 定義は以下の形の行では始まらなくてはなりません。

InsetLayout &lt;型&gt;
ここで&lt;型&gt;は、レイアウトを定義しようとしている差込枠を指し、以下 の 2 つの場合がありえます。

1 既存の差込枠のレイアウトを変更する場合。この場合、&lt;型&gt;は以下 のいずれかになります：Algorithm・Branch・Box・Box:shaded・ ERT・Figure・Foot・Index・Info・Info:menu・Info:shortcut・ Info:shortcuts Listings Marginal Note:Comment Note:Note ・ ・ ・ ・ ・ Note:GreyedOut・OptArg・Table・URL。 2 任意設定差込枠のレイアウトを定義する場合。この場合には、&lt;型 &gt;は既存の差込枠で使用されていないもので有効な識別子であれば、 何でも指定できます。任意設定差込枠の定義には、LYXType 項目も 同時に含まれていて、これがどの型の差込枠なのかが宣言されてい る必要があります。 InsetLayout 定義には以下の項目を入れることができます。

53 レイアウトファイルの書式

55

BgColor 差込枠の背景色。有効な色彩は src/ColorCodeh で定義されて います。 ContentAsLabel [0 ,1] 差込枠を閉じた際、差込枠の内容をラベルとして 使用するか否か。既定値は偽です。 CopyStyle 段落様式と同様です（536）ページ参照） 。 CustomPars [0 ,1] 段落を設定するのに、段落設定ダイアログをユーザが 使えるかどうかを指定します。 Decoration 差込枠の枠とボタンをレンダリングするのに使用する様式を 指定するもので、Classic・Minimalistic・Conglomerate のいずれ かを指定することができます。脚注は通常 Classic を使用し、TEX コード差込枠は通常 Minimalistic、文字様式は Conglomerate を 使用します。 End InsetLayout 宣言を閉じるのに必要です。 Font 本文本体とラベル両方に使用されるフォントです。第 5311 節を参 照。このフォントを定義すると自動的に LabelFont も同じ値に定義 されるので、これらを別々の値にしたいときは、これを先に定義し てから後に LabelFont を定義しなくてはならないことに注意してく ださい。 ForceLTR たとえば TEX コードや URL で「latex」言語が「左から右」 （ラ テン式）出力になるように強制します。うまく機能しません。 ForcePlain [0 ,1] PlainLayout を使用するべきなのか、それともユーザが 差込枠で使用されている段落様式を変更できるのかを指定します。 既定値は偽です。 FreeSpacing 段落様式と同様です（43 ページ参照） 。既定値は偽です。 HTML* これらは、XHTML 出力で使用されます。第 54 節をご覧ください。 InToc [0 ,1] 「文書構造」ペイン用に出力される文字列に、この差込枠の 内容を含めるかどうか。たとえば、節見出しの脚注の内容が、文書 構造の目次に表示されることは望まないでしょうが、通常、文字様 式の内容は表示されることを望むでしょう。既定値は偽、すなわち 含めません。

56

第 5 章 文書クラスを新規に導入する

KeepEmpty 段落様式と同様です（44 ページ参照） 。既定値は偽です。 LabelFont ラベルに使用されるフォント。第 5311 節を参照。非効率を回 避するため、この定義は Font の前には決して現れてはなりません。 LabelString ボタンなどに差込枠のラベルとして表示されるもの。差込 枠型によっては（TEX コードや派生枝） 、ラベルが動的に変更され ます。
A LatexName 対応する L TEX 関連物の名称。環境名ないしはコマンド名。

LatexParam 対応する LatexName 関連物の非必須パラメータ。[] のよう な括弧対を含む。このパラメータは LYX 内部から変更することは できません。 LatexType 段落様式と同様です（46 ページ参照） 。 LyxType charstyle・custom・element・end（charstyle の定義の終わり などを示すダミー定義）の各値を取ることができます。この項目は、 任意設定差込枠に必須であり、かつ任意設定差込枠でしか意味を持 ちません。この項目は、就中、差込枠がどのメニューに表示される かを決定します。LyxType を charstyle に設定すると、MultiPar が偽に設定されます。文字様式差込枠で MultiPar を真にしたい時 には、LyxType を設定した後に設定すれば、真に設定することがで きます。 MultiPar [0 ,1] この差込枠中に複数の段落を入れることができるかどう か。これは同時に、CustomPars を同じ値に設定し、ForcePlain を 逆の値に設定します。これらは、MultiPar の後に指定されれば、他 の値に指定し直すことができます。既定値は真です。 NeedProtect [0 ,1] 本レイアウト中で脆弱なコマンドを\protect するか 否か（註：当該コマンド自身を protect するかどうかではありませ ん） 。既定値は偽です。 ParbreakIsNewline [0 ,1] 段落様式と同様です（536 ページ参照） 。既 定値は偽です。 PassThru [0 ,1] 段落様式と同様です（536 ページ参照） 既定値は偽です。 。

53 レイアウトファイルの書式 Preamble 段落様式と同様です（49 ページ参照） 。

57

RefPrefix [文字列] この型の差込枠を参照する際、生成されるラベルに 使用する前置句。これによって、整形参照を使用することができる ようになります。 Requires [文字列] 段落様式と同様です（49 ページ参照） 。 Spellcheck [0,1 ] この差込枠の内容をスペルチェ ックするか否か。既定 値は真です。

5310

カウンタ

LYX 第 130 版以来、テキストクラス自体の中でカウンタ（chapter・ ﬁgure・   ）を定義することが可能となり、かつ必要となりました。標準 的なフロートは stdcountersinc ファイルに含まれているので、作業中 のレイアウトファイルに Input stdcountersinc
と加えるだけで済むことも多いでしょう。しかし自製カウンタを定義し たければ、そうすることもできます。カウンタ宣言は、

Counter 名称
で始まらなくてはなりません。ここで「名称」はカウンタ名で置き換えま す。また、宣言は「End」で終わらなくてはなりません。以下のパラメー タを使用することができます。

LabelString [文字列=""] 定義されていると、ここで指定した文字列が カウンタの表示の仕方を定義します。 この値を指定すると、 LabelStringAppendix も同じ値に設定されます。文字列中では、以下の構成要素を使用す ることができます。 • \thecounter は、カウンタ counter の LabelString（または LabelStringAppendix）を展開したもので置き換えられます。

58

第 5 章 文書クラスを新規に導入する
A • カウンタ値は、L TEX 型マクロ\numbertype {カウンタ}を用い て表現することができます。ここで numbertype は以下のいず れかです18 。arabic：1, 2, 3,   ；alph：a, b, c,（小文字） ； Alph：A, B, C,（大文字） roman：i, ii, iii,（小文字ロー ； マ数字） Roman：I, II, III   （大文字ローマ数字） hebrew（ヘ ； ； ブライ語数字） 。

LabelString が定義されていないときは、既定値は以下のように組み立てら れます。 このカウンタに親カウンタ master Within で定義） （ があるときに は 、文 字 列 \themaster\arabic{カウンタ}が使用されます。 それ以外の場合は、 \arabic{ カウンタ}が使用されます。 LabelStringAppendix [文字列=""] LabelString と同様ですが、付録で 使用するためのものです。 PrettyFormat [文字列=” ”] このカウンタの整形参照で使用する書式。た とえば、節番号への参照を「Section 24」のように表示させたい場 合には、文字列に「##」を含めます。これは、カウンタ番号で置 換されます。したがって、節の場合には「Section ##」のようにし ます。 Within [文字列=” ”] これを別のカウンタ名に設定すると、現在のカウン タは、別のカウンタが増加する毎にリセットされます。たとえば、 subsection は section 毎に番号がリセットされます。

5311

フォント指定

フォント指定は、以下のような形を取ります。

Font または LabelFont  EndFont
以下のコマンドを使用することができます。
実は、事態はもう少し複雑です。以下に説明されているもの以外の numbertype は 何であれ、アラビア数字を生成します。これが将来変更されたとしても不思議ではない でしょう。
18

53 レイアウトファイルの書式

59

Color [none , black, white, red, green, blue, cyan, magenta, yellow] Family [Roman, Sans, Typewriter] Misc [文字列] 有効な引数は、emph・noun・underbar・no_emph・no_noun・ no_bar です。それぞれ、対応する属性を有効にしたり無効にした りします。 たとえば、emph は強調を有効にし、no_emph はそれを無効にしま す。もし後者がわかりにくければ、現在のコンテクストのフォント 設定は、一般的に周囲のコンテクストから継承していることを思い 出してください。ですから no_emph は、たとえば定理環境で、何を せずとも有効となっている強調を無効にするのです。 Series [Medium, Bold] Shape [Up, Italic, SmallCaps, Slanted] Size [tiny, small, normal , large, larger, largest, huge, giant]

5312

引用書式指定

（引用ダイアログやツールチップなどの）LYX 内部や XHTML 出力に おいて、書誌情報をどのように表示するべきかの叙述には、CiteFormat ブロックが使用されています。このブロックは、以下のような形をして います。

CiteFormat article  book  End
上記の各行は、 それぞれ article や book に関連付けられた書誌情報をどのよ うに表示するべきかを定義するものですが、このような定義は、BibTEX フ ァイル中に存在しうる「項目型」すべてについて与えることができます。特 定の定義が与えられなければ、LYX は、ソースコード中に定義されている 既定書式を使用します。LYX は、いくつかの書式を stdciteformatsinc ファイルで事前定義しており、これはほとんどの LYX 文書クラスにイン クルードされています。

60

第 5 章 文書クラスを新規に導入する

この定義は、BibTEX キーをその値で置換できる機能を持った、簡単な 言語を使用しています。キーは、%author%のように%記号でくくらなくて はなりません。したがって、簡単な定義は以下のようになります。

misc %author%, “%title%”

これは、 「著者名・コンマ・引用に囲まれたタイトル・終止符」を出力し ます。 もちろん、キーが存在するときのみ、キーを出力したい時があるはずで す。このようなときには{%volume%[[vol %volume%]]}のように、条件 付きの構成を使用することができます。 これは、 volume が存在するならば， 「vol 」 volume キーを出力するという意味です。 と また、 {%author%[[%author%]][[%editor ed]]}のように、条件の中に else 節を含めることも可能です。ここでは、 もし author キーが存在するならば出力され、そうでなければ editor キー と「, ed」が出力されます。ここでもキーは、%記号でくくられているこ とに注意してください。条件全体は、波括弧で囲まれています。if 節およ び else 節は、 [[」と「]]」の二重角括弧で囲まれています。これらすべ 「 てのあいだには，空白は入ってはなりません。 もう一つ、定義中で使用することのできる文法として、{!&lt;i&gt;!}という 形をしたものがあります。これは、 「リッチテキスト」を生成するときに 使われる整形情報を定義するものです。当然のことながら、平文を書き 出すときには、HTML タグを出力させたくはありませんから、HTML タ グは「{!」と「!}」でくるんでやらなくてはならないのです。 CiteFormat ブロックでは、他に 2 つの特殊な定義が可能です。一つめ の例としては、

!quotetitle “%title%”
といった例が挙げられます。 これは、 短縮形ないしはマクロであり、 %!quotetitle%の ように、 これがキーであるかのように扱って使用することができます。 YX L は、%!quotetitle%を、そこで定義されているものを扱う場合と同じよ うに取り扱います。ですから、明白な警告を敢えてさせて頂くと、

!funfun %funfun%
のようなことはしないでください。LYX は、無限ループに陥るようなこ とはありませんが、諦めるまでに長いループに入るかもしれません。 特殊な定義の二つめは、

54 XHTML 出力のタグ _pptext pp

61

のようなものです。 これは、 文字列の翻訳可能な部分を定義するもので、 書 誌情報中の関連部分が翻訳されるようにすることができます。 %_pptext%の ように、これをキーとして扱って、定義の中に入れることもできます。こ れらのうちいくつかは、stdciteformatsinc 中に事前定義されていま す。これは、上記で述べたような意味でのマクロではないことに注意し てください。 以下は、これらの機能を全て使った例です。

!authoredit {%author%[[%author%, ]][[{%editor%[[%editor%, %_edtext%, ]]}]]}
これは、author キーが定義されているならば、著者とコンマを出力し、 author キーが定義されておらず、editor キーが定義されているならば、 編集者名の後に_edtext ないしはその翻訳（既定では「ed」 ）を出力しま す。これは実は stdciteformatsinc の中で定義されていますので、こ のファイルをまず読みこめば、ご自身の定義ないしは再定義の中で使用 することができます。

54

XHTML 出力のタグ

A L TEX や DocBook と同様、LYX の XHTML 出力の書式も、レイアウト 情報によって制御することができます。一般的に、LYX は適切な既定値を 提供し、前述したように、他のレイアウトタグに基づいて、既定の CSS スタイルの構成まで行ないます。たとえば、章見出しを適切に整形する ための CSS を書き出すために、LYX は、章様式の Font 宣言で提供され ている情報を利用しようと試みます。 したがって、多くの場合、使いたい環境や任意設定差込枠などのために 満足のいく XHTML 出力を得るために、まったく何もしなくてよいこと になるでしょう。しかしながら、これが必要になる場合もあるので、LYX は、生成される XHTML や CSS をカスタマイズするために使用できるレ イアウトタグを、たくさん提供しています。 様式宣言や差込枠宣言の外で使用することができるタグに、 HTMLPreamble と AddToHTMLPreamble の 2 つがあることに注意してください。これらの 詳細については、第 534 節をご覧ください。

62

第 5 章 文書クラスを新規に導入する

541

段落様式

LYX が段落のために出力する XHTML の種類は、通常の段落を取り扱っ ているのか、コマンドを取り扱っているのか、あるいは環境を取り扱っ A ているのかに依存し、これは対応する LTEXType タグの内容によって決定 されます。 コマンドや通常の段落の場合には、 XHTML 出力は以下の形になります。 &lt;tag attr=”value”&gt; &lt;labeltag attr=”value”&gt;ラベル&lt;/labeltag&gt; 段落の内容 &lt;/tag&gt;
もちろん、段落にラベルがなければ、ラベルタグは省略することができ ます。 環境のうち、リストの変種でないものに関しては、XHTML は以下の 形を取ります。

&lt;tag attr=”value”&gt; &lt;itemtag attr=”value”&gt;&lt;labeltag attr=”value”&gt;環境ラ ベル&lt;/labeltag&gt;最初の段落。 &lt;/itemtag&gt; &lt;itemtag&gt;二つめの段落。&lt;/itemtag&gt; &lt;/tag&gt;
ラベルは、たとえば定理の場合にそうであるように、最初の段落にだけ 出力されることに注意してください。 リストに関しては、次のような形になります。

&lt;tag attr=”value”&gt; &lt;itemtag attr=”value”&gt;&lt;labeltag attr=”value”&gt;リスト のラベル&lt;/labeltag&gt;最初の項目。&lt;/itemtag&gt; &lt;itemtag attr=”value”&gt;&lt;labeltag attr=”value”&gt;リスト のラベル&lt;/labeltag&gt;二つめの項目。&lt;/itemtag&gt; &lt;/tag&gt; &lt;tag attr=”value”&gt;

54 XHTML 出力のタグ &lt;labeltag attr=”value”&gt;リストのラベル &lt;/labeltag&gt;&lt;itemtag attr=”value”&gt;最初の項目。 &lt;/itemtag&gt; &lt;labeltag attr=”value”&gt;リストのラベル &lt;/labeltag&gt;&lt;itemtag attr=”value”&gt;二つめの項目 &lt;/itemtag&gt; &lt;/tag&gt;

63

ここで labeltag と itemtag の順序が違っていることに注意してくださ い。どちらの順序になるかは、HTMLLabelFirst の設定に依存します。も し HTMLLabelFirst が偽であれば（既定値） 、最初のケースのようになり、 これが真であれば、二番めのケースのように、label が item の外側に来る ようになります。 各段落の特定のタグ出力や属性出力は、以下に述べるようなレイアウ トタグを使って制御することができます。しかしながら、前述のように、 多くの場合、LYX は適切な既定値を生成するので、たいしたことをしな くても、望ましい XHTML 出力を得ることができるということになるは ずです。ここで利用出来るタグは、自分の好みにあわせて微調整する目 的でここにあるものと考えてください。

HTMLAttr [文字列]  主幹タグと共に出力される属性情報を指定します。 たとえば、 class=‘mydiv’」のようなものです。既定においては、 「 LYX は「class=‘レイアウト名’」と出力します。ここでレイアウト 名は、レイアウトの LYX 名であり、chapter のように小文字で記述 します。 HTMLForceCSS [0,1]   HTMLStyle で追加情報が明示的に与えられている ときでも、LYX がこのレイアウト用に生成する既定 CSS 情報を出 力するか否か。これを 1 にすると、生成された CSS を完全に上書き する代わりに、変更したり追加したりすることができます。既定値 は 0 です。 HTMLItem [文字列]  環境の段落に使用されるタグ。上記各例の itemtag を置き換えます。既定値は div です。 HTMLItemAttr [文字列]   item タグの属性。既定値は class=‘レイアウ ト名_item’ です。

64

第 5 章 文書クラスを新規に導入する

HTMLLabel [文字列]  段落と項目ラベルに使用されるタグ。上記各例の labeltag を置き換えます。既定値は span です。 HTMLLabelAttr [文字列]   label タグの属性。既定値は class=‘レイアウ ト名_label’ です。

HTMLLabelFirst [0,1]  このタグは、リスト関係環境でのみ意味を持ち、 label タグが、item タグの前に出力されるか、中に出力されるかを制 御します。 これは、 たとえば、 description 環境の中で、 ‘&lt;dt&gt;&lt;/dt&gt;&lt;dd&gt;&lt;/dd&gt;と いう形を得るために使用されます。既定値は 0 で、label タグは item タグの中に出力されます。 HTMLPreamble この様式が使用されたときに、&lt;head&gt;セクションに出力 される情報。これは、たとえば、onclick ハンドラを定義するため に&lt;script&gt;ブロックをインクルードするのに使用することができ ます。 HTMLStyle  この様式が使用されたときに、インクルードする CSS スタ イル情報。これは、レイアウトが生成する&lt;style&gt;ブロックで自動 的に包まれますので、CSS 自体をインクルードするだけで大丈夫 です。 HTMLTag [文字列]  主幹ラベルに使用されるタグ。上記各例の tag を置 き換えます。既定値は div です。 HTMLTitle [0,1]  この様式が、XHTML ファイルの&lt;title&gt;タグを生成 するのに使用する様式であるという印をつけます。既定値は偽です。 stdtitleinc ファイルでは、title 環境のこの項目を真に設定し ています。

542

差込枠レイアウト XHTML

差込枠の XHTML 出力も、レイアウトファイル内の情報によって制御 することができます19 。ここでも、LYX は適切な既定値を提供しようと

現在のところ、これは「テキスト」差込枠（中に書き込みができる差込枠）にのみ 有効で、 「コマンド」差込枠（ダイアログボックスに関連付けられた差込枠）には適用 されません。

19

54 XHTML 出力のタグ

65

試み、既定の CSS 様式を構成します。しかし、すべてカスタマイズ可能 です。 LYX が差込枠用に出力する XHTML は、以下の形を取ります。

&lt;tag attr=”value”&gt; &lt;labeltag&gt;ラベル&lt;/labeltag&gt; &lt;innertag attr=”value”&gt;差込枠の内容。&lt;/innertag&gt; &lt;/tag&gt;
差込枠が多段落を許可している—つまり MultiPar が真—ならば、差込枠 の内容は、それ自身段落として出力され、それらの段落に用いられる様 式（標準、引用など）を用いて整形されます。もちろん、段落にラベルが なければ、label タグは省略され、ラベルがあれば、現在のところ、つね に span が用いられます。inner タグは非必須であり、既定では出力され ません。各差込枠用に出力される特定のタグや属性は、以下のレイアウ トタグによって制御することができます。

HTMLAttr [文字列]  主幹タグと共に出力される属性情報を指定します。 たとえば、 class=‘mydiv’」のようなものです。既定においては、 「 LYX は「class=‘レイアウト名’」と出力します。ここでレイアウト 名は、レイアウトの LYX 名であり、chapter のように小文字で記述 します。 HTMLForceCSS [0,1]   HTMLStyle で追加情報が明示的に与えられている ときでも、LYX がこのレイアウト用に生成する既定 CSS 情報を出 力するか否か。これを 1 にすると、生成された CSS を完全に上書き する代わりに、変更したり追加したりすることができます。既定値 は 0 です。 HTMLInnerAttr [文字列]   inner タグの属性。既定値は class=‘差込枠 名_inner’ です。 HTMLInnerTag [文字列]   inner タグです。上記各例の innertag を置き 換えます。既定値はなしです。 HTMLIsBlock [0,1 ]  この差込枠が（脚注のように）独立した文字列ブ ロックを表すのか、それとも、 （派生枝のように）周囲の文字列の 中に取り込まれる素材を表すのか。既定値は 1 です。

66

第 5 章 文書クラスを新規に導入する

HTMLLabel [文字列]  場合によっては、カウンタへの参照を含む、この 差込枠のラベル。たとえば、脚注用には\arabic{footnote}など。 これは非必須であり、既定値はありません。 HTMLPreamble この様式が使用されたときに、&lt;head&gt;セクションに出力 される情報。これは、たとえば、onclick ハンドラを定義するため に&lt;script&gt;ブロックをインクルードするのに使用することができ ます。 HTMLStyle  この様式が使用されたときに、インクルードする CSS スタ イル情報。これは、レイアウトが生成する&lt;style&gt;ブロックで自動 的に包まれますので、CSS 自体をインクルードするだけで大丈夫 です。 HTMLTag [文字列]  主幹ラベルに使用されるタグ。上記各例の tag を置 き換えます。既定値は MultiPar の設定に依存し、MultiPar が真な らば div、偽ならば span です。

543

フロート XHTML

フロートの XHTML 出力も、レイアウトファイル内の情報によって制 御することができます。出力は、以下の形を取ります。

&lt;tag attr=”value”&gt; フロートの内容。 &lt;/tag&gt;
キャプションは、存在している場合には、独立した差込枠となり、そのよ うな形で出力されます。その外観は、キャプション差込枠の InsetLayout で制御することができます。

HTMLAttr [文字列]  主幹タグと共に出力される属性情報を指定します。 たとえば、 class=‘myfloat’ onclick=‘’」 「 のようなものです。 既定においては、LYX は「class=‘float float-フロート型’」と 出力します。ここでフロート型は、フロート宣言で定義された（538 参照） 、この型のフロートの LYX 名です。ただし、小文字に変換さ れ、アルファベットや数字でない文字はアンダースコアに変換され ます。例：ﬂoat-table。

54 XHTML 出力のタグ

67

HTMLStyle  このフロートが使用されたときに、インクルードする CSS スタイル情報。これは、レイアウトが生成する&lt;style&gt;ブロックで 自動的に包まれますので、CSS 自体をインクルードするだけで大丈 夫です。 HTMLTag [文字列]  このフロートに使用されるタグ。上記各例の tag を 置き換えます。既定値は div であり、ほとんどの場合変更する必要 はありません。

544

書誌情報の整形

書誌情報は、CiteFormat ブロックを使用して整形することができます。 詳細については、第 5312 節を参照してください。

545

LYX が生成した CSS

LYX は、提供されている他のレイアウト情報に基づいて、差込枠と段 落様式の両方の既定 CSS 様式ルールを生成ということすることを、これ までに何度か触れました。この節では、LYX がどのレイアウト情報を、ど のように使うのか、ひとこと述べておきたいと思います。 LYX は、現在のところ、Font 宣言で指定されている Family・Series・ Shape・Size を利用して、フォント情報についてのみ CSS を自動生成し 。この変換は、きわめて分かりやすく自明で ます（第 5311 節を参照） す。たとえば、 Family Sans」は「font-family: sans-serif」にな 「 ります。LYX の寸法と CSS の寸法のあいだの対応は、少し複雑ですが、 それでも直感的に分かります。詳細については、src/FontInfocpp の getSizeCSS() 関数をご覧ください。

69

第 6 章 外部素材を取り込む
【警告】本説明書のこの部分は、しばらく更新されていません。もちろ んまだ正確であることを期待していますが、保証の限りではありません。

LYX 外部のソースから素材を使用する方法は、取扱説明書埋込オブジェ クト篇で詳細にカバーされています。本章は、新種の素材を取り込む際 に、舞台裏で何をする必要があるかをカバーします。

61

どのように機能するのか

外部素材の機能は、ひな型の概念に基づいています。ひな型は、LYX が ある型の素材とどのように橋渡しをするべきかを指定するものです。同 梱物として、LYX は、Xﬁg の図や、様々なラスター形式画像、チェス棋 譜、LilyPond 楽譜用のひな型を事前に定義されたものとして含んでいま す。実際に何が入っているかは、挿入 ◃ ファイル ◃ 外部素材メニューで見 ることができます。さらに、特定の型の素材をサポートするのに、自分 自身のひな型を作成することも可能です。後でどのようなことをすれば いいか詳細に説明しますが、できればあなたが作ったすべてのひな型を 投稿して、我々が LYX の後の版に取り込むことができるようにしてくだ さることを希望します。 外部素材の機能におけるもう一つの基本的な発想は、最終素材の元と なるオリジナルファイルと、書き出された文書や印刷された文書に取り込 むための生成ファイルとを区別していることです。たとえば、Xfig で作 成した図の場合を考えてみましょう。Xﬁg アプリケーション自体は、fig 拡張子を持つオリジナルファイルを操作します。Xﬁg で図を作成したり 変更したりして、作業が終われば fig ファイルに保存します。この図を A お使いの文書に取り込みたいときには、L TEX ファイルにそのままイン クルードできるように、transfig を呼び出して PostScript ファイルを生 成します。この場合には、fig ファイルがオリジナルファイルであり、

70

第 6 章 外部素材を取り込む

PostScript ファイルが生成ファイルになります。 この区別は、文書を執筆している最中に、素材を更新することができ るようにするために重要です。さらに、これによって、複数の書き出し 書式をサポートするために必要な柔軟性が提供されます。たとえば、平 文テキストファイルの場合には、図を生の PostScript ファイルとして取 り込むのは、とても褒められた発想とはいえません。むしろ、その図へ の参照だけを含めるか、最終出力が実際の画像に近いものとなるように 画像から ASCII への変換子を呼び出したいと考えることでしょう。LYX の外部素材マネジメントは、LYX がサポートする各書き出し書式別に仕 分けしているので、ユーザがこれを行うことが可能となっています。 LYX の外部素材マネジメントは、書き出し書式によって異なる生成物 をサポートすることの他に、編集・閲覧アプリケーションを緊密に統合す ることもサポートします。Xﬁg の図の場合には、LYX の外部素材ダイアロ グからシングルクリックでオリジナルファイルを Xﬁg で開くことができ、 ダブルクリックすることで生成された PostScript ファイルを Ghostview で閲覧することができます。もうコマンドラインをもてあそんだり、オ リジナルファイルや生成ファイルがどこにあるか探したり変更を加える ためにファイルブラウザをいじくり回す必要はないのです。このように して、文書を執筆する際に必要となる多くのアプリケーションを最大限 に利用し、最終的により生産性を上げることができるようになるのです。

62

外用ひな型設定ファイル

LYX に自製の外用ひな型を付け加えるのは、比較的簡単です。しかし ながら、これを不用心に行ってしまうと、たいていの場合、簡単に濫用 されてしまうようなセキュリティホールを作ってしまいがちであること を心に留めておいてください。したがって、これを実行に移す前に、第 64 節のセキュリティに関する議論を読んでおいてください。 このことに言及した上で、あなたが作成した面白いひな型は、ぜひ投 稿してください。 外用ひな型は、LYXDir/lib/external_templates ファイルで定義され ています。自分用の版を UserDir/external_templates に置くこともで きます。 典型的なひな型は以下のようになります。 Template XFig

62 外用ひな型設定ファイル

71

GuiName "XFig: $$AbsOrRelPathParent$$Basename" HelpText An XFig figure HelpTextEnd InputFormat fig FileFilter "*fig" AutomaticProduction true Transform Rotate Transform Resize Format LaTeX TransformCommand Rotate RotationLatexCommand TransformCommand Resize ResizeLatexCommand Product "$$RotateFront$$ResizeFront \\input{$$AbsOrRelPathMaster$$Basenamepstex_t} $$ResizeBack$$RotateBack" UpdateFormat pstex UpdateResult "$$AbsPath$$Basenamepstex_t" Requirement "graphicx" ReferencedFile latex "$$AbsOrRelPathMaster$$Basenamepstex_t" ReferencedFile latex "$$AbsPath$$Basenameeps" ReferencedFile dvi "$$AbsPath$$Basenameeps" FormatEnd Format PDFLaTeX TransformCommand Rotate RotationLatexCommand TransformCommand Resize ResizeLatexCommand Product "$$RotateFront$$ResizeFront \\input{$$AbsOrRelPathMaster$$Basenamepdftex_t} $$ResizeBack$$RotateBack" UpdateFormat pdftex UpdateResult "$$AbsPath$$Basenamepdftex_t" Requirement "graphicx" ReferencedFile latex "$$AbsOrRelPathMaster$$Basenamepdftex_t" ReferencedFile latex "$$AbsPath$$Basenamepdf" FormatEnd Format Ascii

72

第 6 章 外部素材を取り込む

Product "$$Contents(\"$$AbsPath$$Basenameasc\")" UpdateFormat asciixfig UpdateResult "$$AbsPath$$Basenameasc" FormatEnd Format DocBook Product "&lt;graphic fileref=\"$$AbsOrRelPathMaster$$Basenameeps\"&gt; &lt;/graphic&gt;" UpdateFormat eps UpdateResult "$$AbsPath$$Basenameeps" ReferencedFile docbook "$$AbsPath$$Basenameeps" ReferencedFile docbook-xml "$$AbsPath$$Basenameeps" FormatEnd Product "[XFig: $$FName]" FormatEnd TemplateEnd
ご覧の通り、ひな型は TemplateTemplateEnd で閉じられます。ひな 型には、一般的な設定を行うヘッダ部と、サポートされている主要な文 書ファイル書式の設定を行う FormatFormatEnd 部があります。

621

ひな型のヘッダ

AutomaticProduction true|false このひな型で扱うファイルを LYX が 生成しなくてはならないか否か。このコマンドは、一度だけ必ず現 れなくてはなりません。 FileFilter &lt;パターン&gt; 望むファイル群を表示するために、ファイルダ イアログで使用するフィルタ用 glob パターン。2 つ以上のファイル 拡張子があり得る場合（たとえば、tgif にはobj とtgo がありま す）「*{obj,tgo}」の様なパターンを使用してください。このコ 、 マンドは、一度だけ必ず現れなくてはなりません。 GuiName &lt;GUI 名&gt; この文字列はボタン上に表示されます。このコマンド は、一度だけ必ず現れなくてはなりません。 HelpText &lt;文章&gt; HelpTextEnd 外部素材ダイアログで使用されるヘル プ文。このひな型がユーザに何を提供できるのか、ユーザに説明す

62 外用ひな型設定ファイル

73

るのに十分な情報を盛り込んでください。このコマンドは、一度だ け必ず現れなくてはなりません。

InputFormat &lt;書式&gt; オリジナルファイルのファイル書式。これは、LYX が知っている書式名でなくてはなりません（第 31 章参照） 。この ひな型が、2 つ以上の書式のオリジナルファイルを取り扱える場合 は、 *」を使用してください。この場合、LYX はファイル書式を推 「 定するために、ファイル自体に詮索を試みます。このコマンドは、 一度だけ必ず現れなくてはなりません。 Template &lt;ID&gt; このひな型の（他と重複しない）名称。代入マクロを含 めてはなりません（下記参照） 。 Transform Rotate|Resize|Clip|Extra このコマンドは、このひな型が どのような変換をサポートしているかを指定します。 これは全く登場 しなくても 1 回以上現れても構いません。このコマンドは、外部素材 ダイアログ中の対応するタブを使用可能にします。Transform コマ ンド一つずつに応じて、Format 部に、対応する TransformCommand コマンドか TransformOption コマンドを置かなくてはなりません。 これを行わないと、この書式での変換はサポートされません。

622

Format 部

Format LaTeX|PDFLaTeX|PlainText|DocBook この書式定義が定める主 要な文書ファイル書式。すべてのひな型が、全文書ファイル書式に 対して意味のある表示ができるわけではありません。それでも、全 書式に対して Format 部を定義してください。表示する方法がない ときは、ダミーテキストを使用してください。これによって、書き 出した文書内で、少なくとも外部素材への参照を見ることができる ようになります。 Option &lt;名称&gt; &lt;値&gt; このコマンドは、Product での代入に使うマクロ $$&lt;名称&gt;を新たに定義します。&lt;値&gt;自体にも代入マクロを使うこと ができます。Product で&lt;値&gt;を直接使用するよりも優れた点は、$$&lt; 名称&gt;に代入された値が、その文書書式で有効な非必須引数となる ように健全化されることです。このコマンドは全く登場しなくても 1 回以上現れても構いません。

74

第 6 章 外部素材を取り込む

Product &lt;文&gt; 書き出された文書に挿入される文。実のところ、これが最 も重要なコマンドであり、とても複雑になることがあります。この コマンドは、一度だけ必ず現れなくてはなりません。
A Preamble &lt;名称&gt; このコマンドは、L TEX プリアンブルに入れるプリア ンブル片を指定します。これは PreambleDefPreambleDefEnd を使用して定義しなくてはなりません。このコマンドは全く登場し なくても 1 回以上現れても構いません。

ReferencedFile &lt;書式&gt; &lt;ファイル名&gt; このコマンドは、変換過程で生 成され、特定の書き出し書式に必要とされるファイルを示します。 ファイル名が相対パスである場合には、親文書に対する相対パスと して解釈されます。このコマンドは全く登場しなくても 1 回以上現 れても構いません。
A Requirement &lt;package&gt; 必要とされる L TEX パッケージ名。パッケージ A は、L TEX プリアンブル中で\usepackage{}を使って取り込まれま す。このコマンドは全く登場しなくても 1 回以上現れても構いま せん。

TransformCommand Rotate RotationLatexCommand このコマンドは、 回 A X コマンドを使用するように指定します。 転用に、組み込みの L TE このコマンドは、1 回現れても全く現れなくても構いません。 TransformCommand Resize ResizeLatexCommand このコマンドは、伸 A 縮用に、組み込みの L TEX コマンドを使用するように指定します。 このコマンドは、1 回現れても全く現れなくても構いません。 TransformOption Rotate RotationLatexOption このコマンドは、回 転が非必須引数を通じて行われるように指定します。このコマン ドは、1 回現れても全く現れなくても構いません。 TransformOption Resize ResizeLatexOption このコマンドは、伸縮 が非必須引数を通じて行われるように指定します。このコマンド は、1 回現れても全く現れなくても構いません。 TransformOption Clip ClipLatexOption このコマンドは、切り抜きが 非必須引数を通じて行われるように指定します。このコマンドは、 1 回現れても全く現れなくても構いません。

63 代入機構

75

TransformOption Extra ExtraLatexOption このコマンドは、 追加の非 必須引数を使用することを指定します。このコマンドは、1 回現れ ても全く現れなくても構いません。 UpdateFormat &lt;書式&gt; 変換されたファイルのファイル書式。これは、LYX が知っている書式名でなくてはなりません（ツール ◃ 設定:変換子ダ イアログを参照） 。このコマンドは、一度だけ必ず現れなくてはな りません。 UpdateResult &lt;ファイル名&gt; 変換されたファイルのファイル名。ファイ ル名は絶対パスでなくてはなりません。このコマンドは、一度だけ 必ず現れなくてはなりません。

623

プリアンブルの定義

外用ひな型設定ファイルには、PreambleDefPreambleDefEnd で囲 んだプリアンブル定義を追加することができます。これらの定義は、ひ な型の Format 部で使用することができます。

63

代入機構

外部素材機構が外部プログラムを呼び出すときには、ひな型設定ファ イルで定義されたコマンドにしたがって行われます。これらのコマンド には、実行前に展開されるマクロをいろいろ入れることができます。実 行は、つねに元の文書があるディレクトリで行われます。 また、外部素材が表示されるときにはいつでも、その名称は代入機構 によって組み立てられ、ひな型定義中の他のほとんどのコマンドも代入 をサポートしています。 使用できるマクロは以下の通りです。

$$AbsOrRelPathMaster LYX 親文書への絶対ファイルパスないしは相対 ファイルパス $$AbsOrRelPathParent LYX 文書への絶対ファイルパスないしは相対ファ イルパス $$AbsPath 絶対ファイルパス

76

第 6 章 外部素材を取り込む

$$Basename パスおよび拡張子を除いたファイル名 $$Contents(“filenameext”) このマクロは、filenameext と云う名 のファイルの中身を展開します。 $$Extension ファイル拡張子（点を含む） $$FName 外部素材ダイアログで指定されたファイルのファイル名。これは LYX 文書への絶対パスでも良いですし、相対パスでも構いません。 $$FPath $$FName のパス部分（LYX 文書への絶対パス名か相対パス名） $$RelPathMaster LYX 親文書への相対ファイルパス $$RelPathParent LYX 文書への相対ファイルパス $$Sysdir このマクロは、システムディレクトリの絶対パスを展開しま す。これは、典型的には、LYX に同梱されているヘルパースクリプ ト群を示したりするのに使用されます。 $$Tempname 元の文書が閉じられたり、挿入されていた外部素材が削除さ れたりすると自動的に削除される一時ファイルのフルパスとファイ ル名。
パスを示すマクロはすべて最後のディレクトリ区切りも含んでいますので、 たとえば絶対パスのファイル名を $$AbsPath$$Basename$$Extension の ようにして作ることができます。 上記マクロは、特記しない限りはすべてのコマンドで代入が行われま す。Transform コマンドと TransformCommand コマンドが有効にされて いる場合、Product コマンドは、これらに加えて以下の代入もサポート します。

$$ResizeFront 伸縮コマンドの前置部。 $$ResizeBack 伸縮コマンドの後置部。 $$RotateFront 回転コマンドの前置部。 $$RotateBack 回転コマンドの後置部。 Option コマンドの値に入れる文字列では、 Transform コマンドと TransformOption コマンドが有効にされていれば、以下の代入もサポートされます。

63 代入機構 $$Clip 切り抜きオプション。 $$Extra 追加オプション。 $$Resize 伸縮オプション。 $$Rotate 回転オプション。

77

どうしてこんなに多くのパス関連マクロがあるのか不思議に思われるか もしれません。主に以下の二つの理由があります。

1 相対ファイル名と絶対ファイル名は、それぞれ相対的あるいは絶対 的なままで維持されなくてはなりません。ユーザにはどちらかの形 を好む理由があるのかもしれません。たとえば相対名は、いろいろ なマシンで作業をする持ち運び用の文書で役立ちます。絶対名は、 プログラムによっては必要とされることがあり得ます。
A 2 L TEX は、相対ファイル名に関して、LYX や入れ子にした取り込み ファイル中の他のプログラムとは異なった取り扱いを行います。LYX にとって相対ファイル名とは、常にこのファイル名が書かれている A 文書に対して相対的なものになります。L TEX にとっての相対ファ イル名は、常に親文書に対するものになります。これら二つの定義 は、一つの文書しかないときには同じですが、部分文書を含む親文 書があるときには異なったものとなってきます。つまり、相対ファ A イル名は、L TEX に提示されるときに変換されなくてはならないの です。幸い、正しいマクロを選びさえすれば、これは LYX が自動的 に行ってくれます。

すると、新しく作ったひな型定義では、どのパス関連マクロを使うべき でしょうか。このルールは難しくありません。つまり、

• 絶対パスが必要とされるときには$$AbsPath を使う。 • 代入された文字列が、ATEX インプットの一種である場合には、 L $$AbsOrRelPathMaster を使う。 • それ以外ならば、 ユーザの選択を尊重するために$$AbsOrRelPathParent を使う。

78

第 6 章 外部素材を取り込む

このルールが機能せずに、たとえば相対名が必要となる特殊な場合もあり ますが、 通常、 上記でうまく動作します。 特殊例の例としては、 上述の XFig ひな型での ReferencedFile latex "$$AbsOrRelPathMaster$$Basenamepstex_t"と いうコマンドがあります。この場合、pstex_t ファイルの複写子は、ファ イル内容を書き換えるのに相対名を必要とするために、絶対名を使用す ることができないのです。

64

セキュリティに関する論点

外部素材機能は、多くの外部プログラムとの橋渡しをし、しかもそれ を自動的に行うので、そのセキュリティ面での帰結を考慮しなくてはなり ません。特に、ユーザは好きなファイル名やパラメータ文字列を含める ことが許されていて、しかもそれらがコマンドに展開されるので、ユー ザが文書を閲覧したり印刷したりしたときに、任意のコマンドを実行す ることができるような悪意ある文書を作成することが可能となりましょ う。これは、我々がぜひとも避けたいことなのです。 しかしながら、外部プログラムコマンドはひな型設定ファイルでのみ 指定されているので、LYX が安全なひな型でのみ適切に設定されている ならば、セキュリティ上の問題は発生しません。これは、外部プログラ ムが system システムコールではなく、execvp システムコールで呼び出 されているため、ファイル名やパラメータ部からシェル経由で任意のコ マンドを実行することはできないためです。 これは、外部素材ひな型でどのようなコマンド文字列を使用すること のできるかについて、制限があることを意味します。特に、パイプやリ ダイレクトはそのまま使用することはできません。これは、LYX の安全 性を維持するためにそうしなくてはならないのです。もしシェル機能の 一部を使用したいとすると、これを完全に統御の下においたまま行う安 全なスクリプトを書いた上で、このスクリプトをコマンド文字列から呼 び出すようにしなくてはなりません。 シェルと直接やりとりするひな型を設計することは可能ではあります が、悪意のあるユーザが狡猾なファイル名やパラメータを書くことによっ て、任意のコマンドを実行できるようになるため、一般的には、統御下 に置いた状態で execvp システムコールを使用する安全なスクリプトのみ を使用することをお勧めします。確かに、管理された環境下で使用する 分には、通常のシェルスクリプトを使用する方に流れる誘惑はあります。

64 セキュリティに関する論点

79

そうした場合には、お使いのシステムに簡単に濫用することのできるセ キュリティホールを、間違いなく導入することを理解しておいてくださ い。オープンソースの伝統に従って、私たちは人々に新しいひな型を投 稿してくれるよう促していますが、そのような安全でないひな型は LYX の標準頒布版には取り入れるべきでないとすることには当然の正当性が あります。公式の頒布チャンネルから出荷されている LYX には、安全で ないひな型は決して入っていません。 外部素材を含めることで強力な力を手に入れることができますが、この 力とともにセキュリティ上の危険を導入してしまわないように気をつける 必要があります。無防備なスクリプトのたった一行に入り込んだ、ちょ っ としたエラーが、巨大なセキュリティ上の問題に扉を開きうるのです。し たがって、もしこの問題を完全に理解していないならば、特定のひな型が 安全であるかどうか疑問がある際には、知識豊富なセキュリティの専門 家か、LYX 開発チームに相談してみてください。そしてこの相談は、管 理されていない環境下でこれを使用する前に、行うようにしてください。

</data>
       <segmenter>japanese</segmenter>
       <stemmer>depluralize</stemmer>
       <kb>japanese-indexing</kb>
</test>
</testset>
