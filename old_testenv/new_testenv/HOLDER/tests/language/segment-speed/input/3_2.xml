<?xml version="1.0" encoding="UTF-8"?>
<testset>
<test>
<data>
平成１７年度卒業論文

Web 閲覧履歴共有機能を用いた コミュニケーションツールの研究

情報通信工学科 情報通信システム学講座

 智志 指導教員 寺田 実 助教授 提出



概要

研究目的
近年のリアルタイムコミュニケーションツールの発達，個人の興味・関心を積極的に開示するこ とによるコミュニケーションツールの登場を背景に，個人が閲覧する Web ページの URL もまたそ の個人の興味・関心を反映するのではないかということに着目し，Web 共有閲覧履歴を利用する コミュニケーションツールの着想を得た．URL を利用するコミュニケーションツールとして，同 じ Web ページを閲覧する者同士でチャ ットを行うことができるツールは存在するが，Web 上に存 在する URL の数に対してユーザの数は少なく，他のユーザに遭遇しにくいという問題がある． 本研究では，同じ Web ページに訪れたユーザ同士でチャ ットを行うことで，似た興味・関心を 持つユーザ同士のコミュニケーションを促進するシステムを開発する．また，遭遇率を向上するた めの機能も実装し，最終的に，近い興味・関心を持つユーザ同士が交流出来たのかを評価し，本シ ステムのコミュニケーションツールとしての有用性や改善点を探ることを目的とする．

方法
プログラム自体の実装は Java で行う．システムはユーザが実際に利用しユーザインタフェース となるクライアントと，システム動作の管理を行うサーバに分かれる． コミュニケーション手法としては文字によるチャ ットを実装する．同じ Web ページを閲覧する ユーザ同士で会話をすることができる．ユーザの遭遇率を上げるために「待ち伏せ機能」と「共有 閲覧履歴」の機能を実装する． 「待ち伏せ機能」はあらかじめ登録した Web ページに他のユーザが訪れると，登録したユーザ と訪れたユーザの両者に通知を行う仕組みである． 「共有閲覧履歴」はシステム中のユーザが閲覧した履歴が共有される．他のユーザの閲覧動向を 追いかけることができる．

結論
「待ち伏せ機能」と「共有閲覧履歴」に関しては動作を確認することが出来た．チャ ット機能に ついては，不具合や未実装機能が多く，コミュニケーションツールとしての有用性を確認すること が出来なかった．

2

目次
第 1 章 序論

11 12

本研究の着目点  121 122
興味・関心を開示することによるコミュニケーション 閲覧 URL の利用

研究の背景



123 コミュニケーション形態 本研究の目的本論文の構成  

第 2 章 関連研究

21

関連研究   211 興味・関心を開示することによるコミュニケーションツール 212 位置情報の利用 

213
第 3 章 設計

リアルタイムコミュニケーションツール   

31 32 33

想定する利用方法 システムの全体構成

URL 取得のための Firefox 拡張 331 ブラウザからの URL の取得   332 Firefox 拡張機能 333 334 URL 取得のための Firefox 拡張の概要 送信の設定   

34

335 通信を解析することによる URL の取得 クライアント341 クライアントの導入   342 343 344 345 346 347 348
各種設定  サーバへの接続/切断  

URL の送信/非送信   共有履歴の表示  待ち伏せ設定  
チャ ット  ユーザ名，ユーザ ID の変更   コネクションの管理   共有閲覧履歴の管理  

35

サーバ   

第 4 章 実装 待ち伏せ設定の管理   チャ ットの管理 

動作環境と開発環境


動作環境 

Java の GUI クラスライブラリ

42

413 開発環境  414 ソースコード   システムの接続形態   421 422 Firefox 拡張とクライアントの接続   クライアントとサーバの接続 

43 44

URL 取得のための Firefox 拡張 クライアント441 ユーザ ID の生成 442 443 444 445 446
設定の保存サーバへの接続/切断  

URL の送信/非送信   共有履歴の表示  待ち伏せ設定  

45

447 チャ ット  サーバ451 452 453 454 455
コネクションの管理   共有閲覧履歴の管理   待ち伏せ設定の管理   チャ ットの管理  発言の管理   

第 5 章 評価


評価の概要 評価の結果

  

第 6 章 結論

まとめ今後の課題


システムの完成 


622 動的なインタフェイス  情報を公開することへの抵抗感

参考文献

4

目次

本棚org のトップページ

mixi のトップページ   mixi のプロフィール画面
はてなブックマークのトップページ   閲覧履歴共有のためのブラウザ拡張を使用中の画面 


TEGLET TB2 を使用中の画面 yakalike を使用中の画面 MSN Messenger を使用中の画面
待ち伏せのイメージ  システム構成 

URL 取得のための Firefox 拡張 URL 送信の切替えURL 送信の状態 URL 取得のための Firefox 拡張 - 設定画面   ユーザ名を設定するダイアログ
ユーザ ID を設定するダイアログ

   初期設定直後のメイン画面   

310 各種設定画面311 設定の保存をしたときの確認ダイアログ312 サーバへの接続/切断を切替えるボタン 313 最近閲覧した URL のリスト   314 最新の共有閲覧履歴のリスト   315 表示する履歴の数を指定するプルダウンリスト 316 待ち伏せ登録画面 317 URL に間違いがあった場合のエラーメッセージ318 待ち伏せ URL を訪れた “komae” に表示されるダイアログ  319 待ち伏せ URL に訪問があった “chofu”，”machida” に表示されるダイアログ320 「電気通信大学」のチャ ットに参加するかどうかを尋ねるダイアログ 321 「電気通信大学」のチャ ット画面   

5

表目次
41
閲覧履歴の情報とカラム名の対応   

48

6

第1章

序論

11

研究の背景

日常生活において Web を利用することは，もはや当たり前のこととして定着している．特に， ユーザ同士が交流をするためのメディアとしての発展は目ざましいものがある．例えば，Web 上 で創作された作品が，ユーザ同士が交流する中で大きく広まり，それをきっかけとして CD の発売 にまで至るといった動き [1, 2] があったり，Web 上のユーザ同士の交流をもとにした書籍 [3] や映 画，ドラマも作られ，話題を呼ぶという動きが起こるなど，Web 上のユーザがレコード会社や出 版社といったメディアを動かす現象も起きた． また，Web 上で交流をするためのサイトやツールも様々なものが登場している．不特定多数との 交流が可能な Web 掲示板や Web チャ ットのような古くから存在するシステムに加え，専用のクラ イアントをインストールし，メンバリストとして登録された特定のユーザと 1 対 1，または 1 対少 数の通信が可能なインスタントメッセンジャ [4, 5] の利用も広まった．それ以外にも，mixi [6] や

GREE [8] のような SNS(ソーシャル・ネットワーキング・サイト) と呼ばれるサービスでは，既存 の参加者からの招待が無ければサービスに入会することができないため，参加者同士は招待した/
されたの関係で結ばれている．SNS のサービス内容としては，メンバリストとして登録したユー ザのプロフィールや，日記の更新情報などが自分のトップページに表示されるなど，ユーザは他の ユーザとの” つながり” を一目で意識できるようなつくりになっている． 積極的に個人情報を公開し，同じ興味や趣味を持つユーザ同士で交流するためのサイトも登場 し，人気を博している．上記で述べた mixi では，トップページにプロフィールや自分のメンバリ スト，音楽 CD や書籍のレビューなど，ユーザのパーソナリティが色濃く反映された情報を全面的 に公開することができるようになっている．mixi は 2005 年 12 月の時点で会員が 200 万人を超え た．また， 「本棚通信:控え目なグループコミュニケーション」 [9] では，自分の所有する本の一覧 を” 本棚” として登録，公開できるサイト” 本棚org” [10] を実際に運営実験しているが，登録され た本棚の数は，論文執筆時 (2006 年 1 月) で 4700 を超え，広く利用されている．

12

本研究の着目点

この節では，趣味を開示することによるコミュニケーション，Web 上におけるコミュニケーショ ン形態，また個人の趣味を反映する情報でもあり，同時に Web 上の位置情報でもある URL の利 用，の３つの観点から，本研究で着目したコミュニケーション形態について説明する．

121

興味・関心を開示することによるコミュニケーション

上記の mixi や本棚org では，積極的に自分の趣味を公開するかたちでコミュニケーションが成 立している面をもつ．このように，趣味や個人情報を公開することで，その情報を会話のきっかけ とすることが出来，交流を広げることが出来るのではないかと考えた．

第 1 章 序論

7

そこで本研究では公開する情報の対象として，自分が閲覧した Web ページの URL を利用する ことに着目した．

122

閲覧 URL の利用

個人が閲覧する Web ページもまた，その個人の趣味を色濃く反映するものであり，同じ Web ページを閲覧するユーザ同士の興味・関心は近いのではないかと考えられる．例えば Web 上には ソーシャルブックマークと呼ばれるサービスを行うサイト [11, 13] が存在する．これらは面白いと 感じた Web サイトを” ブックマーク” に登録し公開することで趣味の近いユーザ同士が交流をは かることが可能になっている． また，Web を実世界における” 公園” や” 街中” などの広大な空間と捉えると，URL は広大な

Web 上における位置を示す情報として利用されている．実世界では，同じ場所に訪れているユー ザ同士はお互いを認識することが出来るが，Web 上では，同じ場所，つまり同じ URL に訪れてい るにも関わらず，通常はユーザ同士を認識することは出来ない．戸口ブラウザ [17] や yakalike [21]
は同じ Web ページに訪れたユーザ同士でチャ ットを行うことができるツールである．しかし Web 上の URL の数に比べると，ユーザの数は圧倒的に少なく，yakalike の使用感として，他のユーザ に遭遇することが難しいという意見が挙げられている． そこで本研究では，同じ Web ページを閲覧するユーザ同士でコミュニケーションをするシステ ム形態に着目し，さらに，そのシステム中のユーザ同士が遭遇しやすくするための工夫の実現を試 みた．

123

コミュニケーション形態

Web は交流そのものを目的としたメディアとして利用できる．本来，他人との会話は楽しいもの であるから，コミュニケーションそのものもエンターテイメントとして楽しむことが出来る．Web 上のコミュニケーション形態は大きく分けて，チャ ットやメッセンジャのような同期的なものと，
掲示板や Weblog のコメントやトラックバック機能のような非同期のものの２つに分かれるが，本 研究では，リアルタイムにテンポよくレスポンスが返って来る楽しさを持つチャ ットに着目した．

13

本研究の目的

本研究では，同じ Web ページに訪れたユーザ同士でチャ ットを行うことで，似た興味・関心を 持つユーザ同士のコミュニケーションを促進するシステムを開発する．また，遭遇率を向上するた めの機能も実装し，最終的に，近い興味・関心を持つユーザ同士が交流出来たのかを評価し，本シ ステムのコミュニケーションツールとしての有用性や改善点を探ることを目的とする．

14

本論文の構成

この章では，研究の背景となった，昨今の Web 上に新しく登場した Web コミュニケーション ツールなどの紹介をした後，本研究の着目点と目的を述べた． 第 2 章では，本研究と関連する既存の各種コミュニケーションツールを紹介し，本研究との相違点 を述べる．

第 1 章 序論 第 3 章では，本研究で作成したシステムの設計について述べる． 第 4 章では，本研究で作成したシステムの実装について述べる． 第 5 章では，評価の概要や結果について述べる． 第 6 章では，結論として考察や今後の課題を述べる．

8

9

第2章

関連研究

21
行う．

関連研究

この節では，本研究と関連する既存のソフトウェアや研究例について紹介，本研究との比較を

211
本棚org

興味・関心を開示することによるコミュニケーションツール

本棚org は，システム中に作成した仮想の” 本棚” に，好きな本の情報を登録できるシステムで ある ( 21)．本自体の情報の他に，登録された本に誰でもコメントを付けることができる．自分 のプロフィールや趣味を記入・表示する機能は無いが，本は個人の考えや趣味を大きく反映すると 考えられる．以下に，本棚org と本研究の比較を述べる．

• 本棚org とは，自分の読んだ・見た情報を用いる，という点で本研究と一致する． • 公開する情報の対象が書籍である点が本研究と異なる． • 本棚org は，ある本をテーマとしたチャ ットルームなどが生成され，そこで会話ができる機
能などは持たないが，本研究はある Web をテーマとしたチャ ットルームにおいて会話が出来 る機能を主眼を置く．

ソーシャル・ネットワーキング・サイト 昨今になってさまざまなソーシャル・ネットワーキング・サイトが登場したが，ここでは現時点 で日本において最大級のユーザ規模を持つ mixi を紹介する ( 22)．以下に mixi の特徴を述べる．

• 既存の会員からの招待を受けない限り入会することができない． • 自分のプロフィールや趣味などを記入し，ユーザ同士が相互に閲覧することができる．( 23) • ” コミュニティ” に加入することができる．コミュニティとは，mixi 上の掲示板のことであ る． Java」「クラシックが好きだ！」など個別に設定されたテーマについて，共通する趣味 「 ，
や関心ごと，考えなどを他のメンバーと共有することができる．参加することでプロフィー ルの参加コミュニティリストに表示されるため，他者に自分の趣味や性格など、どういった 人間なのかを端的に表現することもできる [7]．

• 日記や書評や CD のレビューを登録，表示できる．

第 2 章 関連研究

10

 21: 本棚org のトップページ 画面最上部に検索フォームがある．画面上部には最近登録された本の表紙が表示されている．画 面中央部には最近更新された本棚の情報が表示されている．中央下部には本棚がランダムで表示 されている．

第 2 章 関連研究

11

• 個別のユーザへ” メッセージ” を送ることができる．” メッセージ” とは，いわば mixi 上の 電子メールのようなものである．
以下に，本研究との比較を述べる．

• 個人の趣味を積極的に公表することで交流のきっかけとする，という点で本研究と一致． • mixi は既存の会員からの紹介が無いと参加できない，閉じた形態であるが，本研究ではそう
いった制限は無い．

• mixi はプロフィールや日記，書評など，公表する情報が多岐に渡るが，本研究は閲覧 URL
を開示するにとどめる．

• mixi におけるコミュニケーション手段は，日記ヘのコメントやコミュニティへの書き込み， 個別ユーザへメッセージの送信 (メールのようなもの) など，時間差のあるものであるが，本
研究はチャ ットを実装する点が異なる．

• mixi は個人のプロフィールや日記など，個人情報を含んだ文章の情報を主体として交流が為
されるが，本研究は Web ページの閲覧 URL の利用を主眼に置くという点が異なる．

ソーシャル・ブックマーク・サイト 昨今になってソーシャルブックマークサイトも数多く登場したが，ここでは日本において最大級 のユーザ規模を持つ「はてなブックマーク」を紹介する ( 24)．以下にはてなブックマークの機 能を述べる [12]．

• 自分が面白いと思ったページを” ブックマーク” として登録/公開することができる． • 登録されたブックマークは自動でカテゴリ分され，整理される． • ブックマークに含まれるキーワードを元に、関連したページを探すことができる． • 同じページをブックマークしている他のユーザーがわかる． • 似たような話題を追いかけている人を探すことができる． • ブックマークにコメントを付けることが出来るため，コメントを通じてそのページに他のユー
ザがどのような感想を持ったかを知ることができる． 以下に，本研究とはてなブックマークの比較を述べる．

• URL を用いて個人の趣味を反映させることが出来る点で類似． • はてなブックマークの直接のコミュニケーション手段はコメントによるものだが，本研究は チャ ットを実装する点が異なる． • はてなブックマークも本研究も URL を用いるが，はてなブックマークはユーザがどの URL を訪れたのかという情報は全く利用しないため，登録された URL を訪れることはコミュニ
ケーション自体に何も寄与しない．対して本研究はユーザが登録した URL に他のユーザが 訪れることをきっかけとしてコミュニケーションが開始されるという点でもっとも大きく異 なる．

第 2 章 関連研究

12

 22: mixi のトップページ ログイン直後の自分専用の画面である．画面左下に” マイミクシイ” として，自分と関連のある他 のユーザリストが表示されている．画面中央には” マイミクシイ” が記入した最新の日記リスト や，自分の日記へのコメントなどが表示されている．画面中央下部には，自分が記入した最新の 日記リストが表示されている．

第 2 章 関連研究

13

 23: mixi のプロフィール画面 ログイン直後の自分専用画面とは若干構成が異なる．画面中央に自己紹介を表示することが出来 る．画面左下には参加しているコミュニティ一覧が表示されている．

第 2 章 関連研究

14

 24: はてなブックマークのトップページ 画面下部のテーブルには，最新の人気 Web ページの URL が表示されている．右上部には検索 フォームがある．その下には人気を集めているブックマークが表示されている．

第 2 章 関連研究 閲覧履歴共有のためのブラウザ拡張 [14]

15

“閲覧履歴共有のためのブラウザ拡張” は Mozilla Project によるブラウザ”Firefox “[15] の拡張
機能を用い，この拡張を組み込んだ Firefox で Web ページを閲覧することによって，閲覧履歴を 共有するシステムのことである ( 25)．以下に，このブラウザ拡張の特徴を述べる．

• Firefox で閲覧している履歴がこの拡張によって Web サーバで動作している CGI に送信さ
れ，集計される．

• 集計されたデータは，この拡張を通じて週間ランキング，月間ランキング，最新 1000 個のラ
ンキングとしてまとめられたものを閲覧することができる． 以下に，このブラウザ拡張と本研究の比較を述べる．

• ブラウザで閲覧した履歴を公開するという点で一致． • このブラウザ拡張はコミュニケーション手段を持たず，あくまで閲覧履歴の共有による情報 共有と情報発見の容易化の促進を主眼に置いていることに対し，本研究はコミュニケーショ ンを主眼に置いている点で大きく異なる．
なお本研究は，ブラウザから閲覧 URL を取得するために，この Firefox 拡張モジュールを用い た． 以上の関連研究を実装の方式に関して分類すると， 「本棚org」「mixi」「はてなブックマーク」 ， ， はいずれも Web サイトによるツールである．また「閲覧履歴共有のためのブラウザ拡張」は XUL によって実装され，Firefox の拡張機能を用い，Firefox 上で動作する． 本研究は Java アプリケーションにより，ブラウザと独立した実装を行ったことが，以上のツー ルと大きく異なる点である．

212

位置情報の利用

この小節では，実世界の位置情報を用いたコミュニケーションツールや，位置情報として URL を用いた Web 上のコミュニケーションツールを紹介し，本研究との比較を行う．

らくがきノート [16]

“らくがきノート” は携帯情報端末を用いて実世界の場所に” らくがき” を残すことにより，非同 期の通信を行うことができるコミュニケーションツールである． 以下にらくがきノートの特徴を述べる． • ユーザは携帯情報端末のスタイラスによる手書きのメッセージを，ユーザが記入を行った場
所に残すことが出来る．

• メッセージが保存された場所に後から訪れたユーザは，その場所に保存されたメッセージを
携帯情報端末で読み出すことが出来る．

• 実世界に存在する任意の物体に RFID タグを添付しておき，携帯情報端末に取り付けた RFID
読み取り機で読み取ることにより，場所を認識する．

第 2 章 関連研究

16

 25: 閲覧履歴共有のためのブラウザ拡張を使用中の画面 システムに保存されている共有閲覧履歴のランキングが閲覧回数でソートされ，画面左のリスト に表示されている．

第 2 章 関連研究

17

• システムは，RFID タグをキーとしたメッセージ情報を保存するサーバと，実際にメッセー ジの読み書き，RFID の読み取りを行うクライアント (携帯情報端末) に分かれる．
以下にらくがきノートと本研究の比較を述べる．

• 同じ” 場所” を訪れることを交流のきっかけとするアプローチは類似している． • らくがきノートは” らくがき” を残すことによる非同期の通信を行うが，本研究はチャ ット
によるリアルタイムコミュニケーションを行う．実世界では，同時間に同じ場所に居る場合， 直接会話をすれば良く，らくがきを残す必要が無いためであると予想される．

• らくがきノートは実世界指向であるのに対し，本研究は Web 指向である点が大きく異なる．

TEGLET TB2 [18] TEGLET TB2 は，任意の Web ページにトラックバックやコメントを残すことが出来るツール である ( 26)．トラックバックとは，別のウェブログへリンクを張った際に，リンク先の相手に
対してリンクを張ったことを通知する仕組みのことである．このツールはマイクロソフトのブラウ ザである Internet Exproler [19] のツールバーに組み込んで利用する．

TEGLET TB2 の主たる機能は上記で述べた通りである．登録されたメッセージは TEGLET が
提供する中央のシステムに保存されるため，Web ページに何らかの影響を与えるものではない．訪 れた Web ページにメッセージが保存されていると，TEGLET ツールバーは保存されたメッセー ジを読み出して表示する．他にメール送信機能や，ビジネス文書のテンプレート作成機能なども持 つが，これらの機能は本研究と大きく離れるので省略する． 下に本研究との比較を述べる．

• Web の閲覧をきっかけとして交流を持つことが出来るというアプローチは類似している． • TEGLET TB2 は，コメントやトラックバックなどによる，時間差のあるコミュニケーショ ンを提供することに対し，本研究はチャ ットによる時間差の無いコミュニケーション機能を 提供するという点で大きな差がある．
また同様の機能を持つものとしてマイクロソフトの Web ディスカッション [20] も存在する．任 意の Web ページにコメントを残すことが出来る．コメント自体はサーバに保存される．これは公 開された Web サービスではなく，マイクロソフトオフィス製品に付加された機能で，主にイント ラネットなど内部ネットワークで用いるためのツールである．クライアントはオフィスと共に組み 込まれ，サーバ部はイントラネットの内部で動作させ，利用する．

戸口ブラウザ [17]

“戸口ブラウザ” は，同じ Web ページを訪れたユーザ同士でコミュニケーションを行うことの出
来るブラウザである．サーバは Java アプリケーション，クライアントは Java アプレットによって 実装され，ブラウザとして利用することができる．戸口ブラウザは以下のような特徴を持つ．

• Web ページを戸口ととらえ，画面にはドアを模したボタンや，チャ ットをするための画面， ユーザの移動を示す足跡のイラストを表示する画面を持つ．

第 2 章 関連研究

18

 26: TEGLET TB2 を使用中の画面 ブラウザで表示しているページに登録されたトラックバックが右側のボックスに表示されている．

• ドアを模した画面で” ノック” をすることができる．ノックをすると，同じ Web ページを訪 れているユーザの戸口ブラウザからノック音が発生する． • 他のユーザが他の Web ページに移動すると，足跡のイラストが表示され，そのイラストに
リンクが張られる． 以下に本研究と戸口ブラウザの比較を述べる．

• 同じ Web ページを訪れることで，チャ ットによるコミュニケーションをすることができると
いうアプローチは同じものである．

• 戸口ブラウザは，現在ユーザそのページを訪れているという情報と，ユーザは既に移動して いて次のページに移動したという足跡の情報から，ユーザ同士でお互い認識することができ
るが，本研究は Web ページに登録された” 待ち伏せ” によってユーザをお互い発見すること が出来る点で異なる．待ち伏せ機能については第 3 章で説明する．

第 2 章 関連研究

19

戸口ブラウザのプロトタイプ画面 (出典：第 12 回インタラクティブシステムとソフトウェアに 関するワークショ ップ (WISS2004) 論文集 pp149-150(2004))

yakalike [21] yakalike は同じ Web ページを訪れたユーザ同士でコミュニケーションを行うことのできる Firefox
拡張である．( 27) yakalike は厳密には同じドメインの URL に訪れているユーザ同士でコミュ ニケーションを行うことのできるツールである．画面右側にはユーザリストが表示され，同一ド メインにアクセスするユーザ同士がお互いを認識することができる．画面左上部はチャ ットのメッ セージが表示される．画面左下部は発言を記入するフィールドである．yakalike の主たる機能は以 上の通りである．以下に，yakalike と本研究の比較を行う．

• 同じ Web ページを訪れることで，チャ ットによるコミュニケーションをすることができると いうアプローチは同じものである． • yakalike では，交流するきっかけとなる URL は，自分が今ブラウザで見ている Web ページ のドメインの 1 カ所だけであり，他のユーザとなかなか巡りあえないという例が報告されて いる．それに対して本研究では第 3 章で説明する” 待ち伏せ” 機能により，交流のきっかけと
なる URL を分散することが出来る．

第 2 章 関連研究

20

 27: yakalike を使用中の画面 画面下部が yakalike の画面である．ブラウザで表示しているページにチャ ットが設定される．

第 2 章 関連研究

21

213

リアルタイムコミュニケーションツール

最後にこの小節では，本研究で採用したチャ ットによるリアルタイムコミュニケーションに関連 して，既存のチャ ットシステムで代表的なものを取り上げて紹介する．

Web チャ ットシステム Web 上でチャ ットを行うシステムはインターネットが広く利用され始めた頃から存在する．以下
に Web チャ ットシステムの典型的な機能を紹介する．

• ユーザはニックネームを設定し，入室 (ログイン) することにより，チャ ットルームに入るこ とが出来る． • 発言はサーバに送信し，ブラウザでそのデータを読み出す，という作業を繰り返すことによっ
てリアルタイムの会話が成立する．

• 多くは CGI を利用し，ブラウザで利用する形態である． Web チャ ットシステムは独立した Web サイトとして運営されているため，特定の URL をもち，
そこでのみチャ ットが行われる．本研究のシステムは特定の URL をもたず，閲覧するあらゆるサ イトでチャ ットを可能にした点が異なる．

インスタントメッセンジャ インスタントメッセンジャはあらかじめ登録したメンバと 1 対 1 ないし 1 対少数でプライベートな 会話を行うことができるツールである．既存のインスタントメッセンジャには MSN Messenger [4] や Yahoo! Messenger [5] などが存在する．画像は MSN Messenger のものである ( 28)． メッセージを送受するためには常にインターネットに接続している状態でなければならないが， これらツールの利用が広まった背景には，従来の電話回線に替わって ADSL や光回線など，常時 接続環境の普及がある． 本研究のツールもインスタントメッセンジャも，ブラウザと独立したプログラムによって，他の ユーザと 1 対 1 ないし 1 対少数の会話を行うことができるが，インスタントメッセンジャはそもそ も Web 閲覧とは全く関係なく動作し，本研究のツールは同じ Web ページの閲覧によって不特定の 出会ったユーザと会話を行うという点で大きく異なる．

第 2 章 関連研究

22

 28: MSN Messenger を使用中の画面 二人のユーザがチャ ットで会話をしている．左側に見えるのはユーザリストである．

23

第3章

設計

この章では，本研究で作成したシステムの設計を述べる．

31

想定する利用方法

この節では，本研究で作成したシステムをユーザがどのように利用するか，想定している利用の 方法を述べる．

導入
本システムは大きくわけてクライアント/サーバで構成される．構成の詳細は節 32 で後述する． 本システムを利用しようとするユーザは，クライアントを自分のマシンにインストールする．サー バはクライアントからネットワークを通じてアクセスできるマシン上で実行されている．

起動
本システムはユーザが Web 閲覧をするときに利用される．ユーザは Web 閲覧時にブラウザと共 に，本システムのクライアントを起動しておくだけで良い．

コミュニケーション
ユーザがあるサイトを閲覧しているとする．そのとき，システム中の他のユーザが同じサイトに 訪れると，そのユーザ同士はチャ ットを開始することができる．

待ち伏せ
ユーザが Web を閲覧中，面白いサイトを見付けたとする．そのユーザは本システムにそのサイ トの URL を登録することができる．本研究ではこの機能を” 待ち伏せ” と呼ぶ．その URL に他の ユーザが訪れると，設定した本人と訪れたユーザはチャ ットを開始することができる．(待ち伏せ のイメージは 31)

第 3 章 設計

24

 31: 待ち伏せのイメージ：(上) 右のユーザが待ち伏せている所に，左からユーザが訪れたと ころ / (下) チャ ットの開始

32

システムの全体構成

本システムは大きく分けて 3 つの部分に分かれる．

1 URL 取得のための Firefox 拡張 2 クライアント 3 サーバ
システム構成を 32 に示す．

Firefox 拡張はブラウザである Firefox から閲覧 URL を取得するために利用される．
クライアントは実際にユーザに利用され，ユーザインタフェイスの役目を果たす．Firefox 拡張 とクライアントは同時に同一マシン上で動作する． サーバはクライアントから送られた情報を保存したり，コネクションを管理するなどの動作を行 う．サーバは，Firefox 拡張とクライアントとは，通常は異なるマシン上で動作する． サーバとクライアントは，通常はネットワークを通して接続されている．以降の節では，これら 各部分の設計について，詳細な説明を述べてゆく．

33
331

URL 取得のための Firefox 拡張
ブラウザからの URL の取得

本研究では何らかの方法でブラウザから閲覧 URL を取得しなければならない．プライバシーを 守るためや，犯罪防止の観点からも当然のことであるが，あるアプリケーションとブラウザが同時

第 3 章 設計

25

 32: システム構成：2 人のユーザが本システムを利用している に動作しているとして，そのアプリケーションからブラウザで閲覧している URL を取得すること はできない．ブラウザを標準的に使っている限りは，外部アプリケーションに URL を開示するこ とは無いからである．そのため，URL を外部に通知する仕組みをブラウザに組み込まなくてはい けない．その機能を実現するために着目したのが Firefox の拡張機能である．

332

Firefox 拡張機能

本研究で利用した Firefox 拡張の説明をする前に，まず Firefox の拡張機能について説明を述べ ておく．拡張機能とは，ユーザの好みによって後から好きな拡張モジュールを組み込むことができ る機能のことで，Firefox 固有の機能のことである．また，拡張機能を果たすためのモジュールそ のものを拡張，またはエクステンションと呼ぶこともある．

333

URL 取得のための Firefox 拡張の概要

この拡張は小節 211 で説明した「閲覧履歴共有のためのブラウザ拡張」で作成された拡張のこ とである．本研究室で行われている閲覧履歴共有システムの研究のために，本研究室所属の八木原 が作成し，高須賀が改良を加えた ( 33)． 閲覧履歴共有システムは，履歴を送信するブラウザ拡張と，送信された履歴を管理する CGI に 分かれる．この拡張は閲覧履歴集計 CGI に閲覧履歴を逐次送信する機能があることから，その機 能をそのまま本研究の URL 取得のために利用した． なお，集計 CGI に保存された閲覧履歴ランキングを取得して表示する機能もあるが，この機能 は本研究では用いないため説明を省略する．

334

送信の設定

この拡張は URL を送信する/しない，の切替えを行うことができる ( 34)．

Firefox で開いた Web ページの読み込みが終了すると，Firefox 拡張は集計 CGI として設定さ
れている URL に履歴を送信する．この Firefox 拡張は履歴の送信先として設定された集計 CGI の

URL を自由に書き換えることができる ( 36)．送信先を同一マシン上で動作しているクライア
ントに書き換えれば，クライアントにて閲覧履歴の URL を取得することが出来る．

第 3 章 設計

26

 33: URL 取得のための Firefox 拡張 Firefox にインストールした後の画面表示例．

 34: URL 取得のための Firefox 拡張の URL 送信切替えボタン

“Send URL” のチェ ックを切替えることによって，URL を送信するかしないかを切替えることが
できる．”Show History Sidebar” は閲覧履歴集計 CGI に保存された閲覧履歴ランキングを表示す るサイドバーの表示/非表示の切替え用である．

 35: URL 送信の状態：(上) 送信をしている状態 / (下) 送信をしていない状態

第 3 章 設計

27

 36: URL 取得のための Firefox 拡張の設定画面 この設定画面の「集計」フィールドを書き換えることによって送信先 CGI の URL を変更するこ とができる．

335

通信を解析することによる URL の取得

閲覧 URL を取得する別の方法として，ブラウザと Web サーバの通信を解析するという方法も 考えられるが，閲覧したページの URL だけでなく，そのページから呼び出されている画像の URL や，ポップアップ広告の URL など，閲覧とは関係ない URL まで取得できてしまうため，本研究 ではこの方法を用いなかった．

34

クライアント

ユーザは上記の Firefox 拡張と供に，ここで述べるクライアントを導入し，本システムを利用する． 本システムにあまり詳しくない一般ユーザにも配布し利用してもらうことを念頭に置いたことから， インターフェイスは文字ベースの CUI(Character-based User Interface) ではなく，GUI(Graphical

User Interface) を用いた．
以下に，クライアントの設計の詳細を述べる．

341

クライアントの導入

ユーザ名の設定 クライアントの初回起動時には，ユーザ情報の設定を行う．最初に，ユーザ名を問い合わせる メッセージボックスが表示される ( 37)．ユーザは任意の名前を入力する． 「了解」をクリックす ると次のユーザ ID 設定画面へ進む． 「取消し」をクリックすると，そのままアプリケーションが終 了する．但し入力は必須はなく，空欄のまま次へ進むと”namelessness” がユーザ名として設定され る．設定したユーザ名は，チャ ットや履歴での表示に用いられる．ここでは，”machida” をユーザ 名として用いる．

第 3 章 設計

28

 37: ユーザ名を設定するダイアログ

 38: ユーザ ID を設定するダイアログ ユーザ ID の設定 続いて，ユーザ ID の設定を行うダイアログが表示される ( 38)．ユーザは ID を生成するため のパスワードとなる文字列を入力する．ここで入力した文字列がそのまま ID になるわけではなく， ハッシュ関数である MD5 [22] によってハッシュ化されたものが用いられる．但し入力は必須でな く，空欄のまま次へ進むとランダムな文字列がパスワードとして設定され，それを元に ID が生成 される．ここでは 9 文字の文字列をパスワードとして設定している． ユーザ ID はユーザ同士を区別するために用いられる．ユーザ名が同じユーザ同士であっても， ユーザ ID が異なれば，それは異なるユーザとしてシステムに認識される．文字列によるパスワー ドを用いたのは，同じユーザが異なる環境でクライアントを利用する場合，同じパスワードを用 いれば同じユーザとして利用できるようにするためである．ID に関しての詳細は小節 441 で述 べる． 以上の設定が終わるとメイン画面が表示される． 39 は初期設定直後のメイン画面である．

342

各種設定

ここでは，クライアント動作の設定や，本システムのサーバプログラムが動作しているサーバ名 または IP アドレスを設定することができる ( 310)．

起動と同時にサーバと接続する クライアントの起動と同時にサーバに接続するかどうかを設定する．

第 3 章 設計

29

 39: 初期設定直後のメイン画面

第 3 章 設計

30

 310: 各種設定画面

 311: 設定を保存したときの確認ダイアログ 起動と同時に，ブラウザから URL を取得し，サーバに送信するスレッドを実行する． このスレッドの詳細は第 444 節で述べる．ここにチェ ックを入れると，ブラウザから URL を取 得してそれをサーバに送信するスレッドが，クライアント起動直後から実行されるようになる．

サーバ名の変更 本システムのサーバプログラムが動作しているサーバ名または IP アドレスを入力する． なお，Java のレイアウトマネージャの影響で入力フィールドが大きく広がっているが，本来こ のフィールドは 1 行入力フィールドである．

設定の保存 このボタンを押下すると，設定を保存することができる．設定がいつ反映されるかを確認するた めのダイアログが表示される ( 311)．起動時に∼をする，という設定はクライアントの次回起 動時から有効になる．サーバ名の変更は，サーバへの次回接続時から有効になる．

第 3 章 設計

31

 312: サーバへの接続/切断を切替えるボタン (左) サーバへ接続する / (右) サーバから切断する

 313: 最近閲覧した URL のリスト

343

サーバへの接続/切断

本システムのサーバへの接続/切断を切替える機能である．動作の根本を左右する設定であるか ら，ボタンによって簡単に切替えられるようにした．設定はメイン画面で行う．メイン画面の概 要は 39 を参照されたい．この画面に表示されている「サーバに接続」というボタンを押すと， サーバに接続する．サーバへ接続した後は表示が変わり， サーバから切断」という表示になる．こ 「 の表示のときにボタンを再度押すと，サーバから切断される．

344

URL の送信/非送信

URL をサーバに送信するかしないかを切替える機能である．チェ ックを入れるとサーバに履歴 を送信するようになる．また，下の「最近閲覧した URL」に自分が閲覧したサイトの履歴が表示
されるようになる ( 313)．閲覧日時，ページタイトル，URL が表示される．

345

共有履歴の表示

クライアントでは，サーバに保存された共有履歴のリストを表示することが出来る ( 314)．表 示される情報は，閲覧日時，Web ページタイトル，URL，閲覧したユーザの名前，ユーザ ID で ある． なお，表示する履歴の数はプルダウンリストから選ぶことが出来る．選ぶことの出来る数は，10，

30，50，100 である ( 315)．それぞれ対応する数の履歴がサーバからダウンロードされ，表示さ
れる．

346

待ち伏せ設定

待ち伏せ機能とは，Web サイトを閲覧中に面白いページを発見し， 「今後，このページを訪れた 他のユーザと会話がしたい」と思ったときに待ち伏せとして登録しておくと，後に他のユーザがそ のページを訪れたときに通知を受けることができる機能である．待ち伏せ登録をするための画面を  316 に示す．設定をした本人には他のユーザが訪れた旨が通知され，訪れたユーザには他の誰

第 3 章 設計

32

 314: 最近の共有閲覧履歴のリスト

 315: 表示する履歴の数を指定するプルダウンリスト かが待ち伏せ設定をしているという旨が通知される．いずれも，通知を受けたユーザは，その通知 をきっかけとしてチャ ットを開始することができる．

登録 待ち伏せ登録の情報は，実際にはサーバに保存される．詳細はサーバの節 35 で述べるが，全 ユーザが設定している待ち伏せ先をサーバにて一括管理するためである． 待ち伏せしたい URL があるとき，ユーザはその URL を入力し， 「待ち伏せに設定」ボタンを押 すことで登録することが出来る．登録済みのサイト一覧には，サイト名とその URL，待ち伏せて いるユーザ名とそのユーザ ID がツリー表示される入力した URL に間違いがあると，エラーメッ セージが表示される ( 317)．

 316: 待ち伏せ登録画面

第 3 章 設計

33

 317: URL に間違いがあった場合のエラーメッセージ

 318: 待ち伏せ URL を訪れた “komae” に表示されるダイアログ 待ち伏せの動作  316 で登録されている状態をもとに，待ち伏せ動作の説明を述べる． ここでは， 「電気通信大学トップページ」 にて”chofu” と”machida” が，Yahoo!JAPAN」 「 にて”chofu” が待ち伏せしている．さらに，この画面には表示されていないが，どこにも待ち伏せ登録をしてい ない”komae” というユーザがシステム内に存在していると仮定する．

待ち伏せリスト

“chofu” には 316 と同じリストが見える． “machida” には 316 のうち， 「電気通信大学トップページ」だけが登録された状態のリストが
見える

“komae” のリストは何も登録されておらず，空欄である．

“komae” が「電気通信大学トップページ」を訪れた場合
「電気通信大学トップページ」には既に”chofu” と”machida” が待ち伏せしているため，“komae” には 2 人のユーザが待ち伏せをしている旨が通知される ( 318)． また，待ち伏せをしている”chofu” と”machida” には，”komae” が「電気通信大学トップペー ジ」に訪れた旨が通知される ( 319) その後，全員に「電気通信大学」のチャ ットに参加するか どうかを尋ねるダイアログが表示される ( 320)．

第 3 章 設計

34

 319: 待ち伏せ URL に訪問があった “chofu” と”machida” に表示されるダイアログ

 320: 「電気通信大学」のチャ ットに参加するかどうかを尋ねるダイアログ

“komae” が「Yahoo! JAPAN」を訪れた場合
「yahoo! JAPAN」には”chofu” が待ち伏せしているという 318 (P33) と同様のダイアログ が表示される．但しこの場合，このダイアログに表示されている名前は”chofu” だけになる． また，待ち伏せている”chofu” にも 319 (P33) と同様のダイアログが表示される． その後，”komae” と”chofu” の両者には， Yahoo! JAPAN」のチャ 「 ットに参加するかどうかを尋 ねるダイアログが表示される．( 320，P34)．

“machida” が「電気通信大学トップページ」を訪れた場合 “machida” には，”chofu” が待ち伏せている旨を通知する， 318(P33) と同様のダイアログが
表示される．但しこの場合，このダイアログに表示されている名前は”chofu” だけになる．

“chofu” には，”machida” が訪れた旨を通知する， 319(P34) と同様のダイアログが表示さ
れる． その後，”machida” と”chofu” の両者に「電気通信大学」のチャ ットに参加するかどうかを尋ね るダイアログが表示される ( 320，P34)．

“komae” には何も変化が起こらない．

“machida” が「Yahoo! JAPAN」を訪れた場合
「電気通信大学トップぺージ」と全く同様である．

“chofu” が「電気通信大学トップページ」を訪れた場合 “machida” が「電気通信大学トップページ」を訪れたときと全く逆の動作になる．

“chofu” が「Yahoo! JAPAN」を訪れた場合
全員に何も変化が起こらない．

第 3 章 設計 表示の更新

35

「待ち伏せ設定一覧の表示を更新」ボタンを押すと，新しいデータをサーバからダウンロードし て表示を更新することができる．

登録の削除 「選択した待ち伏せを削除」ボタンを押すと，ツリーで選んだ URL を待ち伏せ登録から削除す ることができる．

347

チャ ット

チャ ットの概要 本研究では，他ユーザとの交流方法として，チャ ットによる文字ベースのリアルタイムコミュニ ケーションを用いる． チャ ットは以下のタイミングで開始される．

1 複数のユーザが同一 URL にアクセスした場合 2 待ち伏せ登録されている URL に，他のユーザがアクセスした場合
チャ ットルームは 1 つの URL に 1 部屋作成することができる．部屋とはチャ ットが行われる仮 想の空間のことで，同じ部屋に入ったユーザ同士のみがお互い文字メッセージを送り合い，会話を することが可能になる． ここでは 316 を例にとり，”chofu”，”machida”，”komae”，の 3 人が「電気通信大学トップ ページ」のチャ ットに参加した場合の画面を説明する (( 321)．

(1) ウィンドウタイトル ウィンドウタイトルに，チャ ットルームとして設定されている Web ペー ジの URL を表示する． (2) チャ ットルーム名 チャ ットルームとして設定されている Web ページのタイトルと URL を表 示する． (3) 発言表示部分 自分や他のユーザの発言が表示される．1 つの発言には，ユーザ名，発言内容，
発言時間が表示される． チャ ットルームに誰も人が居なかった状態から，新しく 1 人入室すると，

System: 部屋:電気通信大学トップページ The University of Electro-Communications Top Page (http://wwwuecacjp/) が作成されました．
という，部屋が新規作成された旨のメッセージが表示される． ユーザが入室すると，

第 3 章 設計

36

 321: 「電気通信大学」のチャ ット画面

”chofu”，”machida”，”komae” の 3 人が参加している． System: komae さんが参加しました．
という，新しくユーザが入室した旨のメッセージが表示される．ユーザが退室したときも同様で ある．その場合， komae さんが退室しました． 「 」となる．

(4) ユーザ一覧 そのチャ ットルームに居るユーザ一覧が表示される．ユーザ情報としてユーザ名 とユーザ ID が表示される． (5) 発言入力欄 (6) 送信ボタン
この欄に発言したいメッセージを記入する． このボタンを押すことで，発言が同室のユーザに送信される．

なお，ウィンドウを閉じることでチャ ットから退室する．

未実装部分・不具合について 「複数のユーザが同一 URL にアクセスした場合」については製作が間に合わず，卒業研究期間中 に実装を終わらせることが出来なかった．またチャ ット自体についても，メッセージを送信できな い不具合があったが，修正が間に合わず，卒業研究期間中に実装を終わらせることが出来なかった．

348

ユーザ名，ユーザ ID の変更

ユーザ名やユーザ ID を変更することができる．メイン画面 ( 39) の「ユーザ名変更」 「ユー ザ ID 変更」ボタンを押すと，初回起動時の設定画面 ( 37， 38) と同様のダイアログが表示 され，それぞれを変更することができる．

第 3 章 設計

37

35
351

サーバ
コネクションの管理

サーバは現在どのユーザからの接続を受けているかという情報，つまりユーザからのコネクショ ンを管理する機能を持つ．ユーザの判別はユーザ ID を用いる．管理方法の詳細は第 4 章で述べる． この機能によって，特定のユーザ，または特定のユーザ群だけに待ち伏せの通知を行ったり，メッ セージの送信を行ったりすることが可能になる．

352

共有閲覧履歴の管理

ユーザから送られて来た履歴を保存する．ユーザが履歴の情報を要求すると，サーバは保存され ている履歴情報を送り返す．

353

待ち伏せ設定の管理

ユーザが設定した待ち伏せ先 URL の情報を保存する．ユーザが設定している待ち伏せ情報を要 求すると，サーバは保存されている待ち伏せ設定を送り返す．あるユーザが訪れた URL に，他ユー ザが待ち伏せ設定をしていると，訪れたユーザには他ユーザが待ち伏せ設定しているという情報を 送信する．待ち伏せ設定をしているユーザには，あるユーザが訪れたという情報を送信する．

354

チャ ットの管理

チャ ットの参加を選択したユーザをチャ ットルームに入室させる．他ユーザから送られたメッセー ジを，そのユーザと同じチャ ットルームのユーザ全員に転送する．退室を選択したユーザをチャ ッ トルームから退室させる．異常切断したユーザをチャ ットルーム全体から退席させる．

38

第4章

実装

この章では，システムの実装の詳細を説明する．

41
411

動作環境と開発環境
動作環境

本システムの実装には，プログラミング言語として Java を用いた．Java の現行バージョンには 大きく分けて 14 系列と 50 系列がある．14 系列は広く普及しているが，50 系列はまだ広く普及 したとは言えない．本システムは，50 系列で新しく導入された機能は用いていないため，14 系 列以上の環境下で正常に動作する見込みである．J2SE Java Runtime Environment が組み込まれ， 動作する環境であれば，いかなる OS 上においても動作する見込だが，筆者が動作を確認した OS は Fedora Core 3，Windows XP Professional，Windows 2000 Professional，である．ただし日本 語を表示できる必要がある．

412

Java の GUI クラスライブラリ

GUI のクラスライブラリとして AWT や Swing，SWT などが用意されているが，本システムで は充実した内容を持つ Swing を用いた．クライアントの内部動作としては 14 系列においても，50
系列においても変わらない．しかし外観は 50 系列と 14 系列では大きく異なる．これは，50 系 列において，Swing の機能のうち，外観を管理する”Look & Feel” という機能に”Ocean” という新 しい外観テーマが導入され，標準テーマとなったが，この”Ocean” は 14 系列の標準テーマであ る”Steel” と見た目が大きく異なるためである．

413

開発環境

開発環境は以下の通りである．

Java 開発環境 J2SE Development Kit 50 update 6 日本語版 Java 統合開発ツール Eclipse 311(日本語化して使用) OS Fedora Core 3 CPU Intel Pentium4 32GHz
メモリ 1024MB このように，筆者の開発環境は 50 系列のため，動作環境は 14 系列ではなく 50 系列のほうが 筆者の意した外観になる．

第 4 章 実装

39

414

ソースコード

Java クラス数はクライアントで 29，サーバで 19，行数はクライアントで約 4500 行，サーバで 約 2700 行になった．

42

システムの接続形態

システムの全体構成の概要については， 32(P24) で述べた通りである．この節では，各要素 がどのように接続して全体が構成されているのか概要を述べる．

421

Firefox 拡張とクライアントの接続

URL 取得のための Firefox 拡張と本システムのクライアントは同一マシン上で同時に動作する． Firefox 拡張は HTTP を用いて Web サーバと通信し，閲覧履歴を送信する．そこで本システムで はクライアントを疑似的な Web サーバとして動作させることで，Firefox 拡張から送られる閲覧
履歴をクライアントで受信する．クライアントには待ち受けポート番号を変更するインタフェイ スはなく，標準では TCP の 8080 番ポートで Firefox 拡張からの接続を待ち受ける．Firefox 拡張 の履歴の送信先を同一マシン上，つまり localhost の 8080 番ポートに設定する必要がある ( 36，

P27)．

422

クライアントとサーバの接続

本システムのクライアントとサーバは，通常はネットワークで相互接続された別のマシン上で動 作する．クライアントとサーバの通信には TCP を用いる．サーバは TCP の 3104 番ポートで動作 している．クライアントには接続先ポート番号を設定するインタフェイスはなく，標準では 3104 番ポートにアクセスを試みるが，接続先サーバ名には，サーバが動作しているサーバ名を設定する 必要がある ( 310，P30)．参考までに，本研究室のネットワーク環境では，専ら”usagi” という サーバ名を持つマシンでサーバプログラムが動作していた． クライアントからサーバへの接続が確立すると，ユーザが切断を行わない限りコネクションは維 持されたままになる． サーバ・クライアント間の制御は全て文字ベースで行う．サーバ・クライアント間を流れるスト リームの文字コードは unicode で統一した． 以下の節では，Firefox 拡張，クライアント，サーバ，それぞれの構成要素について，それぞれ の詳細を述べて行く．

43

URL 取得のための Firefox 拡張

Firefox の拡張は XUL で記述される．XUL とは，Firefox を作成するためのユーザインターフェー スマークアップ言語である．その他，拡張は動作を記述するための JavaScript や，ドキュメントの
外観を細かく定義する CSS(スタイルシート) などが組み合わされ 1 つになったものである本エク

第 4 章 実装

40

ステンションは特に命名付けされていないが，historyxpi というファイル名を持ち，History Next

02 という通称を付けられている．
この拡張は，開いた Web ページの読み込みが完全に終了した直後に，その URL を埋め込んだ 以下の形式の文字列を，指定した接続先に送信する．

HTTP のリクエストヘッダ (空行) vote001=URL&title001=タイトル&=閲覧日時
「Fedora JP Project - ダウンロード -」(http://fedorajp/modules/download/) に接続した 際の例：

POST /~yagihara/cgi-bin/shukei/shukeicgi HTTP/11 Host: localhost:8080 User-Agent: Mozilla/50 (X11; U; Linux i686; ja-JP; rv:1712) Gecko/20050920 Firefox/107 Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=09,text/plain;q=08, image/png,*/*;q=05 Accept-Language: ja,en-us;q=07,en;q=03 Accept-Encoding: gzip,deflate Accept-Charset: Shift_JIS,utf-8;q=07,*;q=07 Keep-Alive: 300 Connection: keep-alive Content-Type: text/xml Content-Length: 126 Pragma: no-cache Cache-Control: no-cache vote001=http%3A//fedorajp/modules/download/ &title001=Fedora+JP+Project+-+%A5%C0%A5%A6%A5%F3%A5%ED%A1%BC%A5%C9 &time=1132905227
この例は可読性のために HTTP リクエストヘッダの 4 行目と，履歴情報の&にて改行してある が，実際のデータには改行は含まれない．この例を見ると，URL の一部記号が他の記号に置き換 わり，タイトルが英数字に置き換わっていることがわかる．これは URL エンコードの影響である．

URL エンコードとは，URL 自体の文字列や，CGI で送信される文字列には，半角英数字や数種類
の記号以外を用いることが出来ないため，マルチバイト文字や半角空白を特別なルールによって， 半角英数字や記号に変換することである．

44
441

クライアント
ユーザ ID の生成

小節 341 では初回起動時に入力されたパスワードからユーザ ID を生成することを述べた．生 成は以下の手順で行う．

第 4 章 実装

41

1 文字列を，Java 実行環境が動作するプラットフォームのデフォルト文字セットを用いてバイ ト配列を生成する． 2 javasecurityMessageDigest を用いて，バイト配列から MD5 ダイジェストが格納されたバ イト配列を新しく生成をする． 3 MD5 ダイジェストのバイト配列を 1 バイト取り出し，整数型にする． 4 取り出したバイト値が 128∼256 の場合，整数型にするときに負値として認識されてしまう
ので，256 を加える．

5 3∼4 の処理を行った 1 バイトを 16 進数 2 桁の文字列表記に変換する． 6 3∼5 の処理を，MD5 ダイジェストのバイト配列の最後まで繰り返す．
また，パスワード空欄時には，javautilRandom によってランダムな Long 整数値を生成し，こ れを文字列に変換したものをパスワードとして用いる． これらの性質から，偶然他のユーザとパスワードが一致した場合，同じ ID が生成され，同一ユー ザと認識される．
なお，1 についてはデフォルト文字セットを用いる関係から，パスワードとしてマルチバイト文字列を用い た場合，異なる動作環境では同じ ID が生成されない可能性がある．本来は文字列を一旦デフォルト文字セッ トから unicode などに変換し，変換した文字セットを用いてバイト配列を生成する必要があると考えられる． しかし確認・修正するための時間が無かったため，本論文執筆時ではこの方法を用いている．

442

設定の保存

小節 342 ではクライアントでの設定項目と，その設定方法を述べた．これらの設定内容は

javautilProperties クラスを利用して， クライアントプログラムと同じフォルダ内の”conﬁgureproperties” というテキストファイルに保存される．
また「各種設定」パネル ( 310,P30) で表示されている項目だけでなく，ユーザ名とユーザ ID，

Firefox 拡張から URL を取得するスレッドの待ち受けポート番号，サーバポートも保存されてい る．URL 待ち受けポートとサーバポートについては，それを変更するためのインタフェイスを実
装していないため，直接このファイルを書き換える必要がある． 設定内容は，起動時や URL 送信の切替え，サーバへの接続時など，設定値が必要になったタイ ミングでファイルから読み出される． このファイルは初期設定が終了したタイミングで生成される．初期設定の途中でプログラムを終 了すると，このファイルは削除される．ファイルの生成以降は起動時にこのファイルが存在するこ とを確認する．起動時にこのファイルが見付からない場合，初期設定動作を開始する．

443

サーバへの接続/切断

メイン画面にて「サーバに接続ボタン」を押すと，接続が開始される．サーバへの接続は以下の ように行う．

1 javanetSocket を用いて，設定されたサーバ名，ポート番号 3104 番に接続を試みる

第 4 章 実装

42

2 接続が確立したら，入力ストリーム javaioInputStream を取り出す 3 サーバから送られるデータを待機するために，javalangThread を継承した入力ストリーム 担当クラスのコンストラクタを呼び出す． 4 そのとき，コンストラクタの引数として取り出した入力ストリームを渡し，クラスがインス タンス化される． 5 スレッドを実行する．
なお，接続ボタンを押した後の接続試行でネットワークエラーなどがあり，実際にはサーバに接 続できていない場合でも，ボタンの表示はサーバから切断を行う表示になる ( 312, P31)．これ は本クライアントの不具合である．

444

URL の送信/非送信

スレッドの起動 メイン画面にて「URL を送信する/しない」のチェ ックボックスを入れると，Firefox 拡張から 閲覧履歴を待ち受けるスレッドが生成さる．さらに，そのスレッドが閲覧履歴を受信するとその情 報をサーバに送信するスレッドが生成される．それぞれのスレッドが生成されるまでの流れは以下 の通りである． ・閲覧履歴待ち受けスレッド

1 javanetServerSocket を用いて，ポート番号 8080 番のサーバソケットを生成する． 2 そのサーバソケットを履歴待ち受けスレッドクラスのコンストラクタに渡し，スレッドを実 行する． 3 履歴待ち受けスレッドはサーバソケットの待ち受けメソッド (javanetServerSocket#accept())
を実行する．待ち受けスレッドはサーバソケットに接続があるまでロックされ，実際に待ち 受けを行う． ・サーバに閲覧履歴を送信するスレッド

1 待ち受けスレッドのサーバソケットに Firefox 拡張からのアクセスがあると，そのコネクショ
ンからソケットを取り出す．

2 そのソケットをサーバに送信履歴を送信するスレッドのコンストラクタに渡し，スレッドを 実行する．

URL の取得 URL 取得のための Firefox 拡張から送られる閲覧履歴を受け取り，その中から URL を取り出す．
渡される情報は第 43 節 (P39) で述べた通り，HTTP のリクエストヘッダ，URL，タイトル，閲 覧日時だが，本システムではこの情報のうち URL のみを取り出して利用する．送られる URL は

URL エンコーディングされているため，javanetURLDecoder クラスを用いて通常の URL に変
換する．

第 4 章 実装 ページタイトルの取得

43

Firefox 拡張から送られる閲覧履歴に，URL エンコードされたページタイトルを取得すること
が出来るが，意したとおりに文字コードが判別できず，可読な文字にデコードできなかったた め，上記で取得した URL に接続し，直接 HTML ファイルを読み出してタイトルを取得する実装 にした．

HTML ファイルからタイトルを取得するためには，HTML 文書を構文解析するための仕組みが
必要となる．Java では以下に示すパッケージにおいて構文解析器が用意されているため，それを を継承して HTML 文書からタイトルを取得するクラスを実装した．

• javaxswingtexthtmlparserParserDelegator — 構文解析器の本体．javaioReader と，後述する PerserCallback を渡すと，Reader から HTML 文書を受信し，解析する．開始タグや終了タグ，コメントや通常文などの要素を発見
するごとに ParserCallback で定義された，それぞれの要素に対応するメソッドを呼び出し， 処理を任せる．

• javaxswingtexthtmlHTMLEditorKitParserCallback — 構文解析器から呼び出され，実際の処理を行うクラス．終了タグ発見時に呼び出されるメ ソッド，通常文を発見するメソッドなど，各要素に対応したメソッドの処理を定義する必要
がある．本研究のクライアントでは，開始タグ発見時に呼び出されるメソッドにおいて，タ イトルタグを発見したときには，インスタンス変数として保持する． タイトル取得までの流れは以下のようになる．

1 渡された URL 文字列から javanetURL クラスをインスタンス化する． 2 URL クラスのインスタンスから javanetURLConnection クラスのインスタンスを取得し， それを javanetHttpURLConnection クラスにキャストする． 3 HttpURLConnection クラスのインスタンスから javaioInputStream クラスのインスタンス を取得する． 4 InputStream クラスから文字ストリーム javaioInputStreamReader を生成し， さらに javaioBuﬀeredReader のインスタンスを取得する． 5 この BuﬀeredReader と ParserCallback のインスタンスを ParserDelegator に渡し，HTML
文書の解析を行う．

6 ParserCallback のインスタンスに格納されたタイトル文字列を取り出す．
対応する文字コード 日本語を含む HTML 文書で用いられている文字コードは一般的に数種類

用いられているが，本クライアントは JIS, Shif-JIS, EUC-JP の 3 種類に対応する．タイトル 取得までの流れのうち 4 で，バイトストリームである InputStream から文字ストリームである

InputStreamReader を生成するとき，文字コードの指定として”JisAutodetect” のオプションを指 定すると，文字コードを読み込むときに上記 3 つの文字コードを自動判別し，可読な文字データと
して読み込むことができるため，その機能を利用している．

第 4 章 実装 閲覧履歴の送信

44

• ページタイトル • URL • ユーザ名 • ユーザ ID • 閲覧時刻
以上の情報がサーバへ送信され，保存される．

445

共有履歴の表示

サーバはクライアントから共有履歴情報の要求があると，指定された数だけ共有履歴を送り返 す．詳しくは第 45 節で述べる．

446

待ち伏せ設定

クライアントは待ち伏せ設定画面 ( 316, P32) に入力された URL に接続し，タイトルを取得 した後に，以下の情報をサーバに送る．

• ユーザ名 • ユーザ ID • ページタイトル • URL
情報がサーバへ送られると，サーバは情報を保存すると同時に，その URL に待ち伏せを設定し ている他のユーザの情報をクライアントに返送する．クライアントはその情報を受け取り，表示 する．

インデックスページを示す URL の統一 ひとつの Web ページを指示する URL が複数存在する場合があるため，ある条件下においてク ライアントは URL の書き換えを行う場合がある． 通常，URL が持つ要素の中にはファイル名が含まれるが，インデックスページを示す”indexhtm” または”indexhtml” のいずれかの名前を持つファイルにアクセスしようとした場合，一般的には そのファイル名を省略することが可能になっている．これは，Web サーバの仕様として，ディレ クトリで終わる URL へのリクエストがあったとき，それは上記のファイルへのアクセスだと仮定 し，自動的に補完する，という仕様が一般的になっているからである． またディレクトリで終わる URL についても，一般的には末尾のスラッシュ”/” は省略可能になっ ている場合が多い．これは末尾に”/” を自動的に補完する仕様が一般的になっているからである．

第 4 章 実装

45

ユーザがどのような表記で URL を入力するのかは不確定である．以上のような複数通りの表記 が許される場合，同じ Web ページを示す URL に，待ち伏せ設定として複数登録できてしまう．そ こで URL を以下のルールにしたがって書き直すことによって，待ち伏せ設定する場合に，いずれ の表記で設定をした場合でも同じ Web ページとして認識し，同一 Web ページに複数の異なる表記 で待ち伏せが設定される，という現象を防ぐことができる．

• URL 中のファイル名が設定されておらず，文字列の最後に”/” が無い場合，URL はディレ
クトリを示していると考え，”/” を付ける．

— 例： http://wwwuecacjp/info/news → http://wwwuecacjp/info/news/ • URL 中のファイル名として”indexhtm” または”indexhtml” を持つ場合，ファイル名を削除
する．

— 例： http:///wwwuecacjp/info/indexhtml → http://wwwuecacjp/info/ • URL が”/” で終了している場合，何も処理を行わない． — 例： http://wwwuecacjp/info/ → 処理を行わない．

447

チャ ット

チャ ット動作の大半はサーバに依存しているため，内部動作の詳細は小節 454 で示し，ここで は主に GUI 動作の説明を述べる． チャ ットに関する処理を行うクラスは 3 つに分かれる．

1 ユーザが参加しているチャ ットルーム全体を管理するクラス 2 チャ ットルーム単体を管理するクラス 3 チャ ットルーム単体の GUI を管理するクラス 2 は，あるサイトに関するチャ ットを行う 1 つの部屋で，1 はその部屋がある建物全体のような ものだと考えれば良い．

ユーザの入室 ユーザがチャ ットルームに入室するときの流れは以下の通りである．

1 チャ ットの参加を選択すると，クライアントは参加をする旨をサーバに送信する． 2 サーバから部屋名，URL，現在のユーザリストなど，チャ ットルームの情報が返送されて来る． 3 その情報をもとに，全体を管理するクラスは，そのサイトに対応するチャ ット単体を管理す
るクラスのインスタンスを生成し，部屋全体のリストである Vector に保存する．

4 単体を管理するクラスのインスタンスはさらに，そのチャ ットの GUI を管理するクラスのイ ンスタンスを生成し，チャ ット画面が表示される． ．

第 4 章 実装 他ユーザの入室 他ユーザが新しくチャ ットルームに入室してきたときの流れは以下の通りである．

46

1 サーバから，参加しているチャ ットルームに新しく他ユーザが参加してきた旨が送られて来る． 2 その情報を受けたチャ ットルーム全体を管理するクラスのインスタンスは，そのチャ ットルー ム単体を管理するクラスのインスタンスにその情報を伝える． 3 単体を管理するクラスのインスタンスは，新しく参加したユーザの情報を，そのチャ ットルー
ムの GUI を管理するクラスのインスタンスに伝える

4 GUI を管理するクラスは，新しく参加したユーザの情報を表示する．

ユーザの退室 ここではユーザが意的に 1 つのチャ ットルームを退室した場合について述べる．

1 ユーザがチャ ットルーム画面を閉じると，GUI を管理するクラスのインスタンスから，チャ ット
単体を管理するクラスのインスタンスに javaawteventWindowEventWINDOW CLOSING という「ウィンドウが閉じられている」ことを表す情報が伝えられる．

2 その情報を受けたチャ ット単体を管理するクラスのインスタンスは，チャ ット全体を管理す るクラスのインスタンスに，チャ ットを退室した旨を伝える． 3 チャ ット全体を管理するクラスのインスタンスは，サーバにそのチャ ットルームを退室する
旨を送信する．

4 同時に，チャ ット全体を管理するクラスのインスタンスは，そのチャ ットルーム単体のイン
スタンスを Vector から削除する．

他ユーザの退室 他ユーザがチャ ットルームを退室したときの流れを以下に述べる．

1 サーバから，参加しているチャ ットルームから他ユーザ退室した旨が送信される． 2 その情報を受けたチャ ットルーム全体を管理するクラスのインスタンスは，そのチャ ットルー
ム単体を管理するクラスのインスタンスにその情報を伝える．

3 チャ ットルーム単体を管理するクラスのインスタンスは，退室したユーザの情報を，そのチャ ッ
トルームの GUI を管理するクラスのインスタンスに伝える．

4 GUI を管理するクラスは，退室したユーザの情報を画面から消去する．

第 4 章 実装 発言の受信 他ユーザが発言をしたときの流れを以下に述べる．

47

1 サーバから，ユーザが参加しているチャ ットの他のユーザが発言をした旨が送信される． 2 その情報を受けたチャ ットルーム全体を管理するクラスのインスタンスは，そのチャ ットルー ム単体を管理するインスタンスに，その情報を伝える． 3 チャ ットルーム単体を管理するクラスのインスタンスは，発言に関する情報を，そのチャ ット
ルームの GUI を管理するクラスのインスタンスに伝える．

4 GUI を管理するクラスは，発言を画面に表示する．

発言の送信 ユーザが発言をしたときの流れを以下に述べる．

1 GUI 画面上にて 「送信」 ボタンが押されると， 「ボタンが押された」 という情報を含む javaawteventActionEvent
が，チャ ット単体を管理するクラスのインスタンスに伝えられる．

2 チャ ット単体を管理するクラスのインスタンスはサーバにメッセージを送信する． 3 サーバから自分の発言が返送されてくるので，後は「発言の受信」と同様の処理を行う．

45

サーバ

この節では，本システムのサーバの機能を説明する．

451

コネクションの管理

サーバは複数のクライアントから接続を要求される．受けた接続の数だけスレッドを生成してい るため，コネクションを維持することが出来るが，サーバから任意のユーザ宛てにメッセージを送 信できることは，チャ ットを設計する上で必須なため，ユーザ ID の文字列から，そのユーザから のコネクションを取得できるよう，以下のような実装にした．

1 まず，ユーザ ID の文字列 (JavalangString) と，そのユーザとのコネクションを対にして保 有しているクラスのインスタンスを，線形リストである javautilVector に保存する． 2 接続したいユーザのユーザ ID 文字列をもとに，サーバは線形リスト Vector から 1 のコネク ション保有インスタンスを取り出す． 3 さらにコネクション保有インスタンスからコネクションを取り出し，通信する．
なお，コネクションがネットワークエラーなどの原因で異常切断した場合，そのコネクションを 線形リストから削除する．

第 4 章 実装

48

452

共有閲覧履歴の管理

サーバは，ユーザから送信される閲覧履歴の保存を行い，要求があれば，蓄積したデータをユー ザに送信する機能を持つ．本研究では，データの蓄積方法としてリレーショナルデータベースシス テムである”SQLite” [23] を用いた．また，SQLite を Java から利用できるようにするラッパーで ある”SQLite JDBC Wrapper” [24] を利用した．

閲覧履歴の保存 閲覧履歴は”tshist” という名前のテーブルに保存されている．閲覧履歴は以下の SQL 文を実行 して保存される．

INSERT INTO tshist VALUES(日時, タイトル,URL, ユーザ名, ユーザ ID)

閲覧履歴の読み出し 閲覧履歴の読み出しは以下の SQL 文で実行する．date とは tshist テーブルのうち，日時データ を保存するカラムである．読み出した履歴は最新のものから降順で指定された数だけ取り出される．

SELECT * FROM tshist ORDER BY date DESC LIMIT ユーザが指定した履歴の数
また，閲覧履歴の情報とカラム名の対応を表 41 に載せる． 表 41: 閲覧履歴の情報とカラム名の対応 日時 タイトル

date title url username userid

URL
ユーザ名 ユーザ ID

453

待ち伏せ設定の管理

待ち伏せ設定の管理も同様に SQLite と JDBC Java Wrapper を用いて実装した．

待ち伏せ設定の保存 待ち伏せ設定情報の保存は以下の SQL 文で行う．待ち伏せ設定情報のデータは”waiting” とい う名前のテーブルに保存される．

INSERT INTO waiting VALUES(タイトル,URL, ユーザ名，ユーザ ID)

第 4 章 実装 待ち伏せ設定の読み出し 待ち伏せ設定情報の読み出しは以下の SQL 文で行う．

49

SELECT * FROM waiting WHERE url in (SELECT url FROM waiting WHERE userid=読み出し要求を行ったユーザの ID) ORDER BY url
この SQL 文は以下の手順で情報を読み出す．

• 待ち伏せのリストから，読み出し要求を行ったユーザ ID が待ち伏せ設定している URL 一覧
を取り出す (2 行目)

• その URL を含む待ち伏せ設定情報を全て取り出す (1 行目) • URL で昇順に並べ替える (3 行目)
最終的に取り出されたデータは，読み出し要求を行ったユーザ ID が登録している URL と，そ こに待ち伏せ設定をしているユーザ情報全てとなる．

待ち伏せ設定の削除 設定の削除には以下の SQL 文を実行する．この SQL 文は，ユーザが意的に削除を要求した場 合に実行される．

DELETE FROM waiting WHERE userid=削除要求をしたユーザの ID and url=待ち伏せ設定し
た URL また，コネクションの異常切断などが起きた場合は，以下の SQL 文が実行され，ユーザが設定 した待ち伏せ設定は全て削除される．

DELETE FROM waiting WHERE userid=ユーザの ID

454

チャ ットの管理

サーバは，現在システム中で行われているチャ ットを管理する機能を持つ．ここでは，どのよう に管理するかを述べる． チャ ットに関する処理を行うクラスは 2 つに分かれる．

1 システム中のチャ ットルーム全体を管理するクラス 2 チャ ットルーム単体を管理するクラス

第 4 章 実装 ユーザの入室 ユーザが入室を選択したときの流れは以下の通りである．

50

1 全体を管理するクラスは，ユーザが入室したチャ ットルームが既に存在するか，チャ ットルー
ム単体を管理するクラスが保存された，部屋リストの Vector を検索する．

2 チャ ットルームが既に存在すれば，そのチャ ットルーム単体を管理するクラスに，新しくユー ザが入室した旨を伝える． 3 チャ ットルームが存在しなければ，そのチャ ットルーム単体を管理するクラスのインスタン スを生成し，部屋リストの Vector に保存する． 4 チャ ットルーム単体を管理するクラスは，ユーザリストの Vector に新しくユーザ情報を保存 する． 5 チャ ットルーム全体を管理するクラスは，そのチャ ットルームにいるユーザ全員に，新しく
ユーザが入室した情報を送信する．

ユーザの退室 ユーザが退室をしたときの流れは以下の通りである．

1 チャ ットルーム全体を管理するクラスは，対応するチャ ットルーム単体を管理するクラスに， ユーザが退室した旨を伝える． 2 チャ ットルーム単体を管理するクラスは，ユーザリストの Vector から退室したユーザの情報 を削除する． 3 チャ ットルーム全体を管理するクラスは，そのチャ ットルームにいるユーザ全員に，退室し たユーザの情報を送信する．

異常切断時の処理 クライアントからの接続が何らかの原因で異常切断された場合の流れを以下に述べる．

1 チャ ット全体を管理するクラスは，そのユーザが参加していたチャ ットルームをリストアップ
する．

2 リストアップしたチャ ットルーム単体を管理するクラスそれぞれに対して，そのユーザが退
室した旨を伝える．

3 後は，通常のユーザ退出の流れと同様である．

第 4 章 実装

51

455

発言の管理

クライアントから発言が送信されたときの流れを以下に述べる．

1 チャ ットルーム全体を管理するクラスは，その発言がされたチャ ットルーム単体のクラスか
らメンバリストを取得する．

2 メンバリストに保存されているユーザ全員にメッセージを転送する．

52

第5章

評価

この章では，本研究で作成したシステムの評価の概要と結果を述べる．なお，チャ ット機能に関 しては，プログラムの不具合や未実装部分のため，実際に運用して評価実験をするまでに至ってい ない．

51

評価の概要

本システムの主様な機能である「待ち伏せ機能」の動作について確認する．あるユーザが待ち伏 せをするとして設定した URL に，他のユーザがアクセスしたときに双方に通知がされることを確 認する．またその後，チャ ットの開始を促すアラートが表示され，チャ ットへの参加を選択すると， チャ ットウインドウが表示されることを確認する．

52

評価の結果

待ち伏せ URL にアクセスしたユーザにも，アクセスされたユーザにも，アラートが表示される ことが確認できた．よって，本システムの待ち伏せ機能は実装されていることがわかった．また その後，チャ ットの開始を促すアラートが表示される，チャ ットへの参加を選択すると，チャ ット ウィンドウが表示されることを確認した．チャ ット機能に関しては，入退室は出来ることを確認し たが，発言が出来ることは確認できなかった．これは本システムの不具合である．

53

第6章

結論

61

まとめ

本研究では，ウェブ閲覧と連動したコミュニケーションツールを作成することを目的とした．任 意の URL へ他のユーザが閲覧したことを通知する「待ち伏せ機能」を実装し，その通知をきっか けとして，チャ ットによる文字コミュニケーションを開始することができる設計とした．待ち伏せ 機能に関しては動作を確認することが出来たが，チャ ット機能については，不具合や未実装機能が 多く，その有用性を確認することが出来なかった．

62
621

今後の課題
システムの完成

本システムは，不具合や未実装機能があり，チャ ット機能の一部に関しては実装までに至ってい ない．従って，本システムのコミュニケーションツールとしての有用性を確認することが出来な かった．本研究はウェブ閲覧と連動したコミュニケーションの可能性や有用性を探ることが大きな 目的であるから，今後，最低限必要な機能の実装を進め，評価をしたい．

622

動的なインタフェイス

本システムはコミュニケーションツールであるから，他のユーザが本システムを利用している 様子を表現することが出来ればより面白いツールになるのではないかと考える．例えば，オンラ イン RPG ゲームなどでは，他のユーザがシステム上で活動している様子も描画されている．また 「戸口ブラウザ」では同じページを閲覧しているユーザの姿は影で表示されたり，ドアの形を模し た扉をノックすることでユーザに話しかけることができるなどのインタフェイスを持つ．同様に， 他ユーザの情報を，ただ単に文字のリストとして表現するだけではなく，自分や他ユーザの閲覧挙 動によって相手に近付いたり，またはこちら側に近付いてきたり，といった情報が一目でわかるよ うなインタフェイスは，本システムを利用するユーザの動きがインタラクティブに反映され，使っ ていて楽しいものになると考える．

63

情報を公開することへの抵抗感

本研究室で行われている履歴共有システムの課題として，履歴を公開することへの抵抗感が挙げ られている．閲覧履歴は個人の趣味を色濃く反映する情報であるから，個人情報保護法が施行さ れ，情報の流出に過敏な風潮が広まりつつある昨今，履歴の公開はプライバシーの面での問題を大 いに含んでいる．利便性は認められるが，情報を公開することへの抵抗感を上回るだけのメリット

第 6 章 結論

54

が得られなければ，そのシステムが広く利用されるのは難しいのではないか，という意見である． ところが，そういった風潮とは相反した性格を持つ，ソーシャルネットワーキングサイトが流行し ていることも事実である．ソーシャルネットワーキングサイトでは，個人のプロフィールだけでな く，日記，自分と関わりのあるメンバリストなど，全くパーソナルな情報もシステム中で公開され ている．個人情報流出に敏感になっている風潮の中，なぜソーシャルネットワーキングサイトの会 員数が増加しているのかを考える．総務省による「ブログ・SNS(ソーシャルネットワーキングサ イト) の現状分析及び将来予測」 [25] によれば，SNS について

• 出会いの場や同じ趣味を持つ人のコミュニティとして利用しているユーザは 1∼2 割程度” • ユーザの 8 割は知り合いとの間のコミュニケーションツールとして利用 • ユーザが同じサービスを利用しているという一体感 • 友人に誘われて参加するため，ブログに比べると比較的参加しやすい • 「受動的に続ける」ことが可能
という背景があることがわかっている． このことから，個人情報を扱う本システムはユーザに対して安心感を与えるように工夫しなけれ ばならない．履歴を送信していることを意識してしまうと警戒心を持ってしまう可能性があるか ら，極力それを表面に出さないシステム作りをする必要性がある．

55

謝辞
本研究は電気通信大学情報通信工学科情報通信システム学講座寺田研究室において，寺田 実 助 教授の御指導の下で卒業研究として行われました． 指導教官の寺田 実 助教授には，研究の基本方針や，研究を発表し人に伝えるという事の意義と 重要性など，研究者としての基本から御指導を頂き，また様々な面において御助言を賜わり，深く 感謝致します． 総合情報センター助手の丸山 一貴 氏には，外部からの出向にも関わらず，研究室の輪講などで 様々な御意見を賜わました．また，研究に関して多くの技術的な御助言，御指導を頂きました．心 から感謝申し上げます． 修士 2 年の白井 雄一郎さんには，御自身の研究にも忙しい中，研究に関する御助言を賜わり，ま た日頃の生活においても御世話になりました．大変感謝致します． 修士 1 年の高須賀 清隆さんには，就職活動や御自身の研究にも忙しい中，履歴共有システムにつ いてのアドバイスを戴き，また御自身が改良された閲覧履歴共有のための Firefox エクステンショ ンを本研究のために利用させて戴きました．大変感謝しています． 修士 1 年の武井 英人さんには就職活動や御自身の研究にも忙しい中，Java アプリケーション作 成に関する御助言を戴きました．ありがとうございます． 学部 4 年生の八木原 勇太くんには，閲覧履歴共有のための Firefox エクステンションを本研究の ために利用させて戴いただけでなく，多くの技術的支援を戴き，大変感謝致します． 並びに学部 4 年生の井上 真哉さん，柏村 俊太朗くん，合田 峻くんらは同じ卒業研究生として研 究の相談など多くの面で非常に御世話になりました．大変感謝致します．

56

参考文献
[1] OZONE，恋のマイアヒ： http://avexnetjp/item/ozone/disc/product/AVCD-17626html， avex network,2005．
この CD アルバムに同時収録された Flash 作品は，通称” わた” 氏によって作成，Web 上に公 開されたものである．元々は，ルーマニア語で歌われている歌詞が，日本語では全く別の面白 可笑しい内容に聴こえることを題材とした内容の Flash 作品だった．その後，Web 上のユー ザの間に大きく広まり，そのことをきっかけとして同 Flash 作品を収録した CD が発売され るまでに至った．

[2] Dschinghis Khan，BEST OF GENGHIS KHAN ： http://wwwjvcmusiccojp/-/Discography/A006483/VICP-63219html， Victor Entertainment,2005． このグループがリリースした「めざせモスクワ」という曲について，ドイツ語で歌われている 歌詞が，日本語では全く別の面白可笑しい内容に聴こえることを題材としたムービーや Flash
作品が制作され，Web 上で流通した．この映像は Web 上のユーザの間に大きく広まり，話題 を呼んだことをきっかけとして，日本においても CD が再度発売されるまでに至った．

[3] 中野独人，電車男： http://wwwshinchoshacojp/wadainohon/471501-8/， 扶桑社，2004． Web 上の掲示板におけるユーザ同士の交流を時系列にまとめた Web サイトがユーザ間に大き く広まり，話題を呼んだことをきっかけとして，書籍が出版され，それを原作とした映画やド
ラマの撮影や，演劇の公演がされるまでに至った．

[4] MSN Messenger ： http://messengermsncojp/，
マイクロソフト株式会社．

[5] Yahoo!メッセンジャー： http://messengeryahoocojp/， ヤフー株式会社． [6] mixi ： http://mixijp/， 株式会社ミクシィ． [7] mixi ヘルプ よくあるご質問,” コミュニティ” の項， http://mixijp/helppl．

第 6 章 結論

57

[8] GREE ： http://greejp/，グリー株式会社． [9] 増井俊之，本棚通信:控え目なグループコミュニケーション，インタラクション 2005 論文集， 情報処理学会，pp．135-142(2005)． [10] 増井俊之，本棚org ： http://pitecancom/Bookshelf/． [11] はてなブックマーク： http://bhatenanejp/， 株式会社はてな． [12] はてなブックマーク ヘルプ： http://bhatenanejp/help． [13] ソーシャルブックマーク::LiVEMARK(ライブマーク) ： http://livemarkjp/． [14] 高須賀清隆，八木原勇太，白井雄一郎，丸山一貴，寺田実：閲覧履歴共有のためのブラウザ拡
張，第 13 回インタラクティブシステムとソフトウェアに関するワークショ ップ (WISS2005)， 日本ソフトウェア科学会．

[15] Firefox ： http://wwwmozillacom/ﬁrefox/， Mozilla Project． [16] 伊藤直己，中田豊久，三浦元喜，西本一志，國藤進：非同期環境におけるコミュニケーション を触発する実世界指向らくがきメディアの構築と評価，情報処理学会研究報告 (グループウェ アとネットワークサービス)，GN55-6，pp．31-36(2005)． [17] 鈴村圭史，日景奈津子，村山優子：通りすがりを実現したブラウザシステムの提案，第 12 回 インタラクティブシステムとソフトウェアに関するワークショ ップ (WISS2004) 論文集，日本
ソフトウェア科学会，pp．149-150(2004)．

[18] TEGLET TB2 : http://wwwtegletcojp/tp/soft/tb2/，株式会社テグレット技術開発． [19] Internet Exproler ： http://wwwmicrosoftcom/windows/ie intl/ja/defaultmspx，
マイクロソフト株式会社．

[20] Web ディスカッション: http://oﬃcemicrosoftcom/ja-jp/assistance/CH063518681041aspx，
マイクロソフト株式会社．

[21] yakalike ： http://wwwyakalikecom/．

第 6 章 結論

58

[22] Ronald LRivest(Massachusetts Institute of Technology)，The MD5 Message-Digest Algorithm ： http://wwwietforg/rfc/rfc1321txt， The Internet Engineering Task Force． [23] SQLite home page ： http://wwwsqliteorg/． [24] Christian Werner，SQLite Java Wrapper ： http://wwwch-wernerde/javasqlite/overview-summaryhtml． [25] ブログ・ＳＮＳ（ソーシャルネットワーキングサイト）の現状分析及び将来予測： http://wwwsoumugojp/s-news/2005/pdf/050517 3 1pdf，総務省，2005．

</data>
       <segmenter>japanese</segmenter>
       <stemmer>depluralize</stemmer>
       <kb>japanese-indexing</kb>
</test>
</testset>
