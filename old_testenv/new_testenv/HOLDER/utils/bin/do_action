#!/usr/bin/python

import os, sys, string, time, getopt
import build_schema_node
import cgi_interface, vapi_interface
from lxml import etree
import velocityAPI

def build_delete_item(url=None, vsekey=None):

   newcrwldata = None

   if ( vsekey is not None ):
      newcrwldata = build_schema_node.create_crawl_delete(
                          vsekey=vsekey, synchronization="indexed")
   else:
      if ( url is not None ):
         newcrwldata = build_schema_node.create_crawl_delete(
                             url=url, synchronization="indexed")

   if ( newcrwldata is None ):
      print "crawl-delete node was not created, None returned"
   #else:
   #   print etree.tostring(newcrwldata)

   return newcrwldata

def do_enqueue(thing=None, collection=None, enqnode=None):

   resp = None

   try:
      resp = thing.api_sc_enqueue_xml(collection=collection,
                                      subc='live',
                                      crawl_nodes=etree.tostring(enqnode))
   except velocityAPI.VelocityAPIexception:
      print ""
      print ""
      ex_xml, ex_text = sys.exc_info()[1]
      print "enqueue, unexpected failure"
      print '%s:  %s' % (collection, ex_text)
      print "Enqueue failed"

   print ""
   if ( resp is not None ):
      print etree.tostring(resp)
   else:
      print "No Response (None)"

   return resp

def do_delete(yy=None, collection=None, url=None, vsekey=None):

   dnode = build_delete_item(url=url,vsekey=vsekey)

   print ""
   print etree.tostring(dnode)

   resp = do_enqueue(thing=yy, collection=collection, enqnode=dnode)

   return resp

def do_query(yy=None, collection=None, query=None, fname=None):

   if ( query is None ):
      query = ""

   if ( fname is None ):
      fname = "query.dump"

   if ( collection is None ):
      return None

   resp = yy.api_qsearch(source=collection, query=query, 
                         num=1000000, filename=fname)

   return resp

def count_em(yy=None, resp=None, fname=None):

   fname = yy.look_for_file(filename=fname)

   urlcount = yy.getTotalResults(resptree=resp, filename=fname)

   return urlcount


def get_db(xx=None, db=None, collection=None):

   xx.get_remote_database(db=db, collection=collection)

   return

def do_db_query(xx=None, yy=None, db=None, query=None):

   dbfile = yy.look_for_file(filename=db)

   qres = xx.run_db_query(dbfile=dbfile, query=query)
   print qres

   return


if __name__ == "__main__":

   opts, args = getopt.getopt(sys.argv[1:], "D:U:V:C:A:Q:F:", ["url=", "vsekey=",
                             "collection=", "action=", "query=", "filename="])

   collection = None
   url = None
   vsekey = None
   action = None
   query = None
   fname = None
   database = None

   for o, a in opts:
      if o in ("-V", "--vsekey"):
         vsekey = a
      if o in ("-U", "--url"):
         url = a
      if o in ("-C", "--collection"):
         collection = a
      if o in ("-Q", "--query"):
         query = a
      if o in ("-A", "--action"):
         action = a
      if o in ("-F", "--filename"):
         fname = a
      if o in ("-D", "--database"):
         database = a

   xx = cgi_interface.CGIINTERFACE()
   yy = vapi_interface.VAPIINTERFACE()

   if ( action == "delete" ):
      do_delete(yy=yy, collection=collection, url=url, vsekey=vsekey)
      sys.exit(0)

   if ( action == "query" or action == "count" ):
      resp = do_query(yy=yy, collection=collection, query=query, fname=fname)
      if ( action == "query" ):
         sys.exit(0)
      else:
         urlcount = count_em(yy=yy, resp=resp, fname=fname)
         print urlcount
         sys.exit(0)

   if ( action == "db" ):
      get_db(xx=xx, db=database, collection=collection)
      sys.exit(0)

   if ( action == "dbquery" ):
      do_db_query(xx=xx, yy=yy, db=fname, query=query)
      sys.exit(0)

