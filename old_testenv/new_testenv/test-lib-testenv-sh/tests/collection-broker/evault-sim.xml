<?xml version="1.0" ?>
<EVaultSim>
  <!--
       This configuration is an attempt to mimic the Vivisimo world
       but running at 10x speed:
       n-emails-per-hour        10x reality
       searcher-every-seconds   1/10
       search-pause-seconds     1/10
    -->
<!--
            maxOutstanding = getInt("max-outstanding", 100000);
            maxOffline = getInt("max-offline", 20000);
            auditSleepSeconds = getInt("audit-sleep-seconds", 5);
            searcherQueries = getInt("searcher-queries", 2);
            startCollections = getBool("start-collections", false);
            searcherStatusCounts = getBool("searcher-status-counts");
-->

  <!-- status-sleep-seconds: seconds to sleep between successive calls to broker-status -->
  <status-sleep-seconds>300</status-sleep-seconds>
  <!-- search-every-seconds: -->
  <!--  <searcher-every-seconds>2</searcher-every-seconds> -->
  <!-- search-pause-seconds: -->
  <!--<searcher-pause-seconds>1</searcher-pause-seconds> -->
  <!-- log-filename: if specified, path to file to use for verbose logging.  WARNING - this generates
       a lot of crap!! -->
  <!--<log-filename>scott-log.txt</log-filename>-->
  <!-- n-searchers: number of search threads-->
  <n-searchers>0</n-searchers>
  <!-- n-enqueuers: number of enqueue threads-->
  <n-enqueuers>60</n-enqueuers>
  <!-- max-enqueuers: maximum number of enqueuers in any given mailbox -->
  <max-enqueuers>60</max-enqueuers>
  <!-- batch-size: number of crawl-urls to send per-batch.  NOTE: this is crawl-urls, not *documents* -->
  <batch-size>200</batch-size>
  <!-- The msg and attachment directories containing symc data.  If specified these take precedence over all
       generator options -->
  <!--
  <symantec-xml-dir>E:\Messages\lab0\00001</symantec-xml-dir>
  <symantec-attachment-dir>E:\SourceRaw</symantec-attachment-dir>
  -->
  <!-- uniform-delivery: when sending data use a uniform delivery pattern instead of random -->
  <uniform-delivery>true</uniform-delivery>
  <!-- base-collection: base collection to use when generating new collections -->
  <base-collection>default-broker-push</base-collection>
  <!-- status-solumms: number of columns to output collection broker status -->
  <status-columns>7</status-columns>
  <!-- n-generators: number of generators to use to create data / read data from disk -->
  <n-generators>20</n-generators>

  <!-- server configuration options override global options -->
  <server>
    <!-- name: name of your server.  This will create collections named <name># -->
    <name>vivisimo</name>
    <!-- check-audit-log: enables / disables verification of the audit log for the number of items that
         have been enqueued -->
    <check-audit-log>false</check-audit-log>
    <!-- n-users: number of total users (collections) -->
    <n-users>2</n-users>
    <!-- max-active-users: number of maximum active users at any given time.  'active' is defined as 'currently
         sending data into', however once all data is sent it does not wait for it to get properly indexed
         before moving onto the next user -->
    <max-active-users>1</max-active-users>
    <!-- n-emails-per-hour: emails to send per hour.  set to 0 to constantly send-->
    <n-emails-per-hour>0</n-emails-per-hour>
    <!-- initialize: whether or not to initialize all of the collections prior to starting any enqueues.  If
         not already initialized collections will be initialized as-needed when they are accessedt the first
         time -->
    <initialize>false</initialize>
    <!-- initialize-type: one of 'delete', 'preserve', or 'clean'.  This describes how collections will be
         initialized -->
    <initialize-type>delete</initialize-type>
    <!-- index-journal: if enabled, all data sent to all mailboxes will also be sent to the journal -->
    <index-journal>false</index-journal>
    <!-- iterate-over-dir: number of times to iterate over the base xml directory if using symc data -->
    <iterate-over-dir>5000</iterate-over-dir>
    <!-- max-documents: number of documents to send to each collection before moving onto the next collection.
         NOTE: if not running in validation this is approximated.  If using validation this will be exact -->
    <max-documents>2000</max-documents>
  </server>
  <!-- the following are pieces that make up the url of the velocity instance to run against and also are leveraged
       by the generator as well-->
  <protocol>http</protocol>
  <port>80</port>
  <server-name>192.168.0.207</server-name>
  <virtual-dir>vivisimo754rc7clean</virtual-dir>
  <path>cgi-bin</path>
  <script-name>velocity.exe</script-name>
  <aspx>false</aspx>
  <cgi-params>v.app=api-soap&amp;v.username=admin&amp;v.password=baseball</cgi-params>

  <!-- word-list: the file location of a list of words to use when using the custom generator -->
  <word-list>C:\EVaultSim\zipfwords.txt</word-list>
  <!-- is-windows: whether or not the instance you are running against is windows-based.  This is only used
       by the generator-->
  <is-windows>true</is-windows>
  <!-- using-generator: whether or not to use the custom random generator to produce documents -->
  <using-generator>true</using-generator>
  <!--  max-contents: maximum contents to generate per document when using the custom generator -->
  <!--  content-size: size (number of words) of each content -->
  <content-size>100</content-size>
  <!-- whether or not this run is part of a set of validations.  This ensures the *exact* number of documents
       that each collection will be populated with and uses a different generator method -->
  <validation-run>true</validation-run>
  <!-- run-dict-validation: whether or not dictionary validation should be run to verify data was pushed / indexed
       properly -->
  <run-dict-validation>false</run-dict-validation>
  <!-- persist-validation-to-disk: persist validation information (word hash, list of collections) to disk.
       This can then be used in a later 'validation-only' run
        -->
  <persist-validation-to-disk>true</persist-validation-to-disk>
  <!-- dictionary-name: the name of the dictionary to generate when validating your run -->
  <dictionary-name>cb-validate</dictionary-name>
  <!-- The following are paths to files that will either be persisted to disk or read from disk -->
  <persistent-dictionary-file>dict.dat</persistent-dictionary-file>
  <persistent-collections-file>collections.dat</persistent-collections-file>
  <!-- validation-only: only run vaildation.  This assumes you have already persisted information to disk
       from a previous run and will be reading those files again -->
  <validation-only>false</validation-only>

  <!-- generate-deletes-percent: when using the custom generator, randomly generate x % crawl-deletes -->
  <generate-deletes-percent>1.0</generate-deletes-percent>
  <!-- generate-nodes-for-deletes: generate N nodes (could be crawl-url or crawl-delete) outside of the normal range.  This will be used in conjunction
       with the following parameters -->
  <generate-nodes-for-deletes>10</generate-nodes-for-deletes>
  <!-- generate-data-for-deletes: if enabled, generate crawl-url nodes.  This takes precedence over generate-deletes-for-deletes -->
  <generate-data-for-deletes>false</generate-data-for-deletes>
  <!-- generate-deletes-for-deletes: if enabled, generate crawl-delete nodes. -->
  <generate-deletes-for-deletes>false</generate-deletes-for-deletes>

  <!-- vse-config: if set these modifications will be made to the collections as they are created -->
  <vse-config>
    <crawler>
      <crawl-options>
        <crawl-option name="audit-log">all</crawl-option>
        <crawl-option name="audit-log-detail">medium</crawl-option>
        <crawl-option name="idle-running-time">60</crawl-option>
      </crawl-options>
    </crawler>
    <vse-index>
      <vse-index-option name="idle-exit">60</vse-index-option>
      <vse-index-option name="search-idle-exit">60</vse-index-option>
      <vse-index-option name="cache-mb">1</vse-index-option>
    </vse-index>
  </vse-config>

</EVaultSim>
