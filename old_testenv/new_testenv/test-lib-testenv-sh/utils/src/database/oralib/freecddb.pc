#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "commonora.h"

//
//   These routines use the following tables.
//
//   ALBUM table
//      album_id, album_year, album_genre, run_time, album_name
//      varchar   varchar     varchar      int       varchar
//      32        32          32                     256
//
//   ARTIST table
//      artist_id, artist_name
//      int        varchar
//                 256
//
//   TRACK table
//      track_id, album_id, sequence, run_time, track_name
//      int       varchar   int       int       varchar
//                32                            256
//
//   TRACK_ARTIST table
//      artist_id, track_id
//      int        int
//

//
//   move to a common include.
//
struct trackst {
   int track_seq;
   int runtime;
   char *artist;
   char *title;
   struct trackst *next;
};

struct discst {
   char *disc_id;
   char *year;
   char *artist;
   char *genre;
   char *title;
   int runtime;
   int varflag;
   struct trackst *tracklist;
};

int get_max_track_id()
{
int returnvalue;
EXEC SQL BEGIN DECLARE SECTION;
int db_track_id;
EXEC SQL END DECLARE SECTION;

   returnvalue = 0;

   EXEC SQL WHENEVER NOT FOUND DO notfoundfunc();
   EXEC SQL WHENEVER SQLERROR DO nullreturn();

   EXEC SQL SELECT max(track_id) into :db_track_id
            FROM track;

   if (notfound == 1) {
      notfound = 0;
   }

   if (errorval == 1) {
      errorval = 0;
   } else {
      returnvalue = db_track_id + 1;
   }

   return(returnvalue);
}

int get_max_artist_id()
{
int returnvalue;
EXEC SQL BEGIN DECLARE SECTION;
int db_artist_id;
EXEC SQL END DECLARE SECTION;

   returnvalue = 0;

   EXEC SQL WHENEVER NOT FOUND DO notfoundfunc();
   EXEC SQL WHENEVER SQLERROR DO nullreturn();

   EXEC SQL SELECT max(artist_id) into :db_artist_id
            FROM artist;

   if (notfound == 1) {
      notfound = 0;
   }

   if (errorval == 1) {
      errorval = 0;
   } else {
      returnvalue = db_artist_id + 1;
   }

   return(returnvalue);
}

int check_album_id(char *album_id)
{
int returnvalue;
EXEC SQL BEGIN DECLARE SECTION;
char *db_album_id, db_album_id2[64];
EXEC SQL END DECLARE SECTION;

   returnvalue = 0;
   db_album_id = album_id;

   EXEC SQL WHENEVER SQLERROR DO nullreturn();
   EXEC SQL WHENEVER NOT FOUND DO notfoundfunc();


   EXEC SQL SELECT album_id into :db_album_id2
            FROM album
            WHERE album_id = :db_album_id;

   if (db_album_id2 != NULL) {
      if (notfound == 0) {
         returnvalue = 1;
      } else {
         notfound = 0;
      }
   } else {
      errorval = 0;
   }

   return(returnvalue);
}

int get_artist_id(char *artist)
{
int returnvalue;
EXEC SQL BEGIN DECLARE SECTION;
char *db_artist;
int db_artist_id;
EXEC SQL END DECLARE SECTION;

   returnvalue = -1;
   db_artist = artist;
   db_artist_id = -1;

   EXEC SQL WHENEVER NOT FOUND DO notfoundfunc();
   EXEC SQL WHENEVER SQLERROR DO nullreturn();

   EXEC SQL SELECT artist_id into :db_artist_id
            FROM artist
            WHERE artist_name = :db_artist;

   if (db_artist_id != -1) {
      returnvalue = db_artist_id;
   }
   notfound = 0;
   errorval = 0;

   return(returnvalue);
}

int insert_track_artist_info(int artist_id, int track_id)
{
EXEC SQL BEGIN DECLARE SECTION;
int db_artist_id, db_track_id;
EXEC SQL END DECLARE SECTION;
int err;

   err = 0;

   EXEC SQL WHENEVER SQLERROR DO mysql_error();

   db_artist_id = artist_id;
   db_track_id = track_id;

   EXEC SQL INSERT INTO track_artist
      (artist_id, track_id)
      VALUES(:db_artist_id, :db_track_id);

   if (errorval == 1) {
      runaway("Insert (track_artist) failed, abandoning");
      err = -1;
   }

   return(err);
}

int insert_artist_info(char *artist)
{
EXEC SQL BEGIN DECLARE SECTION;
int db_artist_id;
char *db_artist;
EXEC SQL END DECLARE SECTION;
int err;

   err = 0;

   EXEC SQL WHENEVER SQLERROR DO mysql_error();

   db_artist_id = get_artist_id(artist);
   if (db_artist_id < 0) {
      db_artist_id = get_max_artist_id();
      db_artist = artist;

      EXEC SQL INSERT INTO artist
         (artist_id, artist_name)
         VALUES(:db_artist_id, :db_artist);

      if (errorval == 1) {
         runaway("Insert (artist) failed, exiting");
         db_artist_id = -1;
      }
   }

   return(db_artist_id);
}
int insert_track_info(struct discst *cd)
{
struct trackst *follow;
int artist_id;
EXEC SQL BEGIN DECLARE SECTION;
int db_runtime, db_sequence, db_track_id;
char *db_album_id, *db_track_name;
EXEC SQL END DECLARE SECTION;
int err;

   err = 0;

   EXEC SQL WHENEVER SQLERROR DO mysql_error();
   follow = cd->tracklist;

   while (follow != NULL) {

      db_track_id = get_max_track_id();

      db_sequence = follow->track_seq;
      db_runtime = follow->runtime;
      db_album_id = cd->disc_id;
      db_track_name = follow->title;

      EXEC SQL INSERT INTO track
         (track_id, album_id, sequence, run_time, track_name)
         VALUES(:db_track_id, :db_album_id, :db_sequence,
                :db_runtime, :db_track_name);

      if (errorval == 1) {
         runaway("Insert (track) failed, exiting");
         err = -1;
      }

      if (err == 0) {
         if (follow->artist != NULL) {
            artist_id = insert_artist_info(follow->artist);
         } else {
            artist_id = insert_artist_info(cd->artist);
         }

         if (artist_id >= 0) {
            if (insert_track_artist_info(artist_id, db_track_id) == 0) {
               follow = follow->next;
            } else {
               err = -1;
            }
         } else {
            err = -1;
         }
      }
   }

   return(err);
}

int insert_album_info(struct discst *cd)
{
EXEC SQL BEGIN DECLARE SECTION;
int db_runtime;
char *db_album, *db_album_id, *db_album_year, *db_album_genre;
EXEC SQL END DECLARE SECTION;
int err;

   err = 0;

   EXEC SQL WHENEVER SQLERROR DO mysql_error();

   db_album_id = cd->disc_id;
   db_album_year = cd->year;
   db_album = cd->title;
   db_runtime = cd->runtime;
   db_album_genre = cd->genre;

   EXEC SQL INSERT INTO album
      (album_id, album_year, album_genre, run_time, album_name)
      VALUES(:db_album_id, :db_album_year, :db_album_genre, :db_runtime, :db_album);

   if (errorval == 1) {
      runaway("Insert (album) failed, exiting");
      err = -1;
   }

   return(err);
}

void docommit()
{
   EXEC SQL COMMIT;
   return;
}
