#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <sqlda.h>
#include <sqlca.h>
#include <sqlcli.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include <sql.h>

EXEC SQL INCLUDE SQLCA;


#define READSZ 80
#define UIDINFOSZ 16


//////////////////////////////////////////////////////////////
//
//   This program assume the following tables exist in your
//   db2 database:
//
//   file_info:
//   create table file_info (
//      file_id number not null,
//      file_name varchar(64) not null,
//      file_size number,
//      data_type varchar(64),
//      file_location varchar(64));
//
//   file_content:
//   create table file_content (
//      file_id number not null,
//      file_name varchar(64) not null,
//      seg_size number not null,
//      read_num number not null,
//      content varchar(64));
//

//////////////////////////////////////////////////////////////
//
//   DB2 implementation of embedded sql program.
//
//   Compilation:
//      db2 connect to <database>
//      db2 prep table_ins.db2.sqc
//      gcc table_ins.c -I $INCLUDE_PATH -L $LD_LIBRARY_PATH -ldb2
//   where
//      INCLUDE_PATH=/opt/ibm/db2/V9.1_01/include
//      LD_LIBRARY_PATH=/opt/ibm/db2/V9.1_01/lib32
//
//   The portion /opt/ibm may vary with each installation
//
//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
//
//   Get the current size of a file for inclusion in the
//   file_info table.
//
int getfilesize(char *filename)
{
struct stat buf;
int there;

   there = stat(filename, &buf);
   if (there != 0) {
      printf("Could not stat file:  %s\n", filename);
      exit(1);
   }

   return(buf.st_size);
}


//////////////////////////////////////////////////////////////
//
//   Open a connection to the database.
//
int opendb(char *user, char *psswd)
{
EXEC SQL BEGIN DECLARE SECTION;
char ur[12], pd[12];
char dbname[12];
EXEC SQL END DECLARE SECTION;

   strcpy(ur, user);
   strcpy(pd, psswd);
   strcpy(dbname, "WWII_NAV");

   EXEC SQL WHENEVER SQLERROR GOTO stupid_thing;

   EXEC SQL CONNECT TO :dbname USER :ur USING :pd;

   return(0);

   stupid_thing:
   {
      printf("DB open failed, exiting\n");
      exit(1);
   }
}

//////////////////////////////////////////////////////////////
//
//   Gather some data on the file and insert it into the
//   file_info table.  If the file name already exists,
//   exit the routine.
//
int insertfileinfo(char *argfilename)
{
EXEC SQL BEGIN DECLARE SECTION;
long fileid, filesize;
char filename[65];
EXEC SQL END DECLARE SECTION;

   strcpy(filename, basename(argfilename));
   filesize = getfilesize(argfilename);
   fileid = -1;

   if (filesize <= 0) {
      printf("File contains no data; exiting\n");
      exit(0);
   }

   EXEC SQL WHENEVER NOT FOUND CONTINUE;

   EXEC SQL SELECT file_id into :fileid
            FROM file_info
            WHERE file_name = :filename;

   if (fileid < 0) {
      EXEC SQL WHENEVER SQLERROR CONTINUE;
      EXEC SQL SELECT max(file_id) into :fileid
               FROM file_info;

      if (fileid < 0)
         fileid = 0;
      else
         fileid++;

      EXEC SQL INSERT INTO file_info
         (file_id, file_name, file_size)
         VALUES (:fileid, :filename, :filesize);

      EXEC SQL COMMIT;
   }

   return(fileid);

   stupid_thing:
   {
      printf("Insert of file info bombed\n");
      exit(1);
   }

}

//////////////////////////////////////////////////////////////
//
//   Insert the data into the database as a record.  All of
//   the data was acquired in  readdata()
//   This routine inserts into the file_content table.
//
int insertdata(char *data, int datasz, char *filename,
               int linecount, int readsize, int fileid)
{
// int fdout;
EXEC SQL BEGIN DECLARE SECTION;
long dblinecount, dbreadsize, dbfileid;
char dbdata[81], dbfilename[64];
EXEC SQL END DECLARE SECTION;

   dblinecount = linecount;
   dbreadsize = readsize;
   dbfileid = fileid;
   strcpy(dbfilename, filename);
   strcpy(dbdata, data);

   EXEC SQL INSERT INTO file_content
      (file_id, file_name, seg_size, read_num, content)
      VALUES (:dbfileid, :dbfilename, :dbreadsize, :dblinecount, :dbdata);

   EXEC SQL COMMIT;

   return(0);

   stupid_thing:
   {
      printf("Inserting a row bombed\n");
      return(0);
   }
}

//////////////////////////////////////////////////////////////
//
//   Open a file for reading only.  If the file can not be
//   opened, exit the program.
//
int openfile(char * filename)
{
int fd;

   fd = open(filename, O_RDONLY);

   if (fd != (-1)) {
      return(fd);
   } else {
      printf("Could not open file:  %s\n", filename);
      exit(1);
   }
}

//////////////////////////////////////////////////////////////
//   
//   Read the data from the file into a buffer and pass it
//   up to be inserted into a database.  There is nothing
//   fancy here; just read a number of bytes and insert.
//
char *readdata(int fd, int readsize, char *filename, int fileid)
{
char mychunk[READSZ + 1];
int amt, linecount, i;

   linecount = 0;

   for (i = 0; i < (READSZ + 1); i++) {
      mychunk[i] = '\0';
   }

   amt = read(fd, mychunk, readsize);
   while (amt == readsize) {
      insertdata(mychunk, amt, filename, linecount, readsize, fileid);
      for (i = 0; i < (READSZ + 1); i++) {
         mychunk[i] = '\0';
      }
      amt = read(fd, mychunk, readsize);
      linecount++;
   }
   if (amt > 0) {
      insertdata(mychunk, amt, filename, linecount, readsize, fileid);
   }
}

int main(int argc, char *argv[])
{
extern char *optarg;
extern int optind;
int fd, c, readsize, fileid;
char *argfilename;
static char *optstring = "f:s:";

   argfilename = NULL;
   fileid = readsize = 0;

   while ((c = getopt(argc, argv, optstring)) != EOF) {
      switch (c) {
         case 'f':
                    argfilename = optarg;
                    break;
         case 's':
                    readsize = atoi(optarg);
                    break;
         default:
                    printf("Invalid argument:  %c\n", (char)c);
                    break;
      }
   }

   if (readsize == 0) {
      readsize = READSZ;
   }

   if (readsize > READSZ) {
      readsize = READSZ;
   }

   if (argfilename == NULL) {
      printf("Must specify a file to import\n");
      exit(0);
   }

   opendb("gaw", "mustang5");

   fd = openfile(argfilename);
   fileid = insertfileinfo(argfilename);

   readdata(fd, readsize, basename(argfilename), fileid);

   exit(0);
}
