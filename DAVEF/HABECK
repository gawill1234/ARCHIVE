/* The server */
/*
 * server test progran for catching SIGIO's
 *
 * usage: server.tcp port#    (ie. server.tcp 9876)
 */
#include <signal.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <stdio.h>
#include <netdb.h>

void     sigio();
int  ns;

main(int argc, char *argv[]) 
{
     int i, s, pgrp, on=1;
     struct sockaddr_in src;
     int len=sizeof(src);
     char buf[256];

     src.sin_family = AF_INET;
     src.sin_port = atoi(argv[1]);
     src.sin_addr.s_addr = 0;
     if ((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
          perror("server: unable to open socket");
          exit(1);
     }
     while (bind(s, (struct sockaddr *)&src, sizeof(src)) < 0) {
          printf("server: waiting on bind...\n");
          sleep(1);
     }
     listen(s, 0);
     ns = accept(s, (struct sockaddr *)&src, &len);
     if (ns < 0) {
          perror("server: accept failed");
          exit(1);
     }

     pgrp = getpid ();
     if (ioctl(ns,  SIOCSPGRP, (char *)&pgrp) < 0) {
          perror("server: ioctl SIOCSPGRP");
          exit(1);
     }
     if (ioctl(ns, FIOASYNC, (char *)&on) < 0) {
          perror("server: ioctl FIOASYNC");
          exit(1);
     }
     signal(SIGIO, sigio);

     for(;;) {
          /* do nothing... wait for sigio's */
          i++ ;
          i-- ;
     }
}

void sigio(arg)
int arg;
{
     char buf[256];

     signal(SIGIO, sigio);

     printf("RECIEVED SIGIO\n");
     if (read(ns, &buf, sizeof(buf)) < 0) {
          perror("read");
          exit(1);
     }
     printf("%s\n", buf);
}
/* The end of the server */




/* The Client */
/*
 * client program to test SIGIO's
 * 
 * usage: client.tcp serverhost port#  (ie. client.tcp hot.cray.com 9876)
 */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <netdb.h>


main(int argc, char *argv[])
{
     int s,count;
     char data[100];
     struct sockaddr_in dest;
     struct hostent *hp; 

     hp = gethostbyname(argv[1]);
     dest.sin_family = hp->h_addrtype;  /* addr type (AF_INET) */
     bcopy(hp->h_addr_list[0], &dest.sin_addr, hp->h_length);
     dest.sin_port = atoi(argv[2]);


     if ((s = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
          perror("client, cannot open socket");
          exit(1);
     }
     if (connect (s, &dest, sizeof(dest)) < 0) {
          close(s);
          perror("client, connect failed");
          exit(1);
     }
     for (count=0; count < 10; count++) {
          sprintf(data, "TCP test message %5d", count); 
          if (write(s, data, strlen(data)) < 0) {
               perror("client, write failed");
          }
          sleep(count);
     }
     exit(0);
}
/* The end of the client */



